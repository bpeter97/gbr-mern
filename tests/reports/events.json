{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-24T00:42:05.040Z",
    "end": "2018-05-24T00:42:10.263Z",
    "duration": 5223,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2d1b8471-627f-457c-aeac-37f31ee246f2",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6d6e411f-a4df-422c-82a7-806a5e4c1cce",
        "title": "EVENTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
        "file": "\\server\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1415,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ed76cee9-e1cc-46be-8ca0-9fa278b17a19",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 168,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  CalendarEvent.remove({})\n    .then(() => {\n      var eventOne = new CalendarEvent(events[0]).save();\n      var eventTwo = new CalendarEvent(events[1]).save();\n      var eventThree = new CalendarEvent(events[2]).save();\n      return Promise.all([eventOne, eventTwo, eventThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3b04f6b3-6408-4713-af23-e50d560c7315",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1556f1bd-4f88-45d1-b170-caa4844c7005",
            "title": "GET /events",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 195,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(events.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "179ebfa7-eb01-4e52-b4a3-9862e0579630",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "179ebfa7-eb01-4e52-b4a3-9862e0579630"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 195,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "af516f69-547c-4987-a146-66c61a859bb8",
            "title": "POST /events",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(newEvent)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(newEvent.title);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: newEvent.title })\n            .then(event => {\n              expect(event).toBeTruthy();\n              expect(event.title).toBe(newEvent.title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0a518e33-a823-44d6-996c-ef1b53038d4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(badEvent)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: badEvent.title })\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d06b5877-d132-4568-8f65-eb10150ce9be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a518e33-a823-44d6-996c-ef1b53038d4e",
              "d06b5877-d132-4568-8f65-eb10150ce9be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 441,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "052dbbd3-1341-4713-9c98-c776c2442526",
            "title": "GET /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "29c91463-58e1-48c0-a4d6-57846140b682",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "552771d1-3a84-4145-80f3-d2c17287017f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29c91463-58e1-48c0-a4d6-57846140b682",
              "552771d1-3a84-4145-80f3-d2c17287017f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 251,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "33a2d915-29a0-49f5-825d-d8ff3c5d1f0f",
            "title": "PATCH /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"New title\",\n          color: events[0].color,\n          start: events[0].start,\n          end: events[0].end,\n          order: events[0].order\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(\"New title\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(\"New title\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c68c4856-bd11-4310-8f41-06a11a86cba2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"\",\n          color: \"\",\n          start: \"\",\n          end: \"\",\n          order: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(events[0].title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b6dd54eb-294a-4a43-8588-8a0146e5aee3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .send(events[0])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1a35631b-cabf-4116-81f7-44c34d325ad3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c68c4856-bd11-4310-8f41-06a11a86cba2",
              "b6dd54eb-294a-4a43-8588-8a0146e5aee3",
              "1a35631b-cabf-4116-81f7-44c34d325ad3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 513,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c3dc6e99-e324-4174-a8fc-5ab3e36e20e0",
            "title": "DELETE /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 248,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[1]._id.toHexString())\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "98d378f9-a2a3-4113-8b17-f93a24dd02c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "541ba477-8517-40c4-90f6-73021d7bfcb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98d378f9-a2a3-4113-8b17-f93a24dd02c6",
              "541ba477-8517-40c4-90f6-73021d7bfcb2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 333,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}