{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-23T23:03:56.894Z",
    "end": "2019-03-23T23:04:02.441Z",
    "duration": 5547,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1d429f3e-debb-4612-b341-053c87857dc4",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a30a36e0-2d20-4009-8ef8-7db6bf39570c",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
        "file": "\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1799,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f51face6-8162-421b-b23c-f2084ee5e2e9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "CalendarEvent.deleteMany({})\n  .then(() => {\n    var eventOne = new CalendarEvent(events[0]).save();\n    var eventTwo = new CalendarEvent(events[1]).save();\n    var eventThree = new CalendarEvent(events[2]).save();\n    return Promise.all([eventOne, eventTwo, eventThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0a67be31-c249-4bab-b911-4516b097e48f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b33cae0e-648a-4a70-948e-8912a4032794",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(events.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b982f76e-1fd8-48d9-83f3-4cc9f4814833",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b982f76e-1fd8-48d9-83f3-4cc9f4814833"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f5d3ef24-60d0-4d87-84ff-cd44bf9fa152",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(newEvent)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(newEvent.title);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: newEvent.title })\n      .then(event => {\n        expect(event).toBeTruthy();\n        expect(event.title).toBe(newEvent.title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d1e117fc-514e-4339-9735-c6205464cfaf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(badEvent)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: badEvent.title })\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "eb565cff-547c-48a6-bca9-7461512201ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d1e117fc-514e-4339-9735-c6205464cfaf",
              "eb565cff-547c-48a6-bca9-7461512201ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 461,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7d8abd45-73c0-467d-afa9-933c02a20049",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "743bfd38-be98-438d-8f52-056ef10acabb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "53f30849-2d6e-4ec5-8465-bc2ef8436083",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "743bfd38-be98-438d-8f52-056ef10acabb",
              "53f30849-2d6e-4ec5-8465-bc2ef8436083"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 364,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "79188555-12d2-4754-8f26-79dd4a9fdfba",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"New title\",\n    color: events[0].color,\n    start: events[0].start,\n    end: events[0].end,\n    order: events[0].order\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(\"New title\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(\"New title\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9d19ecdd-257d-41cc-92bd-c7a9fed6ff33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"\",\n    color: \"\",\n    start: \"\",\n    end: \"\",\n    order: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(events[0].title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d1e0a21b-ec80-44c5-9676-d7c4120e2550",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(events[0])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c89c5f60-51fd-4b22-8c72-d4f814db0caf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9d19ecdd-257d-41cc-92bd-c7a9fed6ff33",
              "d1e0a21b-ec80-44c5-9676-d7c4120e2550",
              "c89c5f60-51fd-4b22-8c72-d4f814db0caf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 548,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "85904b5a-c992-48aa-82a5-b1a332806426",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[1]._id.toHexString())\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "96e747b6-529a-47a1-936d-38921ded2a2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4e620a7a-223d-441a-96a7-1c5b98a81434",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96e747b6-529a-47a1-936d-38921ded2a2d",
              "4e620a7a-223d-441a-96a7-1c5b98a81434"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 354,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}