{
  "stats": {
    "suites": 74,
    "tests": 145,
    "passes": 145,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-24T00:10:55.844Z",
    "end": "2019-03-24T00:13:20.352Z",
    "duration": 144508,
    "testsRegistered": 145,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a00a0072-7d96-4053-8cf2-4f4ba00d69ed",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "7eba19ea-dc4a-4c7e-a0ac-198091c08e4e",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
        "file": "\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1891,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "298d2293-60a0-4989-9cb9-bde892f07d72",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fde56d93-c298-47bb-a9cc-fc783b9a8064",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c5a1f965-7580-4566-8023-f59d99b2a465",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "27a5d3b3-9acd-4244-a20a-a6f68e05907b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7f5add6c-c83a-4903-99d2-4948c126d04d",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "51904193-d948-4b8d-b688-50fa1c2757ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51904193-d948-4b8d-b688-50fa1c2757ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b779d4fa-b156-46e5-8760-4276aecbf074",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 393,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainerSize)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e968fe34-1403-4d84-82cc-d42804453be4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) return done(err);\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e006dfa4-0b61-48a6-8a23-6ee3902cfd22",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e968fe34-1403-4d84-82cc-d42804453be4",
              "e006dfa4-0b61-48a6-8a23-6ee3902cfd22"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 572,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fd352473-ec69-4a9f-a20f-3b15765ad3af",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "51cb7098-c63f-4354-84b2-d4b6818a65f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "92e810d1-5fa0-4762-a968-b747ca22fc84",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51cb7098-c63f-4354-84b2-d4b6818a65f4",
              "92e810d1-5fa0-4762-a968-b747ca22fc84"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "48d46074-7377-425e-bf07-a2fc2f12de1f",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "87e56ed2-b55e-424c-94e4-1b93735957c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4c404b48-0507-4f19-8c24-e43e6926e067",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c7ca3f71-5901-428b-a11b-f0ba99901f56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a5c97345-7221-4718-a2aa-05d7d1ad71d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "87e56ed2-b55e-424c-94e4-1b93735957c7",
              "4c404b48-0507-4f19-8c24-e43e6926e067",
              "c7ca3f71-5901-428b-a11b-f0ba99901f56",
              "a5c97345-7221-4718-a2aa-05d7d1ad71d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 812,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f72f7c32-9dfa-4a08-bb08-435961a48dcf",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "684ae27e-2753-447c-b04b-1f54a27b1c0b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f937c2ff-3c75-47fc-9e19-b416c0d041c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "684ae27e-2753-447c-b04b-1f54a27b1c0b",
              "f937c2ff-3c75-47fc-9e19-b416c0d041c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "844c886e-5170-4595-ad68-3d5c4d05aba1",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 365,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d2a0bcb3-135c-499b-8035-c3f703a67d9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2a0bcb3-135c-499b-8035-c3f703a67d9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 365,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "47a93008-375e-409b-9271-afb1c528fc60",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 357,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0d1775c9-cffe-4522-b3f2-429da8bdeda5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d5baab79-2d8c-4736-b743-6fd2be4a5ab5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d1775c9-cffe-4522-b3f2-429da8bdeda5",
              "d5baab79-2d8c-4736-b743-6fd2be4a5ab5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7c33cc92-ba3d-471f-ada5-91ce37602d70",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a62e4ea7-7a9c-4e9d-ac4f-ba9850fb5082",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bdbc92fd-3ef8-4a81-a177-78997422df3a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a62e4ea7-7a9c-4e9d-ac4f-ba9850fb5082",
              "bdbc92fd-3ef8-4a81-a177-78997422df3a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "203ee10a-befb-40aa-866a-85248e45c579",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 533,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "34976cd7-53e7-485d-8a53-1fcb57b8517b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: \"\",\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  rentalResale: \"\",\n  currentAddress: \"\",\n  currentlyRented: \"\",\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2d58666-6427-4837-8d52-8545bc01b15e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ae0bd03a-bfa3-4ff8-8698-8fc144ee670e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34976cd7-53e7-485d-8a53-1fcb57b8517b",
              "c2d58666-6427-4837-8d52-8545bc01b15e",
              "ae0bd03a-bfa3-4ff8-8698-8fc144ee670e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 722,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "15d9a443-a6cb-42bf-ae54-78967f32a9fc",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 357,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ba48e037-c03b-4d8d-b306-5332dffa9b59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2fe2d84-6065-4496-a7e3-e10cef4accfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba48e037-c03b-4d8d-b306-5332dffa9b59",
              "c2fe2d84-6065-4496-a7e3-e10cef4accfb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "84d2610e-e097-4aa2-9dcd-762120811d17",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
        "file": "\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 574,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "28e05cc8-6b95-4642-aa72-06ad825cc5a7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 182,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2ec917d9-04f5-4cb8-9001-3722290a0a62",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "84a05492-40a4-4a0a-bd37-4985c0ff4e3c",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(customers.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bd837bd3-fd8e-471b-aef0-b72c8f114bf2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd837bd3-fd8e-471b-aef0-b72c8f114bf2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f271f689-59cb-4e11-a058-328924137051",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 459,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newCustomer)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(newCustomer.name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6bf2d1c3-0b02-4016-9df1-ed6c50c0ac8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(badCustomer)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "15a5e1b9-8d90-4a93-ae96-dc8ff7d15346",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6bf2d1c3-0b02-4016-9df1-ed6c50c0ac8c",
              "15a5e1b9-8d90-4a93-ae96-dc8ff7d15346"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 642,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8f65b80b-1e0a-414b-a924-dd0c87bc180d",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "51b450c4-2e9c-452e-b717-80c763f33558",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "35da64e7-88b7-46eb-b702-5c5537b766f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51b450c4-2e9c-452e-b717-80c763f33558",
              "35da64e7-88b7-46eb-b702-5c5537b766f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 261,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c39dfff6-3995-4ef1-ba45-d8cf1b3b61f8",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"Jacob Belmont\",\n    address1: \"1234 Loopy St\",\n    address2: \"\",\n    city: \"Hanford\",\n    zipcode: \"93230\",\n    state: \"CA\",\n    phone: \"559-444-4444\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"another@fake.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: false,\n    flagReason: \"\",\n    lastViewed: null\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Jacob Belmont\");\n    expect(res.body.isFlagged).toBe(false);\n    expect(res.body.flagReason).toBe(\"\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[1]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        expect(customer.name).toBe(\"Jacob Belmont\");\n        expect(customer.isFlagged).toBe(false);\n        expect(customer.flagReason).toBe(\"\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dae28a5a-f170-4ebf-8e6c-1c1f2180f1ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[2]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    zipcode: \"\",\n    state: \"\",\n    phone: \"\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"failemail.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: \"messedup\",\n    flagReason: \"Do not rent, patient hasn't paid bill.\",\n    lastViewed: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c8dcf13a-a375-49dc-9895-47f5b3f0bcd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({})\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4578d803-f1fa-4492-b761-47e0753ab8c1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dae28a5a-f170-4ebf-8e6c-1c1f2180f1ea",
              "c8dcf13a-a375-49dc-9895-47f5b3f0bcd3",
              "4578d803-f1fa-4492-b761-47e0753ab8c1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a297ab45-b673-4f8f-9fb3-7f53b3080c6e",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7877e3ba-2b0e-43a1-89dc-4e8932268f50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "da7711e0-d6e2-4b98-a05b-90c217e844b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7877e3ba-2b0e-43a1-89dc-4e8932268f50",
              "da7711e0-d6e2-4b98-a05b-90c217e844b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "246b5398-2d13-45b2-bd06-c9f36a9ab1ae",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
        "file": "\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 562,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "23059d17-d7ff-4b2d-996e-698b7bfb5264",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "83160502-3c13-42d4-98e7-0c44a837b32d",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 464,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    // Check to see if body contains users information. If so,\n    // then the user's information was passed back meaning it succeeded.\n    expect(res.body.username).toBe(newUser.username);\n    expect(res.body.password).not.toBe(newUser.password);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9c45555c-d7f2-4e11-a602-8504f8a1697a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Set invalid properties to newUser.\nnewUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Must enter a valid email.\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f6ec5288-cbb1-4325-a206-4d26eeb6e301",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"jboy@test.com\";\nnewUser.phone = \"5559992222\";\nnewUser.username = users[0].username;\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.username).toBe(\"Username already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ email: newUser.email })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "865c1c3d-4551-4edc-91ff-4b0235a99149",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = users[0].email;\nnewUser.phone = \"5559992222\";\nnewUser.username = \"jboy\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Email already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // If no errors during registration, check to see if newUser was\n    // stored in the database properly.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "aba4ddb3-9abe-4d47-8075-8ad8ea181832",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c45555c-d7f2-4e11-a602-8504f8a1697a",
              "f6ec5288-cbb1-4325-a206-4d26eeb6e301",
              "865c1c3d-4551-4edc-91ff-4b0235a99149",
              "aba4ddb3-9abe-4d47-8075-8ad8ea181832"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1004,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1aaf91d3-f925-44ec-ab20-c104b5adb4bc",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"thePassword\"\n  })\n  .expect(200)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBe(true);\n    expect(res.body.token).toBeTruthy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c88ed6d7-3a62-4413-b4f1-71c5b71799a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"wrongusername\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "53b8d1dd-a946-4091-bc11-71a39a1c7f68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"theWrongPassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "27af9db9-8927-422c-b346-78b971ccda87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpsr\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n    expect(res.body.login).toBe(\"Your account is not validated yet\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b853565f-d3a9-49ae-8641-08e043122e6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c88ed6d7-3a62-4413-b4f1-71c5b71799a6",
              "53b8d1dd-a946-4091-bc11-71a39a1c7f68",
              "27af9db9-8927-422c-b346-78b971ccda87",
              "b853565f-d3a9-49ae-8641-08e043122e6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 658,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "da8d55a6-eab3-4639-8522-904db6bb6efa",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cfb9fce6-8a24-48e6-9d00-dd8dd7398714",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.username).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5e770ecf-3710-43c4-9879-4dc13a26ecec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cfb9fce6-8a24-48e6-9d00-dd8dd7398714",
              "5e770ecf-3710-43c4-9879-4dc13a26ecec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 98,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e5242de2-79e8-4f96-ae17-9ea97c27b4b5",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"somename\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.firstName).toBe(\"somename\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8cd548b4-deb3-4220-be8f-3a5c0f4bea6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.firstName).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9afc5428-9178-4a60-9d47-485a934dc522",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"bademail\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: \"badvalidatedvalue\"\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "757e2dd7-9d3d-4589-8b2c-10e14a1fd4ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8cd548b4-deb3-4220-be8f-3a5c0f4bea6a",
              "9afc5428-9178-4a60-9d47-485a934dc522",
              "757e2dd7-9d3d-4589-8b2c-10e14a1fd4ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "01ea260c-8014-4346-9a20-a4f1030b240a",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
        "file": "\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 564,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f0f5ece7-8f9b-4efa-b1c1-0693dc766bdf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "CalendarEvent.deleteMany({})\n  .then(() => {\n    var eventOne = new CalendarEvent(events[0]).save();\n    var eventTwo = new CalendarEvent(events[1]).save();\n    var eventThree = new CalendarEvent(events[2]).save();\n    return Promise.all([eventOne, eventTwo, eventThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "10769ee1-bb9d-4d7d-8afe-9cb31a2d2e84",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "17f2ad79-5097-451f-ae23-3ee2df4dc932",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(events.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1185018b-6da1-4584-a7d3-765301c5ee70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1185018b-6da1-4584-a7d3-765301c5ee70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "95eaedae-3874-44c5-bbe5-bbf69b9c0bad",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(newEvent)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(newEvent.title);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: newEvent.title })\n      .then(event => {\n        expect(event).toBeTruthy();\n        expect(event.title).toBe(newEvent.title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6417734e-f7d2-4526-a024-6bd565352284",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(badEvent)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: badEvent.title })\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e2e9263a-3bcb-42a2-bb13-84400da961a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6417734e-f7d2-4526-a024-6bd565352284",
              "e2e9263a-3bcb-42a2-bb13-84400da961a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cd784799-5019-45e1-b339-5a8e22e51d9e",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e25db31e-ff5f-4f49-bb7d-9559d99dd747",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1729be9d-242d-4fbe-90a9-c135a8180676",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e25db31e-ff5f-4f49-bb7d-9559d99dd747",
              "1729be9d-242d-4fbe-90a9-c135a8180676"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 356,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4e1ac893-b766-4bb5-aaee-15db4556127b",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"New title\",\n    color: events[0].color,\n    start: events[0].start,\n    end: events[0].end,\n    order: events[0].order\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(\"New title\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(\"New title\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f232ddd1-3bac-4c81-a52b-309c91cfc504",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"\",\n    color: \"\",\n    start: \"\",\n    end: \"\",\n    order: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(events[0].title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b088ee34-129a-4f0b-a968-f22e39847e98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(events[0])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c5c35cea-f237-45c4-8438-fa9210f96f33",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f232ddd1-3bac-4c81-a52b-309c91cfc504",
              "b088ee34-129a-4f0b-a968-f22e39847e98",
              "c5c35cea-f237-45c4-8438-fa9210f96f33"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 541,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f30c330b-9f27-45a2-8333-d157900d62e3",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[1]._id.toHexString())\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8d9929ca-acd9-4f25-ab00-5fc9325e22ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f2ab23d2-da84-4dec-a760-0f811d593b3f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d9929ca-acd9-4f25-ab00-5fc9325e22ff",
              "f2ab23d2-da84-4dec-a760-0f811d593b3f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 351,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "fc83cbaa-0dec-492d-855a-0fcb79577ee9",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
        "file": "\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 572,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "64770e05-5b9e-4c4e-b6c9-15c2f55bada3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 182,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ef451b34-c45f-4c34-ac10-87c5e466fb9d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5cf19519-32c8-4ced-90de-c43ea207218f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "361a0684-e4c2-454f-ba99-c81a5de35ec0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4030b8ba-74a9-40a1-b7bf-acc92e289bc9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b930ded4-17bb-4e44-8904-055880db54a7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "881275df-6f21-4cf4-a96d-e3c5aa0a7925",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "83ee8eea-6496-45ce-8cc1-3be6f5ba9ccd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "50d09a39-cc99-4ad1-878b-7902f33ad227",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Order.deleteMany({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c2964030-92e8-41c4-aea6-ffb55f1cff7e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "80728cb7-b3bb-4301-a0b0-cbfca9998c36",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(orders.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "13cd9563-f939-4c8b-a531-6d0410d40d40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "61e831f8-bcc4-464c-abad-0bba99aba8dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13cd9563-f939-4c8b-a531-6d0410d40d40",
              "61e831f8-bcc4-464c-abad-0bba99aba8dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4c67fdbb-a396-4c04-9ad2-622af9967361",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ebcbbf63-7875-4db9-8f8b-52afe4a04a24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5cbbfbae-91da-4323-aa72-2cffe2f889dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9442907a-f2b6-488c-9934-5e780dbcf476",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ebcbbf63-7875-4db9-8f8b-52afe4a04a24",
              "5cbbfbae-91da-4323-aa72-2cffe2f889dc",
              "9442907a-f2b6-488c-9934-5e780dbcf476"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 448,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "beee49c5-b481-44ee-93b4-99d147fe9fd4",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "75272349-5e30-4709-82b6-e5221dd3eb42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "144a19d7-287e-43ed-806b-de0def2f5e85",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "28ac082f-9ff4-41fa-a259-107e186b868a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "75272349-5e30-4709-82b6-e5221dd3eb42",
              "144a19d7-287e-43ed-806b-de0def2f5e85",
              "28ac082f-9ff4-41fa-a259-107e186b868a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "427b6c0b-1aaf-4cd6-910b-3504449713cf",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 990,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4859027b-7b88-4564-a185-823b01170d5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "58ad3575-0110-43e8-bcdd-6b705317c5aa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4859027b-7b88-4564-a185-823b01170d5a",
              "58ad3575-0110-43e8-bcdd-6b705317c5aa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 994,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d1863a13-11e3-4d96-a9da-5e853defe387",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 372,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3aabf189-bb10-4f74-a34f-984a349839e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b4534b23-a67e-42e2-81ed-988e56ec943b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a23c32d1-c1f1-43f8-9153-63543ca9bde3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3aabf189-bb10-4f74-a34f-984a349839e7",
              "b4534b23-a67e-42e2-81ed-988e56ec943b",
              "a23c32d1-c1f1-43f8-9153-63543ca9bde3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 468,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "87316fb7-087f-42de-943c-cf9f8a1d40aa",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e01c1488-ccde-45ef-8b2f-809be19e4836",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bfbef092-2e12-4c4c-933d-99d7b49ee21d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "aa35eaa0-6453-499c-8147-627f58cc4322",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e01c1488-ccde-45ef-8b2f-809be19e4836",
              "bfbef092-2e12-4c4c-933d-99d7b49ee21d",
              "aa35eaa0-6453-499c-8147-627f58cc4322"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 281,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "e889f3ef-44a9-4588-a89f-c782be5ef417",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fdae67c4-d950-4378-89f9-e432d25a964f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ProductType.deleteMany({})\n  .then(() => {\n    var modification = new ProductType(productTypes[0]).save();\n    var container = new ProductType(productTypes[1]).save();\n    var rentalModification = new ProductType(productTypes[2]).save();\n    var delivery = new ProductType(productTypes[3]).save();\n    var pickup = new ProductType(productTypes[4]).save();\n    return Promise.all([\n      modification,\n      container,\n      rentalModification,\n      delivery,\n      pickup\n    ]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "18acf087-3d6d-4774-8a2e-f6eb41ad4390",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "399a7cde-2c3e-47cd-87c7-8e7f03139ddc",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    // check to see if product types array exists.\n    expect(res.body.length).toBe(5);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "96d3b24b-7632-4627-b399-5aea14ac3c5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96d3b24b-7632-4627-b399-5aea14ac3c5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "899a486d-64c0-46a7-90d4-c3eade054569",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProductType)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(newProductType.type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result.type).toBe(newProductType.type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a579a098-3d6b-47f8-b5f7-7505b57a3a9c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3de2440d-2761-4a80-a94b-ddd8e7ab1262",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a579a098-3d6b-47f8-b5f7-7505b57a3a9c",
              "3de2440d-2761-4a80-a94b-ddd8e7ab1262"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 541,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cae1a58b-bb52-4b83-83fa-115f4264c06e",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d32416cb-a8c4-4fd6-a8d6-51ad865286b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "512badad-70c3-4345-a7d9-a5319cd6a77b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d32416cb-a8c4-4fd6-a8d6-51ad865286b3",
              "512badad-70c3-4345-a7d9-a5319cd6a77b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 268,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8ad2a53e-5677-4776-a3e2-7aff28d22902",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"new modification\"\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"new modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "06d7a023-3b45-4369-9650-e4cf059f5710",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "02f87838-a6fc-4160-b028-91e3bd7182be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"container\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"That type is already being used\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2553b41b-b611-435b-9e5e-5d5750290701",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"some new mod\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"No product found with that ID in the URL\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6adba70f-4f68-4e5d-8029-a1ea84d7e62a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06d7a023-3b45-4369-9650-e4cf059f5710",
              "02f87838-a6fc-4160-b028-91e3bd7182be",
              "2553b41b-b611-435b-9e5e-5d5750290701",
              "6adba70f-4f68-4e5d-8029-a1ea84d7e62a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 617,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2b912ac0-f19a-419a-b12e-3bd7848a74c2",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(productTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ProductType.findById(productTypes[0]._id.toHexString())\n      .then(type => {\n        expect(type).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b2cc4b52-08d2-46d5-a061-540e98022bf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0f531a07-cc93-49cc-8237-1c22542c5e71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(404)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"Unable to find and remove the product type\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e1c3f6a7-daf2-451c-a4b9-a14afdf8d34c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b2cc4b52-08d2-46d5-a061-540e98022bf0",
              "0f531a07-cc93-49cc-8237-1c22542c5e71",
              "e1c3f6a7-daf2-451c-a4b9-a14afdf8d34c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 532,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9a9dfdce-e178-46d7-bffd-a52c70c3a7ae",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9f03462f-9482-406d-a435-6f4455e1fd86",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "61a1edbf-9858-4c37-a5a8-12723d356ec0",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "46ea850e-cfcd-4da4-97d5-2548d01f1461",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "46ea850e-cfcd-4da4-97d5-2548d01f1461"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 265,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "eb56c828-5cbf-4921-99d3-50d5d8400f98",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(newProduct.name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "068c7ec5-f724-4701-9e3b-b81a3bfae3c8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct.name = \"\";\nnewProduct.shortName = \"\";\nnewProduct.rental = \"\";\nnewProduct.type = \"\";\nrequest(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8fc21196-dbec-40e4-8747-c1d04b47fa05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "068c7ec5-f724-4701-9e3b-b81a3bfae3c8",
              "8fc21196-dbec-40e4-8747-c1d04b47fa05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1eefebe8-41d6-4333-99d8-e472241ac8be",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "89963b41-cf6f-4037-bc82-88369be32ca4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4d3c40fa-f458-411f-a163-ffb685b45fcc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "89963b41-cf6f-4037-bc82-88369be32ca4",
              "4d3c40fa-f458-411f-a163-ffb685b45fcc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 353,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0d5e5037-3b00-4ea8-8665-af93a3550bfb",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"40' Pickup\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff00d7a8-7229-4336-99ac-4b4e44f9e428",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"No product found.\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4395e535-fffd-44c2-8608-86ebc9481969",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"\",\n  shortName: \"\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: \"\",\n  type: \"\"\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "25aa0386-cbc2-4773-9e39-d83e51ed01e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff00d7a8-7229-4336-99ac-4b4e44f9e428",
              "4395e535-fffd-44c2-8608-86ebc9481969",
              "25aa0386-cbc2-4773-9e39-d83e51ed01e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9652c38c-6725-4607-99bc-c08743033b3d",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Product.findById(products[0]._id.toHexString())\n      .then(product => {\n        expect(product).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "667b1128-17c2-4538-ab14-372c444a4418",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a1b98ced-4443-4769-84a0-4b69e4a23512",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "667b1128-17c2-4538-ab14-372c444a4418",
              "a1b98ced-4443-4769-84a0-4b69e4a23512"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "4be5b4c8-8d4f-4bfd-816e-e6ad22802376",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
        "file": "\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4f2642d6-e39d-456e-8484-bad9c9e68455",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a5174a2d-a81a-496a-81a1-c1a627d71245",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 169,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0e2e90f8-12a5-44d3-8b46-d46ba4b52cc0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "87f9ca24-fabd-4b41-a792-50182e6b8399",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c44425c1-efb5-4f06-9b2d-de38af2b3de0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "de40467e-81e6-4128-a92e-de840e53a8ea",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Quote.deleteMany({})\n  .then(() => {\n    var quoteOne = new Quote(quotes[0]).save();\n    return Promise.all([quoteOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f8f9ea8b-e365-47f1-ad40-27e5d00b8676",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "db29446d-9c7e-4a77-8b3e-c52a5d197004",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b032b84b-6624-49be-afe4-0d47f446723d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2118bbce-fbb1-4ef2-bfc7-541ad803ea51",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b032b84b-6624-49be-afe4-0d47f446723d",
              "2118bbce-fbb1-4ef2-bfc7-541ad803ea51"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c5e5ddc5-7155-4538-a84c-24648f9f6d49",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer).toBe(newQuote.customer);\n    expect(res.body.attention).toBe(newQuote.attention);\n    expect(res.body.isHidden).toBe(false);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e259c37c-853e-4ccd-9f34-3de241dd26c1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e09c74f6-17f1-4727-941d-0715a4a17e82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newQuote.purchaseType = \"not a number\";\nrequest(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"Purchase type selected does not exist\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3a1ea6cb-52cd-44d9-ba55-d10f588b5023",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e259c37c-853e-4ccd-9f34-3de241dd26c1",
              "e09c74f6-17f1-4727-941d-0715a4a17e82",
              "3a1ea6cb-52cd-44d9-ba55-d10f588b5023"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 803,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "25f95e6a-a66e-4e53-8f1c-04d520c85f31",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "16ff2c0e-bc2f-4107-86e6-83344dc76c0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d8ee4336-9340-456e-b7cf-8a7a011d5d73",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this customer\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f4bad5f3-cf28-401e-a190-8d46f7f129cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16ff2c0e-bc2f-4107-86e6-83344dc76c0f",
              "d8ee4336-9340-456e-b7cf-8a7a011d5d73",
              "f4bad5f3-cf28-401e-a190-8d46f7f129cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1f618a16-29ae-4c97-8eda-0e3d8edfcf4c",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "76252efd-f4fe-44e4-9358-4f1811fd1569",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fe60f009-1e93-4a4b-b5c8-6abcd93c47db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this user\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "14251b59-69ca-46e3-840b-a5d2dc5eeec2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76252efd-f4fe-44e4-9358-4f1811fd1569",
              "fe60f009-1e93-4a4b-b5c8-6abcd93c47db",
              "14251b59-69ca-46e3-840b-a5d2dc5eeec2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 369,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f5fb092c-1503-470b-afec-334461e97aa5",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "69684c89-4d8f-4312-b7f2-2c9f18d64737",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cb88aa12-9e63-4124-a8e3-d01d4c51bcf4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "78fcb647-07f0-403f-940f-bb8ff64ec666",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69684c89-4d8f-4312-b7f2-2c9f18d64737",
              "cb88aa12-9e63-4124-a8e3-d01d4c51bcf4",
              "78fcb647-07f0-403f-940f-bb8ff64ec666"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "082ac70e-5890-46a7-b8e5-af19e8d177be",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 619,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(updateQuote._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2d08748e-08c3-4991-ab3c-b7f10248b4a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "530d26b4-754e-4e41-8493-4994cc1a2419",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}sss`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"No quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d38a13c7-ff92-4133-8e22-05ec0c219843",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "updateQuote.purchasePrices = \"sd235523\";\nrequest(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchasePrices).toBe(\n      \"There is an issue with the quote's purchase prices\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "614850f1-fd54-4dc7-9480-95940565106a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d08748e-08c3-4991-ab3c-b7f10248b4a0",
              "530d26b4-754e-4e41-8493-4994cc1a2419",
              "d38a13c7-ff92-4133-8e22-05ec0c219843",
              "614850f1-fd54-4dc7-9480-95940565106a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 988,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "be073c12-ef70-4d0b-86c2-3a3aeb0942a3",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a1fb622d-f65b-43f7-9d20-374d7838f0f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "853ae288-0d34-4781-b477-5e01c476d94d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ba635c97-c976-46d7-b2c4-1bf5975acd13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1fb622d-f65b-43f7-9d20-374d7838f0f7",
              "853ae288-0d34-4781-b477-5e01c476d94d",
              "ba635c97-c976-46d7-b2c4-1bf5975acd13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 381,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9376f6d9-513a-4ea5-8661-e13fe30aaee6",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
        "file": "\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 565,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "7b4297c3-d1de-40dd-adc4-64af57d65720",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "88bbe9d8-ed7f-4979-9377-3a903194386b",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
            "file": "\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 176,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "30ad15f8-c998-4dca-9ba8-6502ce9e95bc",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ec6f2300-7068-428c-8052-d38d225599c9",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 176,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9885ac79-5ea6-4ae9-9ab4-a8b99b34e765",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9885ac79-5ea6-4ae9-9ab4-a8b99b34e765"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 176,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "96407e53-e711-4f6c-b47f-50660e1ca870",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 260,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findOne({ type: \"Resale\" })\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d233a7f8-cebb-4d56-b966-45846dfc6ae2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be9d2799-4c65-4baf-94b6-3de62aa3e326",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d233a7f8-cebb-4d56-b966-45846dfc6ae2",
                  "be9d2799-4c65-4baf-94b6-3de62aa3e326"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 353,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "49792283-8613-4485-85ea-830292fce845",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3483ff5c-228f-40e9-82d2-0c408925915a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"There was no purchase type found\"\n    );\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bf0516a4-6c98-4250-b228-8e3adbd605b4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3483ff5c-228f-40e9-82d2-0c408925915a",
                  "bf0516a4-6c98-4250-b228-8e3adbd605b4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 268,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "36da34a4-ca0b-45e6-b40c-55fe67fbfa6a",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 271,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65adabb4-ac51-4daa-aaeb-dfa864f80d5a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 177,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a63c6d0b-8009-4b4b-9937-0f0275d366a9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 175,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "395e6b2c-dadc-42d1-b0e3-94197e2ed45d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "65adabb4-ac51-4daa-aaeb-dfa864f80d5a",
                  "a63c6d0b-8009-4b4b-9937-0f0275d366a9",
                  "395e6b2c-dadc-42d1-b0e3-94197e2ed45d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 623,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "7c79d8d9-f302-46ef-b6bd-f6d3dd528dd6",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 266,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0747e99f-0248-4839-a6d7-9152dd74fb3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(purchaseTypes[0].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20c6798a-7dff-4e09-914b-d283684af999",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0747e99f-0248-4839-a6d7-9152dd74fb3a",
                  "20c6798a-7dff-4e09-914b-d283684af999"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 444,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "0fb685e7-89e6-4b1c-8310-0076f1419148",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
        "file": "\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 565,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0e558f6a-7920-41b5-a885-113d2b3a8182",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Todo.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var todoOne = new Todo(todos[0]).save();\n    var todoTwo = new Todo(todos[1]).save();\n    var todoThree = new Todo(todos[2]).save();\n    return Promise.all([todoOne, todoTwo, todoThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "21b872fc-35e6-473d-9677-7424dac17e27",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6924c4f1-7e7e-4403-a553-79955d2755b9",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "91c8d220-23bb-4747-9e96-2ba6185ad390",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "37866644-9610-418d-8b30-039f20ab6098",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91c8d220-23bb-4747-9e96-2ba6185ad390",
              "37866644-9610-418d-8b30-039f20ab6098"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 184,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "990f3c89-3662-4287-9a09-1d00d1b8089f",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"The newest todo\");\n    expect(res.body.creator).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "16d227f6-c037-45e3-875c-3cbe352c3695",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "27bad2d9-ef77-41c9-930f-cce0fdb22d3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9aac1dcd-ec9d-447b-84f5-287a78a95b74",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "16d227f6-c037-45e3-875c-3cbe352c3695",
              "27bad2d9-ef77-41c9-930f-cce0fdb22d3b",
              "9aac1dcd-ec9d-447b-84f5-287a78a95b74"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0df77fdf-7dee-4bbb-a145-7c1abba3ebbd",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n    expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2109f02-9a33-4913-b20b-f6c78f6663f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b13a4707-fd35-4c93-8b1b-d03718190211",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c2109f02-9a33-4913-b20b-f6c78f6663f8",
              "b13a4707-fd35-4c93-8b1b-d03718190211"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 539,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "06c80f51-f754-4829-99ed-ae9b25095ada",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"a new description\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3e8f06d2-c6c2-4543-8cb5-355dcdfca614",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "18e48f47-e2fe-46bc-8e1d-4d62649cb929",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e4bf26ca-0a92-4fea-b8ef-bd800aae563a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e8f06d2-c6c2-4543-8cb5-355dcdfca614",
              "18e48f47-e2fe-46bc-8e1d-4d62649cb929",
              "e4bf26ca-0a92-4fea-b8ef-bd800aae563a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 453,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "79acdd58-2d0a-45a6-b987-983399162c53",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5ff3e957-8566-435c-a7ef-f31cbab6ce4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "13a67b70-1808-4c19-997c-63077f8deb02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5ff3e957-8566-435c-a7ef-f31cbab6ce4a",
              "13a67b70-1808-4c19-997c-63077f8deb02"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 352,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "2060c51f-7bf9-4399-ae34-518087073a7b",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
        "file": "\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 568,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "cb8afe93-33ac-4984-9ddf-47921b20bc8a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cb42caa0-7a4b-4736-9ed0-27c8e56a1e26",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(users.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "baa33b95-313b-49a9-bd2a-67f1912b6b41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "baa33b95-313b-49a9-bd2a-67f1912b6b41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6855cfc0-15e7-4acc-bfa6-1a17f93f2739",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(newUser.username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.firstName).toBe(newUser.firstName);\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c9574159-c418-4356-9f0e-d8f0fe336554",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nnewUser.validated = \"hello\";\nrequest(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6f40d720-1e36-4697-ab56-421407518526",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9574159-c418-4356-9f0e-d8f0fe336554",
              "6f40d720-1e36-4697-ab56-421407518526"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 811,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "18f7e6c9-7f8f-42f1-82c3-2a005c7f6022",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "29dfc10f-e227-497d-934c-b310b722b44e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "978cf25d-bd42-4f62-b29d-1a07aa78f4a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29dfc10f-e227-497d-934c-b310b722b44e",
              "978cf25d-bd42-4f62-b29d-1a07aa78f4a9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "54259bd0-0d34-4fda-bc5f-7a155b6129e4",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "users[1].validated = true;\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(users[1].username);\n    expect(res.body.validated).toBe(true);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "32be00f9-0067-4550-883c-7a2f54d771ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/users/${users[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Invalid ID\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d1070f54-695f-4158-a658-92f2b015c087",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"Brian\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Sr\",\n  username: \"blpsr\",\n  password: \"thePassword\",\n  email: \"gbr@test.com\",\n  phone: \"5559991224\",\n  title: \"Manager\",\n  type: \"Staff\",\n  validated: \"someWrongValidation\"\n};\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        expect(user.firstName).toBe(\"Brian\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "92ae3bdd-9570-4bb8-a6e8-5cb4c7af66b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32be00f9-0067-4550-883c-7a2f54d771ce",
              "d1070f54-695f-4158-a658-92f2b015c087",
              "92ae3bdd-9570-4bb8-a6e8-5cb4c7af66b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 540,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a8637350-d8e7-4597-bdbc-28b3a65ad09c",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id.toHexString())\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f0b43348-c113-4d5e-bf96-c13ee9906fea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[1].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.username).toBe(users[1].username);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "914ada8d-c47a-42de-beb0-26b6db1b08b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0b43348-c113-4d5e-bf96-c13ee9906fea",
              "914ada8d-c47a-42de-beb0-26b6db1b08b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}