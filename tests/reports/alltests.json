{
  "stats": {
    "suites": 74,
    "tests": 145,
    "passes": 143,
    "pending": 0,
    "failures": 2,
    "start": "2019-03-23T23:20:48.480Z",
    "end": "2019-03-23T23:23:13.115Z",
    "duration": 144635,
    "testsRegistered": 145,
    "passPercent": 98.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7c659851-10e1-41b0-8534-3e74822b42a9",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d775020a-ee00-4a53-b2b4-9eb5f069c7d7",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
        "file": "\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1882,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9f8b84f3-5d96-435d-ba46-5ee567569b45",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8e4bd8b3-9f17-49b5-8ad2-e3abe14bec6e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0177851f-4a19-46dd-b54d-68ee23c137c8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4122e0da-ba54-4743-8aa7-ad9c6defea17",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3edaf74c-ce8c-4f3e-a88e-0f91ed551006",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7abb42f3-8985-48af-ad0c-7cf75507d964",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7abb42f3-8985-48af-ad0c-7cf75507d964"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1ba351a7-e64e-4519-afb0-c70c094b2f94",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 371,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainerSize)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3bfe4dd4-bf0d-4bf2-8823-e1d15e0ac6c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) return done(err);\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "efcdd706-52ed-46d3-9925-85210aeb5ed7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3bfe4dd4-bf0d-4bf2-8823-e1d15e0ac6c3",
              "efcdd706-52ed-46d3-9925-85210aeb5ed7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 548,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9fb553f2-1fdd-4321-ab10-ac4f84902822",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "463c2c2e-1cbc-4b29-ac20-c4682160817b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "97c17cda-4553-4a74-860e-7683031c76f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "463c2c2e-1cbc-4b29-ac20-c4682160817b",
              "97c17cda-4553-4a74-860e-7683031c76f8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 272,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "27ebee1c-02f8-46da-a291-534a9711a884",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 367,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d0f12b07-b58e-47d4-9340-249242afd6f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ba8c43f3-7331-4cc5-9bff-87a3f03ba90f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c253a8b1-1831-4da8-b027-38b078764bc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "336d0470-1736-4423-871b-177f80a1025f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d0f12b07-b58e-47d4-9340-249242afd6f0",
              "ba8c43f3-7331-4cc5-9bff-87a3f03ba90f",
              "c253a8b1-1831-4da8-b027-38b078764bc1",
              "336d0470-1736-4423-871b-177f80a1025f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 817,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cd3dda4e-392d-448a-b282-4ca7a2456406",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c77aabce-bb2f-43db-9cfc-e0ebf5f9f4e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c6c31dc2-1154-4ad1-b25f-da39e213cc4a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c77aabce-bb2f-43db-9cfc-e0ebf5f9f4e0",
              "c6c31dc2-1154-4ad1-b25f-da39e213cc4a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 461,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a942ec44-5b27-4464-be3f-f073a7554031",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 370,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a4a278d1-2b9c-4b46-b3d1-54e5691bf269",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a4a278d1-2b9c-4b46-b3d1-54e5691bf269"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 370,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cf03b3dd-10f2-409c-b117-c2e3a45eb9c7",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 357,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3cbbae53-c3c7-4f93-bc14-3d8658a1e3d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cbd98c8b-2dd0-40a2-984a-67a665eee3eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3cbbae53-c3c7-4f93-bc14-3d8658a1e3d9",
              "cbd98c8b-2dd0-40a2-984a-67a665eee3eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7d044ea2-dfae-49e3-b583-614e7dc72b3f",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "36c8ba73-403f-4529-b253-84272aa9017c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1617c9be-055e-4a09-9396-3466fbafb9ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36c8ba73-403f-4529-b253-84272aa9017c",
              "1617c9be-055e-4a09-9396-3466fbafb9ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 353,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "82630938-70af-488b-a3d3-8ad14e961c78",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 526,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cdd8a521-17a7-4abf-a122-5dd1feb63b18",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: \"\",\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  rentalResale: \"\",\n  currentAddress: \"\",\n  currentlyRented: \"\",\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "42d4940c-9cbe-4693-ab2b-0e71db08fb8c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ea760e48-0eb0-44fc-8f4c-9ebc3b19a975",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cdd8a521-17a7-4abf-a122-5dd1feb63b18",
              "42d4940c-9cbe-4693-ab2b-0e71db08fb8c",
              "ea760e48-0eb0-44fc-8f4c-9ebc3b19a975"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 714,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "86a83f0c-2f71-43c2-9689-807699a598b6",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 358,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "20c22a53-44b7-4dec-968c-8c794dc1660a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9cd2502a-72e0-4428-aedb-56a4d4d78086",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "20c22a53-44b7-4dec-968c-8c794dc1660a",
              "9cd2502a-72e0-4428-aedb-56a4d4d78086"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 452,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "72a3b64a-5c44-4c3e-8821-148d0a990d75",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
        "file": "\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 577,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b493a303-c7e7-4e34-b9c3-4e392a5953fe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "96348684-f2b4-4f63-b2a6-ab293d1af5cd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e91c0829-e420-4f0e-bbe5-813769341166",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(customers.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9ba2c0c-cf6c-4426-9632-fa18614413e3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9ba2c0c-cf6c-4426-9632-fa18614413e3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "16572767-1785-490d-9690-8e9f17bfd9d8",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newCustomer)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(newCustomer.name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0d66fbf3-c8d7-4c00-ae6f-6ac2a4e1151d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(badCustomer)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e56d6193-68f4-4bbc-8e0a-39e7df65c097",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d66fbf3-c8d7-4c00-ae6f-6ac2a4e1151d",
              "e56d6193-68f4-4bbc-8e0a-39e7df65c097"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 642,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "96a36b05-8154-4075-9298-50b29ef379a6",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "93586c8a-7977-42ab-9834-5dd05713fc5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3d842834-be59-492d-8084-0a89dac624af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "93586c8a-7977-42ab-9834-5dd05713fc5c",
              "3d842834-be59-492d-8084-0a89dac624af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 273,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b77b11ec-17cb-4985-9f32-e958af810ef1",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"Jacob Belmont\",\n    address1: \"1234 Loopy St\",\n    address2: \"\",\n    city: \"Hanford\",\n    zipcode: \"93230\",\n    state: \"CA\",\n    phone: \"559-444-4444\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"another@fake.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: false,\n    flagReason: \"\",\n    lastViewed: null\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Jacob Belmont\");\n    expect(res.body.isFlagged).toBe(false);\n    expect(res.body.flagReason).toBe(\"\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[1]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        expect(customer.name).toBe(\"Jacob Belmont\");\n        expect(customer.isFlagged).toBe(false);\n        expect(customer.flagReason).toBe(\"\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "2d256f91-bc94-4965-91c4-e5655b99ed09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[2]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    zipcode: \"\",\n    state: \"\",\n    phone: \"\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"failemail.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: \"messedup\",\n    flagReason: \"Do not rent, patient hasn't paid bill.\",\n    lastViewed: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "01d92152-f295-4601-a1b3-8dd1f73e0de4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({})\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c7e36cc2-e86e-4c33-8140-a04fbb4d8d07",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d256f91-bc94-4965-91c4-e5655b99ed09",
              "01d92152-f295-4601-a1b3-8dd1f73e0de4",
              "c7e36cc2-e86e-4c33-8140-a04fbb4d8d07"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ebb8f945-9e06-4224-8705-053fc8fa9620",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3607422d-db1e-4c18-8f0d-9f208f8236b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d521ab05-3a76-455b-a0a7-e2c8bd51fbb4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3607422d-db1e-4c18-8f0d-9f208f8236b6",
              "d521ab05-3a76-455b-a0a7-e2c8bd51fbb4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "32b5dd45-e410-4351-a0a0-6ba5676ef844",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
        "file": "\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 580,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3cd6bdd4-09c2-45cd-ba5b-901971a747e9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5115dd69-921a-4138-8ee8-a162b94e2259",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    // Check to see if body contains users information. If so,\n    // then the user's information was passed back meaning it succeeded.\n    expect(res.body.username).toBe(newUser.username);\n    expect(res.body.password).not.toBe(newUser.password);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ad0d3ad8-ac46-47d0-933c-efdb4a112141",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Set invalid properties to newUser.\nnewUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Must enter a valid email.\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "09c757d8-6323-4987-8c5f-55f026f1f172",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"jboy@test.com\";\nnewUser.phone = \"5559992222\";\nnewUser.username = users[0].username;\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.username).toBe(\"Username already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ email: newUser.email })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "233abbcd-9e86-470b-944c-bbf06d685d3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = users[0].email;\nnewUser.phone = \"5559992222\";\nnewUser.username = \"jboy\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Email already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // If no errors during registration, check to see if newUser was\n    // stored in the database properly.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "05c5689d-cba0-494a-8da0-0724def62d3f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ad0d3ad8-ac46-47d0-933c-efdb4a112141",
              "09c757d8-6323-4987-8c5f-55f026f1f172",
              "233abbcd-9e86-470b-944c-bbf06d685d3b",
              "05c5689d-cba0-494a-8da0-0724def62d3f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 996,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "443256a9-158c-4889-a6c9-57ce17b309e6",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"thePassword\"\n  })\n  .expect(200)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBe(true);\n    expect(res.body.token).toBeTruthy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2be6883f-274e-419a-9577-a3aa25978c6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"wrongusername\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a2bb107a-58bc-4006-8a34-e875f09d0188",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"theWrongPassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a5c7c5-6eb6-434a-bc54-11d0f04967bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpsr\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n    expect(res.body.login).toBe(\"Your account is not validated yet\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7f311a68-113f-4b1e-b0c9-9ccd024bc847",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2be6883f-274e-419a-9577-a3aa25978c6c",
              "a2bb107a-58bc-4006-8a34-e875f09d0188",
              "c9a5c7c5-6eb6-434a-bc54-11d0f04967bc",
              "7f311a68-113f-4b1e-b0c9-9ccd024bc847"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 666,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4cd52f4f-0f64-4a38-a3c0-cd8abdf072b7",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d2035948-67b8-4d28-b426-4e14cd565d33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.username).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ba2842a0-b479-4507-9ca4-d740e2b753d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2035948-67b8-4d28-b426-4e14cd565d33",
              "ba2842a0-b479-4507-9ca4-d740e2b753d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 96,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "85bb98a9-6e30-4ca3-93dd-0e9c9cd6b701",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"somename\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.firstName).toBe(\"somename\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c802bd77-7492-4f9f-8e36-1419f1ad97b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.firstName).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cc3cdf3c-83a8-442b-8c60-f660d090ae58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"bademail\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: \"badvalidatedvalue\"\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ffd973fc-f3b5-4287-839d-c6ad6de1d5fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c802bd77-7492-4f9f-8e36-1419f1ad97b0",
              "cc3cdf3c-83a8-442b-8c60-f660d090ae58",
              "ffd973fc-f3b5-4287-839d-c6ad6de1d5fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b67e5318-e7d1-490a-90f2-3a167f7ee97b",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
        "file": "\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 584,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d3e66dd0-04bd-4912-b5dc-268fc7cf75d4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "CalendarEvent.deleteMany({})\n  .then(() => {\n    var eventOne = new CalendarEvent(events[0]).save();\n    var eventTwo = new CalendarEvent(events[1]).save();\n    var eventThree = new CalendarEvent(events[2]).save();\n    return Promise.all([eventOne, eventTwo, eventThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c54507c7-be01-434d-9a78-cf469b7d9da3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7573a9a0-6c4e-4b0d-8953-2db75830caea",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(events.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d7b9d616-0bf5-41ed-b12d-1ac6fdc88b6e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7b9d616-0bf5-41ed-b12d-1ac6fdc88b6e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 193,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "df649d31-9235-47f3-b758-480fb4f72957",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(newEvent)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(newEvent.title);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: newEvent.title })\n      .then(event => {\n        expect(event).toBeTruthy();\n        expect(event.title).toBe(newEvent.title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dd7008a4-1288-42d7-b373-1318b67f262a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(badEvent)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: badEvent.title })\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "58d0cedb-1106-44a5-931e-0baafa13b818",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd7008a4-1288-42d7-b373-1318b67f262a",
              "58d0cedb-1106-44a5-931e-0baafa13b818"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e5620849-360c-4d3d-ba60-5eb8efa83cdc",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "37bd4605-825e-4c51-84d1-f0dd5ae1b0d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ffab7737-5d29-4b54-aa82-4f86fa4a5095",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "37bd4605-825e-4c51-84d1-f0dd5ae1b0d3",
              "ffab7737-5d29-4b54-aa82-4f86fa4a5095"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2c11864c-7ace-438d-ba2e-12beb61f0194",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"New title\",\n    color: events[0].color,\n    start: events[0].start,\n    end: events[0].end,\n    order: events[0].order\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(\"New title\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(\"New title\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4c152ef6-736b-4016-a718-df6b22c78447",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"\",\n    color: \"\",\n    start: \"\",\n    end: \"\",\n    order: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(events[0].title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7a8823c5-e382-4d1d-a11b-421a8b3559da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(events[0])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5f1cde3d-94da-4e00-abe1-f91e63168799",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4c152ef6-736b-4016-a718-df6b22c78447",
              "7a8823c5-e382-4d1d-a11b-421a8b3559da",
              "5f1cde3d-94da-4e00-abe1-f91e63168799"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 536,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "11559d6d-aca8-4171-8e0a-557dc409292c",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[1]._id.toHexString())\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b66b1445-cf3b-409e-a231-51150dd9ed9e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "66292f37-5b5c-4224-8906-79b1fa51f4f9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b66b1445-cf3b-409e-a231-51150dd9ed9e",
              "66292f37-5b5c-4224-8906-79b1fa51f4f9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "77757c70-243d-4842-8451-da93fde0b584",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
        "file": "\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 573,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ce2328f0-56b1-42c7-8f9d-4404126ddaed",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f66775b6-768f-4bfb-b780-97f1a018fbdf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2013627b-4e17-422b-94ce-c12915d847de",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "773164c2-54fd-4065-88a9-4368a899bdaa",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "96a15b32-0503-48ab-b11e-61a740d063ec",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4d5bb299-65b4-44a0-96ac-018668f99b29",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "e080f778-1d44-4545-acb0-95f797685d2f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d263ebc8-4460-41d5-81ee-f1bff3bbacc1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3b3577ae-58c8-4dbf-b51a-cef06326f38e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Order.deleteMany({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f7b56ffc-7cde-4ca4-b881-ceca8f1472e2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1a70f528-b1c1-43c3-88af-c9dab291317c",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(orders.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "81e90578-6a6e-4c6e-ae2b-2b4045070a53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7feb6701-4b26-4b30-8bfa-f399afd2cfd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81e90578-6a6e-4c6e-ae2b-2b4045070a53",
              "7feb6701-4b26-4b30-8bfa-f399afd2cfd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "551a2ab5-c97e-490d-b343-50f3293880ce",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e92ce198-a7e5-420b-9150-7791b8a4512b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0d652188-900d-4cfe-b1a2-159ef78d1b81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b024c917-4a96-4a8e-b482-1c04f3d995d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e92ce198-a7e5-420b-9150-7791b8a4512b",
              "0d652188-900d-4cfe-b1a2-159ef78d1b81",
              "b024c917-4a96-4a8e-b482-1c04f3d995d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 453,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c4ed7ae8-fe6c-4b8e-bab6-a69a32365c4d",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 357,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1cba3591-a6c8-4cd3-b915-432547fc9f6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ca3ff125-d02f-4548-815e-510c093b7992",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8fc47179-a723-4b89-941a-de50e15cacb4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1cba3591-a6c8-4cd3-b915-432547fc9f6a",
              "ca3ff125-d02f-4548-815e-510c093b7992",
              "8fc47179-a723-4b89-941a-de50e15cacb4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 450,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "de2014f7-0b52-4858-a693-f609db271494",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 985,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "702127b4-bf6b-461b-8158-41df42d02ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "23ce1b56-08b6-4976-a1de-364d1cc67c21",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "702127b4-bf6b-461b-8158-41df42d02ab8",
              "23ce1b56-08b6-4976-a1de-364d1cc67c21"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 988,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "896ae7b1-69da-4168-bc5f-f4ce2304d963",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f2b95a6d-98e0-40f4-9295-0898b49b4055",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7b4514c9-6eb6-4b07-ba9b-41a2918dba6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7ca5dfc6-18a7-4aec-bfb1-25b55f068159",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f2b95a6d-98e0-40f4-9295-0898b49b4055",
              "7b4514c9-6eb6-4b07-ba9b-41a2918dba6a",
              "7ca5dfc6-18a7-4aec-bfb1-25b55f068159"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 456,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "aec29110-c742-40ce-b58f-246516957d3c",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "10f5a1df-2a78-4594-bde8-15e78821a75b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff73ae8f-4d47-4afe-b7f5-a6c5e8a09456",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "003d89e5-f7d1-4a9b-ac44-f116bbdef511",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10f5a1df-2a78-4594-bde8-15e78821a75b",
              "ff73ae8f-4d47-4afe-b7f5-a6c5e8a09456",
              "003d89e5-f7d1-4a9b-ac44-f116bbdef511"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 280,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "81f65d18-2441-44e7-b7cb-8f3d54ab08fd",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 566,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3efdc626-b592-4777-b7fc-38771893beb0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ProductType.deleteMany({})\n  .then(() => {\n    var modification = new ProductType(productTypes[0]).save();\n    var container = new ProductType(productTypes[1]).save();\n    var rentalModification = new ProductType(productTypes[2]).save();\n    var delivery = new ProductType(productTypes[3]).save();\n    var pickup = new ProductType(productTypes[4]).save();\n    return Promise.all([\n      modification,\n      container,\n      rentalModification,\n      delivery,\n      pickup\n    ]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5ede5d7c-2bc0-4f37-bc7b-bba6a59e9745",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f23e924f-0a12-4697-80c9-92bda8d5c193",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    // check to see if product types array exists.\n    expect(res.body.length).toBe(5);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bbd69aa2-fd6a-4b48-8eb1-ddf19c0ef335",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bbd69aa2-fd6a-4b48-8eb1-ddf19c0ef335"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "db7608f3-560b-40fb-baf7-f005b74e6a46",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 364,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProductType)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(newProductType.type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result.type).toBe(newProductType.type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f1568266-be0f-48e3-b396-6ecc90e3cb6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "68bee8fe-bc0c-42e6-a6fb-0b8a9053905c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f1568266-be0f-48e3-b396-6ecc90e3cb6c",
              "68bee8fe-bc0c-42e6-a6fb-0b8a9053905c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 539,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e6f6af03-b0c9-4dc8-b3d3-9aa3c9a76699",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7aea5cff-9bcc-4b27-a0a5-c6129595ad35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "45499bde-1029-4929-bf39-8489b648ebf6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7aea5cff-9bcc-4b27-a0a5-c6129595ad35",
              "45499bde-1029-4929-bf39-8489b648ebf6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "56f0bbef-1523-4844-800d-af9b41a8360b",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 453,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"new modification\"\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"new modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a0976a2b-0cc9-4494-8d7d-1cf07f42f11f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0c3cb819-7525-4e18-82ad-83d867c02455",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"container\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"That type is already being used\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8c3109f1-526b-461d-a3be-370a1916a9d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"some new mod\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"No product found with that ID in the URL\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9a4aa2af-826e-4ab8-a917-fe327224ec3d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a0976a2b-0cc9-4494-8d7d-1cf07f42f11f",
              "0c3cb819-7525-4e18-82ad-83d867c02455",
              "8c3109f1-526b-461d-a3be-370a1916a9d5",
              "9a4aa2af-826e-4ab8-a917-fe327224ec3d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 814,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "518c339d-7c33-4640-beb7-67e05c14691d",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(productTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ProductType.findById(productTypes[0]._id.toHexString())\n      .then(type => {\n        expect(type).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1c2680d7-3df3-4ed5-a482-1f771660cb23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7bbb2813-5034-4e8d-b308-a651d26bf3bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(404)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"Unable to find and remove the product type\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5efc8890-5e1e-4704-8779-9c67e9523cca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1c2680d7-3df3-4ed5-a482-1f771660cb23",
              "7bbb2813-5034-4e8d-b308-a651d26bf3bc",
              "5efc8890-5e1e-4704-8779-9c67e9523cca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 534,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "25637149-8647-46d5-9ba9-705f8101ce0b",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "965c9c18-6983-4185-8006-4483a28d4281",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "dda0b2d2-1708-430a-906d-58227a4281b6",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e863a3a0-79c9-4539-874c-4bc8f76d39ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e863a3a0-79c9-4539-874c-4bc8f76d39ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 267,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "82f07bf9-21af-48f4-af8c-ab7656bfc53e",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(newProduct.name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                  "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "eaf413b6-675f-4695-b254-d477e49c0b60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct.name = \"\";\nnewProduct.shortName = \"\";\nnewProduct.rental = \"\";\nnewProduct.type = \"\";\nrequest(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "daf1e305-9ba2-4d66-9841-3523bdf62e1a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "daf1e305-9ba2-4d66-9841-3523bdf62e1a"
            ],
            "failures": [
              "eaf413b6-675f-4695-b254-d477e49c0b60"
            ],
            "pending": [],
            "skipped": [],
            "duration": 268,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b57d6d00-1e87-484d-96c4-1047211968c7",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5247f0d9-4a67-40c3-9656-fc659c580961",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "869e4f19-42e6-4dde-b39c-6739a6444a89",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5247f0d9-4a67-40c3-9656-fc659c580961",
              "869e4f19-42e6-4dde-b39c-6739a6444a89"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 360,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6e69bc0e-67b8-449b-9691-66ef597032da",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 88,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"40' Pickup\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                  "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "a16fd39d-e58d-46bf-a0ba-28019625894d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"No product found.\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "577c92e3-49cd-48b8-b1ae-7dfdd99e87d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"\",\n  shortName: \"\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: \"\",\n  type: \"\"\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "269ca89c-7812-44cd-bad5-89a1fa7e5bf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "577c92e3-49cd-48b8-b1ae-7dfdd99e87d2",
              "269ca89c-7812-44cd-bad5-89a1fa7e5bf1"
            ],
            "failures": [
              "a16fd39d-e58d-46bf-a0ba-28019625894d"
            ],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "15e505b0-13a9-43e9-90ec-fd30a202a1c9",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Product.findById(products[0]._id.toHexString())\n      .then(product => {\n        expect(product).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "120eb2f1-1c4b-4ab9-ad99-01f8a8ab89e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d69cf866-caca-4011-be85-7a47403961b8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "120eb2f1-1c4b-4ab9-ad99-01f8a8ab89e9",
              "d69cf866-caca-4011-be85-7a47403961b8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 354,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c7a3be00-b2e7-43fc-896e-c094680e56a2",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
        "file": "\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 580,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d27dbc4a-c931-41fa-acde-3d2e5388dc8f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5c4a1018-a64f-4663-906b-f2a86f61642d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6f3e9d72-120f-4320-92c5-49e3753c9bb8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "689b0d23-db37-47b2-bf86-d87fbd2bedfe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4a66fc37-9bd5-4c5f-adc0-69c1bdfa3db5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0b8ab50b-3a38-4834-b820-8553644b6f77",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Quote.deleteMany({})\n  .then(() => {\n    var quoteOne = new Quote(quotes[0]).save();\n    return Promise.all([quoteOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8726da45-fe1c-47ba-b4f9-2feb8289b549",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5075feae-7fab-4497-b7cf-c33439afa598",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a4cef48c-6ef6-4422-8d31-967d8a304e4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7c907dc9-b5d6-400e-93c5-8649a5a5f822",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a4cef48c-6ef6-4422-8d31-967d8a304e4e",
              "7c907dc9-b5d6-400e-93c5-8649a5a5f822"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 276,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "50bc40ca-d0e8-488a-9119-410df0c615c9",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer).toBe(newQuote.customer);\n    expect(res.body.attention).toBe(newQuote.attention);\n    expect(res.body.isHidden).toBe(false);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "43ca5b36-d61e-49c8-b485-0e6c54b6fd88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3a00df59-e829-4fc7-af86-c67fbac12bba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newQuote.purchaseType = \"not a number\";\nrequest(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"Purchase type selected does not exist\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9d74b4ae-1563-4c62-948f-ac85c50e1010",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "43ca5b36-d61e-49c8-b485-0e6c54b6fd88",
              "3a00df59-e829-4fc7-af86-c67fbac12bba",
              "9d74b4ae-1563-4c62-948f-ac85c50e1010"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 807,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1517f13e-57d3-47a9-9ac8-883dd72822d5",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0ec1d6cc-75a0-4c19-8d59-cace9c388223",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7f81da69-d3c0-4d6a-b07f-67c9ab18e893",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this customer\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7788c5f3-6d26-4958-acd6-a272418737f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0ec1d6cc-75a0-4c19-8d59-cace9c388223",
              "7f81da69-d3c0-4d6a-b07f-67c9ab18e893",
              "7788c5f3-6d26-4958-acd6-a272418737f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 369,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4e04f2bd-10f6-4e8b-b6da-2c6c3e4103eb",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bbccda0a-07c5-4e98-8092-e5b1608c033b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e7c015ad-cce1-4fcf-b900-5bb150621644",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this user\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9140516c-847b-4cad-a689-23c97a637ae2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bbccda0a-07c5-4e98-8092-e5b1608c033b",
              "e7c015ad-cce1-4fcf-b900-5bb150621644",
              "9140516c-847b-4cad-a689-23c97a637ae2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d203313f-5262-43cc-8c8e-70ec8cb529a7",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bc9337d7-aa80-43e0-8897-1e4dbd0e2736",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "20e36b5a-b264-41d9-a4b2-100345e08dd8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abc624d0-8b36-40b3-8453-74e8ab590264",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc9337d7-aa80-43e0-8897-1e4dbd0e2736",
              "20e36b5a-b264-41d9-a4b2-100345e08dd8",
              "abc624d0-8b36-40b3-8453-74e8ab590264"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 364,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d4659f52-ea57-46ad-964c-f1c155742081",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 627,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(updateQuote._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3846fdef-0111-4e6a-a427-0d4c15fcfa77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e3f25b47-e152-461a-8700-22732019c2ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}sss`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"No quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "80078929-c970-414f-b425-b162100277a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "updateQuote.purchasePrices = \"sd235523\";\nrequest(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchasePrices).toBe(\n      \"There is an issue with the quote's purchase prices\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9515c3e-4abc-4912-b56d-5f9445fb4254",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3846fdef-0111-4e6a-a427-0d4c15fcfa77",
              "e3f25b47-e152-461a-8700-22732019c2ab",
              "80078929-c970-414f-b425-b162100277a3",
              "c9515c3e-4abc-4912-b56d-5f9445fb4254"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 994,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e570a478-fbfc-4dfa-a351-a5615509d1ce",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3d3c32f5-24b3-453a-afe5-8fadd3f2c0c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7e1ba2e6-64fc-4603-8bff-f9952791943e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e2bbeb85-7b39-4ee5-a0d5-d61279ed0f6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d3c32f5-24b3-453a-afe5-8fadd3f2c0c9",
              "7e1ba2e6-64fc-4603-8bff-f9952791943e",
              "e2bbeb85-7b39-4ee5-a0d5-d61279ed0f6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 368,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "2f46c718-5657-47fe-93bb-84f0aa3725fb",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
        "file": "\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 570,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "24e8b134-64e1-4a68-b3df-cb13d1a78045",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "064eafe9-3c8a-4989-8854-1e4bcc4478e9",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
            "file": "\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 174,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "922839f6-a371-4662-8278-8fd904a1b6f3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "5e5658e6-ba84-4ba7-810a-5845e325159f",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 183,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b146a01c-c5f4-4e23-bd7a-895d39927bac",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b146a01c-c5f4-4e23-bd7a-895d39927bac"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 183,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "b3441d84-0519-433b-9072-00995ecf9c80",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 267,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findOne({ type: \"Resale\" })\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "64fcc54b-8ba9-4c85-8414-4c1ced9432a7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "683347ba-91a9-4101-a85d-701c5e07a0bd",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "64fcc54b-8ba9-4c85-8414-4c1ced9432a7",
                  "683347ba-91a9-4101-a85d-701c5e07a0bd"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 358,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "d149a87f-dc00-47c1-9407-5f39f230db5b",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 182,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "43e85a5d-14cc-48a1-a2a7-c0e43b9174d8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 96,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"There was no purchase type found\"\n    );\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f345dce-90e3-4e35-b03d-ee29116e13e4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "43e85a5d-14cc-48a1-a2a7-c0e43b9174d8",
                  "9f345dce-90e3-4e35-b03d-ee29116e13e4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 278,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "b9d40e6e-3814-46d1-b4b2-05f082a6ca97",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 267,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ac299118-d643-47bb-9045-5ef14f97812e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 180,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8372da12-d8ac-4155-997d-628c4580f14e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "10a4a649-1ad1-4f68-a702-51fff5c7f600",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ac299118-d643-47bb-9045-5ef14f97812e",
                  "8372da12-d8ac-4155-997d-628c4580f14e",
                  "10a4a649-1ad1-4f68-a702-51fff5c7f600"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 625,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "37f7b2df-acdc-4096-b910-2cec9e3e5316",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 264,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ab31c0a-0914-4ef8-83aa-a8652e19ba46",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(purchaseTypes[0].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4e349e9-5914-4f2d-b7ee-ffa1b157f45a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0ab31c0a-0914-4ef8-83aa-a8652e19ba46",
                  "b4e349e9-5914-4f2d-b7ee-ffa1b157f45a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 442,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ffc1e703-fd32-4d8a-ae4b-9f428bc74090",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
        "file": "\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 605,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "26951169-5254-4dbe-8ecc-e6b4f5352fe0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 182,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Todo.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var todoOne = new Todo(todos[0]).save();\n    var todoTwo = new Todo(todos[1]).save();\n    var todoThree = new Todo(todos[2]).save();\n    return Promise.all([todoOne, todoTwo, todoThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6f3ddf25-04fa-439c-af62-4b8e40802591",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d2c3cf3-84de-4140-9e2c-348d0bcff7ee",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5beded8a-28df-49a1-bc7f-70c245d15a9a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0e4f9118-295a-4126-bd9c-cae2a25eb218",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5beded8a-28df-49a1-bc7f-70c245d15a9a",
              "0e4f9118-295a-4126-bd9c-cae2a25eb218"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 183,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3cc5b81c-c7b8-4185-a0c0-49d16afc15af",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"The newest todo\");\n    expect(res.body.creator).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "921cff11-3a2d-4107-b893-e1676ca74508",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0dc0c48f-f99c-4502-8b45-9f0a27ab4050",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bcd70c9d-870a-4c68-a4bd-704527c01195",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "921cff11-3a2d-4107-b893-e1676ca74508",
              "0dc0c48f-f99c-4502-8b45-9f0a27ab4050",
              "bcd70c9d-870a-4c68-a4bd-704527c01195"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 273,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "90f19a16-b401-4422-b1fd-0de769643f0b",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n    expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1d5f2201-cf36-4e6f-9c42-eb69717d3e93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8cb9bea0-26ca-44fa-b4b5-7dbbc0e74f22",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d5f2201-cf36-4e6f-9c42-eb69717d3e93",
              "8cb9bea0-26ca-44fa-b4b5-7dbbc0e74f22"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 533,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "35a5a94e-73f2-48e5-8466-f9fc90f27e23",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"a new description\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bfe5d528-018a-4b29-adb4-86a129a42496",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "83cb78b6-5f21-4e10-a881-aebfc5fbda3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4bab0fc4-3644-46ab-9cdd-9f75b7471253",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bfe5d528-018a-4b29-adb4-86a129a42496",
              "83cb78b6-5f21-4e10-a881-aebfc5fbda3e",
              "4bab0fc4-3644-46ab-9cdd-9f75b7471253"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3cfdfa86-eefc-44c9-8952-721dfbe85820",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "04ef5952-b99b-4d7e-9629-90a7da139680",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "95f7d258-53b9-4c7d-b207-bb2a2d52d8a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04ef5952-b99b-4d7e-9629-90a7da139680",
              "95f7d258-53b9-4c7d-b207-bb2a2d52d8a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "f6212e13-3085-4f0a-8562-80813fb13d41",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
        "file": "\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f5429ab2-5145-4974-afbc-91191b7cf85d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f8547157-b740-45ff-8b20-c59101231d83",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(users.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "106eb974-1962-4705-9b07-c4cd81f4ac8e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "106eb974-1962-4705-9b07-c4cd81f4ac8e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c95ca238-fe84-4ea1-b4a3-e2edf399890f",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 641,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(newUser.username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.firstName).toBe(newUser.firstName);\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a2cff9a3-12f4-45c3-9f2a-21cec76be5fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nnewUser.validated = \"hello\";\nrequest(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "19aa6754-e7c8-4546-a0b0-082399ff718a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a2cff9a3-12f4-45c3-9f2a-21cec76be5fe",
              "19aa6754-e7c8-4546-a0b0-082399ff718a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 819,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "015b4c89-9b6f-4eeb-91bd-6d6425d0a3fd",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d1f7d14f-9267-4675-8789-212ae00c261f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6f128990-8269-4532-8297-5700307fbfa7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d1f7d14f-9267-4675-8789-212ae00c261f",
              "6f128990-8269-4532-8297-5700307fbfa7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6da7685b-ba3d-42db-a046-cf190ad035df",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "users[1].validated = true;\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(users[1].username);\n    expect(res.body.validated).toBe(true);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7b7a51c5-3812-48db-a990-a60cb1d8e868",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/users/${users[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Invalid ID\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "38f0bdec-e143-4b63-9931-b38fc46e833f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"Brian\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Sr\",\n  username: \"blpsr\",\n  password: \"thePassword\",\n  email: \"gbr@test.com\",\n  phone: \"5559991224\",\n  title: \"Manager\",\n  type: \"Staff\",\n  validated: \"someWrongValidation\"\n};\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        expect(user.firstName).toBe(\"Brian\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7adf5581-43d3-4095-b0ec-e8d3e86756cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7b7a51c5-3812-48db-a990-a60cb1d8e868",
              "38f0bdec-e143-4b63-9931-b38fc46e833f",
              "7adf5581-43d3-4095-b0ec-e8d3e86756cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 537,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ba773a00-4e70-4cf0-af6b-ca4c90c9ae17",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id.toHexString())\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e58fbb8e-de01-47c9-a0a2-428d3a52b11f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[1].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.username).toBe(users[1].username);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b893336f-9925-4a39-8641-174b38aab018",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e58fbb8e-de01-47c9-a0a2-428d3a52b11f",
              "b893336f-9925-4a39-8641-174b38aab018"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}