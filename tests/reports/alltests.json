{
  "stats": {
    "suites": 74,
    "tests": 145,
    "passes": 145,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-24T00:03:46.117Z",
    "end": "2019-03-24T00:06:09.848Z",
    "duration": 143731,
    "testsRegistered": 145,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "17926c5c-2272-4291-9a4e-bb0a9493228d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "6ed84e7b-aa2b-4c28-80f5-4ae8cd421b4b",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
        "file": "\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1820,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ad419783-d243-4afc-b378-a330527d5d11",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6dbe32c0-b374-45df-ad1b-b6e072d254a7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "41deac0c-8449-449b-9f65-342d6c0e6d6d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d4597fff-f984-4e41-b563-d70d3ec513ee",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "86840fe1-a857-4522-901d-086d34387104",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d4b72d2b-1fe3-4ce4-a210-e63e5f9c85da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4b72d2b-1fe3-4ce4-a210-e63e5f9c85da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 206,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1edf1ad0-2074-4f66-ad9a-000df2c2f844",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 370,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainerSize)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "28343756-ffb5-4980-97c4-f1338fd69a86",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) return done(err);\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "74ae2b08-d64a-440c-b94f-71a7f42acdc4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "28343756-ffb5-4980-97c4-f1338fd69a86",
              "74ae2b08-d64a-440c-b94f-71a7f42acdc4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 549,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b086eab8-9a30-4b3b-ab8b-f6a9277202a9",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "137a512c-0f4b-467a-bf73-96c6a7483ca2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "34d4569d-1e82-4a60-ba83-08f7197df09e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "137a512c-0f4b-467a-bf73-96c6a7483ca2",
              "34d4569d-1e82-4a60-ba83-08f7197df09e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e143c178-0a07-43ba-a370-4bdde632b34d",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 363,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cd2024a4-44f9-4763-97c6-c8dcc9f74d1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d0920bc3-310f-4d7e-b5ea-501de80da2ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1db08e3e-b793-4287-b67c-acf093541f6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b5bb5654-12cd-49c9-b206-d061f308a537",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd2024a4-44f9-4763-97c6-c8dcc9f74d1b",
              "d0920bc3-310f-4d7e-b5ea-501de80da2ba",
              "1db08e3e-b793-4287-b67c-acf093541f6a",
              "b5bb5654-12cd-49c9-b206-d061f308a537"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 809,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4e80e052-0ea3-4597-9838-cab8c81b7eb4",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ea6ec4a7-617a-430f-9399-6da96b03096f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a00afdeb-8e04-41d8-a36f-d0ffc56ebe25",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ea6ec4a7-617a-430f-9399-6da96b03096f",
              "a00afdeb-8e04-41d8-a36f-d0ffc56ebe25"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 450,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c6ce9fdf-99a0-42e5-8f7c-1b0a56d6be50",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b7dbfda6-77f8-425f-9910-8786bba884ba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b7dbfda6-77f8-425f-9910-8786bba884ba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8583e9f0-707c-49fc-abf9-fad30511c51c",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "af5a35db-a0e6-4e62-a680-639db45aceb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e2df62c3-9fe4-4be7-b2dc-baf431388ed1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "af5a35db-a0e6-4e62-a680-639db45aceb1",
              "e2df62c3-9fe4-4be7-b2dc-baf431388ed1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "72e3b8b6-3a88-479e-ad57-273a3dfb7c5d",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bddfdb7f-3c23-4c69-b8ba-1742793d59fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9fd154c8-93fd-4c5b-89ef-775e66dadc2c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bddfdb7f-3c23-4c69-b8ba-1742793d59fd",
              "9fd154c8-93fd-4c5b-89ef-775e66dadc2c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "102a4c08-1da8-4ea4-87da-b7418ec8da49",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "32133398-ae8a-45d7-b8ad-4f9a970238d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: \"\",\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  rentalResale: \"\",\n  currentAddress: \"\",\n  currentlyRented: \"\",\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0968765b-4ead-4371-86c2-4270f49d1dcf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3e0fa27b-f760-46ed-9f48-fda877c68046",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "32133398-ae8a-45d7-b8ad-4f9a970238d4",
              "0968765b-4ead-4371-86c2-4270f49d1dcf",
              "3e0fa27b-f760-46ed-9f48-fda877c68046"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 721,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b045c993-a8d4-4ce7-96dc-7c1dea0d565c",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "57a75bbc-5cff-421f-8849-5e14e1ef3359",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "54f212bb-928e-448f-9365-5f65b5f11a03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57a75bbc-5cff-421f-8849-5e14e1ef3359",
              "54f212bb-928e-448f-9365-5f65b5f11a03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 452,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "bedaab44-6472-4263-a004-bece227cc9a4",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
        "file": "\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 576,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "83043f86-6bde-4fe0-b1d6-5d100366c3c9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 181,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "65da1335-3e49-4047-a19a-0804636165fa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6e43a149-4fd3-4959-a293-1941ded6ca51",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(customers.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e76b5bde-834d-482c-a5c1-079256f7d11f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e76b5bde-834d-482c-a5c1-079256f7d11f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 181,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9e70ffdc-ead1-4383-b30c-36f060f40e90",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 455,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newCustomer)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(newCustomer.name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "dc2e862a-1769-47fc-92d3-54b769d5bef3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(badCustomer)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5675b0bc-2ea6-4611-8831-a7a69ce00ff7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dc2e862a-1769-47fc-92d3-54b769d5bef3",
              "5675b0bc-2ea6-4611-8831-a7a69ce00ff7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 634,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "76086d96-5183-42bf-848b-2a43e7adb76a",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a62c1d36-41f5-473d-be0a-22a3afaca289",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "11ac76b0-b4f3-412a-b1bc-25ab11d08a6d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a62c1d36-41f5-473d-be0a-22a3afaca289",
              "11ac76b0-b4f3-412a-b1bc-25ab11d08a6d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 271,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6a9604eb-efae-4d4e-92a4-f071c188dd89",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"Jacob Belmont\",\n    address1: \"1234 Loopy St\",\n    address2: \"\",\n    city: \"Hanford\",\n    zipcode: \"93230\",\n    state: \"CA\",\n    phone: \"559-444-4444\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"another@fake.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: false,\n    flagReason: \"\",\n    lastViewed: null\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Jacob Belmont\");\n    expect(res.body.isFlagged).toBe(false);\n    expect(res.body.flagReason).toBe(\"\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[1]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        expect(customer.name).toBe(\"Jacob Belmont\");\n        expect(customer.isFlagged).toBe(false);\n        expect(customer.flagReason).toBe(\"\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "66e5d803-0252-4f6f-a1ea-59f26633d80b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[2]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    zipcode: \"\",\n    state: \"\",\n    phone: \"\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"failemail.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: \"messedup\",\n    flagReason: \"Do not rent, patient hasn't paid bill.\",\n    lastViewed: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4c940ca9-bbe0-4722-a939-deb9905942cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({})\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "32de41dc-b180-41d5-aad6-751df39a12fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66e5d803-0252-4f6f-a1ea-59f26633d80b",
              "4c940ca9-bbe0-4722-a939-deb9905942cb",
              "32de41dc-b180-41d5-aad6-751df39a12fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 452,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4f51386c-59f4-47ae-90d8-0d4500fd1e1c",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d1e79867-8cea-4e3b-b5ce-4479c1506249",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f814b7dc-7de4-415e-867a-9e233c5c62eb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d1e79867-8cea-4e3b-b5ce-4479c1506249",
              "f814b7dc-7de4-415e-867a-9e233c5c62eb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 454,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "653213e7-bf46-4507-9a56-9a6516d871b6",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
        "file": "\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 568,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8fe96140-5d76-4956-bccf-daa76f6450b1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e41e486a-eaff-421e-863d-7220b9d1fe65",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 446,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    // Check to see if body contains users information. If so,\n    // then the user's information was passed back meaning it succeeded.\n    expect(res.body.username).toBe(newUser.username);\n    expect(res.body.password).not.toBe(newUser.password);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "69c025b0-6e1a-4345-8173-8ad99cd6bf05",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Set invalid properties to newUser.\nnewUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Must enter a valid email.\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4d43ed1b-7916-479a-b6a7-84eeb15db967",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"jboy@test.com\";\nnewUser.phone = \"5559992222\";\nnewUser.username = users[0].username;\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.username).toBe(\"Username already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ email: newUser.email })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b7f093eb-0d74-46fd-b523-1c56c4e27673",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = users[0].email;\nnewUser.phone = \"5559992222\";\nnewUser.username = \"jboy\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Email already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // If no errors during registration, check to see if newUser was\n    // stored in the database properly.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7e3e411b-76c3-42ba-8301-372d7a24c958",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "69c025b0-6e1a-4345-8173-8ad99cd6bf05",
              "4d43ed1b-7916-479a-b6a7-84eeb15db967",
              "b7f093eb-0d74-46fd-b523-1c56c4e27673",
              "7e3e411b-76c3-42ba-8301-372d7a24c958"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 983,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6a28af35-ad23-4161-b613-8cce7a9930d4",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 192,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"thePassword\"\n  })\n  .expect(200)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBe(true);\n    expect(res.body.token).toBeTruthy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "33607ccc-29b2-49de-ab69-f49b8dcfed30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"wrongusername\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4ec125dc-e85b-4ef9-9fff-d8ab5c6f6b02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"theWrongPassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7bfb4d74-fb27-492c-9a18-3184a309b82f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpsr\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n    expect(res.body.login).toBe(\"Your account is not validated yet\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5570db83-71f7-4399-a46c-34751f97679b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "33607ccc-29b2-49de-ab69-f49b8dcfed30",
              "4ec125dc-e85b-4ef9-9fff-d8ab5c6f6b02",
              "7bfb4d74-fb27-492c-9a18-3184a309b82f",
              "5570db83-71f7-4399-a46c-34751f97679b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 658,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b072b2a1-2960-4232-969d-7d8946ee3cb7",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cd57e55b-afd9-4d7b-bd53-16b911a3dd95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.username).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "53ecc47b-2faf-4a72-8c22-7cc693b5273b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd57e55b-afd9-4d7b-bd53-16b911a3dd95",
              "53ecc47b-2faf-4a72-8c22-7cc693b5273b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "35154245-7315-4c85-a4d8-d50545829dbf",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"somename\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.firstName).toBe(\"somename\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abfc2681-5c33-44f4-a471-2a7867621f10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.firstName).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d19d2427-b940-4f80-8634-99a972ea5e3c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"bademail\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: \"badvalidatedvalue\"\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "737478fd-8a3c-48ff-af29-e6ad2473f1b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abfc2681-5c33-44f4-a471-2a7867621f10",
              "d19d2427-b940-4f80-8634-99a972ea5e3c",
              "737478fd-8a3c-48ff-af29-e6ad2473f1b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "012b5e21-0a6a-4e1a-a20b-e0ce967636c3",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
        "file": "\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 569,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fcfd4568-9cb3-4ff4-b6e7-dd39f402eadb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "CalendarEvent.deleteMany({})\n  .then(() => {\n    var eventOne = new CalendarEvent(events[0]).save();\n    var eventTwo = new CalendarEvent(events[1]).save();\n    var eventThree = new CalendarEvent(events[2]).save();\n    return Promise.all([eventOne, eventTwo, eventThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "deb9fc69-26c1-4418-8b3f-f16ac58cee6c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a4ddd559-627a-49e1-a637-f70b456e18a6",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(events.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8949e00b-b13d-48f1-b761-330e4eaaa2c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8949e00b-b13d-48f1-b761-330e4eaaa2c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "35ba8e28-2be1-41b7-b0af-8908f58df4ed",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(newEvent)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(newEvent.title);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: newEvent.title })\n      .then(event => {\n        expect(event).toBeTruthy();\n        expect(event.title).toBe(newEvent.title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "de9879e8-7e15-4e90-b7b1-b3375be25a5c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(badEvent)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: badEvent.title })\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "22882d22-bda1-461a-9b80-241b77fa7293",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "de9879e8-7e15-4e90-b7b1-b3375be25a5c",
              "22882d22-bda1-461a-9b80-241b77fa7293"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "13fabe20-c452-4345-b24b-034b8dec606d",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "afe214a0-772f-40f9-bddb-2511665d7342",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6fea25aa-0388-41f7-b810-b33af11aee71",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "afe214a0-772f-40f9-bddb-2511665d7342",
              "6fea25aa-0388-41f7-b810-b33af11aee71"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 356,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fd05c0ca-4150-4977-8a0b-ec1fd0f31f53",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"New title\",\n    color: events[0].color,\n    start: events[0].start,\n    end: events[0].end,\n    order: events[0].order\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(\"New title\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(\"New title\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d2a26eff-cb92-47f6-b361-6195bd1068c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"\",\n    color: \"\",\n    start: \"\",\n    end: \"\",\n    order: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(events[0].title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6dbfeefd-8b05-4c52-af3b-b8d0e89f9086",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(events[0])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "12aafc50-5ddc-495e-b557-424bb0a55d2b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2a26eff-cb92-47f6-b361-6195bd1068c4",
              "6dbfeefd-8b05-4c52-af3b-b8d0e89f9086",
              "12aafc50-5ddc-495e-b557-424bb0a55d2b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 533,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "540ddb9a-d139-47cb-b7e0-7c488d14b889",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[1]._id.toHexString())\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a64b5046-6a96-4a99-8ed2-d1f8b9648132",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b581270b-0930-43cf-b54f-d06ce713a952",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a64b5046-6a96-4a99-8ed2-d1f8b9648132",
              "b581270b-0930-43cf-b54f-d06ce713a952"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 354,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b5ca1b5c-2aae-41ed-a68d-4e9ef61d279f",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
        "file": "\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 572,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "733c815e-86f1-496c-b840-27583b28014b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "88dd767a-2a60-4238-963f-3afd7aea2f83",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0610046d-c4cd-45eb-8b08-9365c5b4d567",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 182,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a093a894-bc44-4f72-ae5a-08b030cdd883",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f44d9ddc-741b-4751-9af2-67cfa784b0c0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1ddde475-01f9-4238-904e-584e07c2cb69",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fefe0219-416c-4cc6-b4ea-3f817ea625c5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3cfb1477-840d-4eea-9045-4b632af65fe7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 180,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5cc6a80a-a4e7-4942-af74-88c4c953e424",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 183,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Order.deleteMany({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f9564927-f5c1-4436-b957-d1806594b498",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e2c7dde7-fd3d-4680-831a-413f5f8b4158",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(orders.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "aca787c6-6d3a-4f8c-a09c-d766b6ea7238",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5f435221-674d-4f62-966a-b04b504867d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aca787c6-6d3a-4f8c-a09c-d766b6ea7238",
              "5f435221-674d-4f62-966a-b04b504867d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 363,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b50ce898-4f2e-4a6a-ba38-162b1d1031b5",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e3059918-4e40-4f1f-a5b6-7c44caf02dd8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8ec4cba5-c411-4e0f-a81e-2157f1b8712f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8932e045-5665-4201-aa3c-8f8a947ebe52",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3059918-4e40-4f1f-a5b6-7c44caf02dd8",
              "8ec4cba5-c411-4e0f-a81e-2157f1b8712f",
              "8932e045-5665-4201-aa3c-8f8a947ebe52"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 454,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a5ad3cde-c344-46a5-9c7b-c09bf38c5f64",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 356,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e34d5a64-5d83-4a6a-8b1f-c6da5d4f32b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5a4c1f1c-39a0-4fc0-bd72-d6995a11b91f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8606404b-f77c-4c80-8342-4e4d508b1fc6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e34d5a64-5d83-4a6a-8b1f-c6da5d4f32b6",
              "5a4c1f1c-39a0-4fc0-bd72-d6995a11b91f",
              "8606404b-f77c-4c80-8342-4e4d508b1fc6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 453,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "95efb517-bf1d-41d8-939c-522a8bfb935e",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 978,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8e73863b-0e73-47a9-b59d-8e3966dcdc7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8c728aa5-bb57-402f-b948-8b85d8ac339a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8e73863b-0e73-47a9-b59d-8e3966dcdc7b",
              "8c728aa5-bb57-402f-b948-8b85d8ac339a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 981,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fc2b33aa-36ed-43a1-bee5-4f746c11548b",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 366,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0e4631b9-1dbf-4a9c-bb8d-5191904cba13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "179b89c5-cac7-4dec-b060-75e45f3e410c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "10ef22a7-81bb-4a5a-bc0a-e2ea6bc837b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e4631b9-1dbf-4a9c-bb8d-5191904cba13",
              "179b89c5-cac7-4dec-b060-75e45f3e410c",
              "10ef22a7-81bb-4a5a-bc0a-e2ea6bc837b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 459,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "10449e58-81aa-4c31-9e18-fa2516332aa7",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4cf741e8-b6fd-42f5-9374-43ca7450af48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b7967565-3ba6-4582-a2e5-06ec3d943266",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ef11fcfe-02e4-4d32-a64e-a2f35267dfda",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4cf741e8-b6fd-42f5-9374-43ca7450af48",
              "b7967565-3ba6-4582-a2e5-06ec3d943266",
              "ef11fcfe-02e4-4d32-a64e-a2f35267dfda"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 278,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9eaae94a-6029-409d-b89c-72a06c07ebb7",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 565,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "62c80b6d-27ce-46d7-82e6-8531efd4c43a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ProductType.deleteMany({})\n  .then(() => {\n    var modification = new ProductType(productTypes[0]).save();\n    var container = new ProductType(productTypes[1]).save();\n    var rentalModification = new ProductType(productTypes[2]).save();\n    var delivery = new ProductType(productTypes[3]).save();\n    var pickup = new ProductType(productTypes[4]).save();\n    return Promise.all([\n      modification,\n      container,\n      rentalModification,\n      delivery,\n      pickup\n    ]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0e1ff138-949e-47ac-b379-348615634937",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a843e160-458b-4c7c-920b-77d4a83aa737",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    // check to see if product types array exists.\n    expect(res.body.length).toBe(5);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e6e92f1e-8072-45dc-8c4d-8e4595a0aa5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e6e92f1e-8072-45dc-8c4d-8e4595a0aa5d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 177,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7db9318e-0ac9-4807-a124-421b132589bb",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProductType)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(newProductType.type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result.type).toBe(newProductType.type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "977b8a73-3657-43c2-a475-9b4f7a83c12e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "95c8fa3d-76f2-41fb-b879-640e458aaf70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "977b8a73-3657-43c2-a475-9b4f7a83c12e",
              "95c8fa3d-76f2-41fb-b879-640e458aaf70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 528,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1e71874d-7abf-409b-8736-8a73be703a50",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "449d7c58-7703-41d0-9c1e-13e1e4b74bf3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "64123e2e-0ec7-41ac-84d1-9aa5d4c1adac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "449d7c58-7703-41d0-9c1e-13e1e4b74bf3",
              "64123e2e-0ec7-41ac-84d1-9aa5d4c1adac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 265,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1440a373-a8a1-49f2-9592-0e9e2394e8c9",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"new modification\"\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"new modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c25ef9d1-dc0a-4adc-acc9-47cafb463cc6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9b5a4e81-bc57-4ab8-a3d7-ac3c3ec2973a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"container\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"That type is already being used\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4aade55a-19da-4dd6-93db-fefd6b310c4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"some new mod\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"No product found with that ID in the URL\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "42a02d6b-d939-4bd7-8551-6266ed2291b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c25ef9d1-dc0a-4adc-acc9-47cafb463cc6",
              "9b5a4e81-bc57-4ab8-a3d7-ac3c3ec2973a",
              "4aade55a-19da-4dd6-93db-fefd6b310c4f",
              "42a02d6b-d939-4bd7-8551-6266ed2291b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 641,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f541a707-4ecd-4636-8c2c-f6d57de97aa5",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(productTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ProductType.findById(productTypes[0]._id.toHexString())\n      .then(type => {\n        expect(type).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8ef43935-3d84-4fb9-a6b2-b214cd12f1bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "03a53f92-45c3-4c89-b728-ab7e8bc7dfa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(404)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"Unable to find and remove the product type\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a0a705d1-f60b-4c60-83b9-91e581422065",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ef43935-3d84-4fb9-a6b2-b214cd12f1bf",
              "03a53f92-45c3-4c89-b728-ab7e8bc7dfa5",
              "a0a705d1-f60b-4c60-83b9-91e581422065"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "6546f72f-5192-4809-beaf-92cda42078ee",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 182,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c586913e-5781-44a8-9100-b0d04a057ffd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d7512b4b-9edd-40ff-bd45-ae7b15973e46",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8564acd2-802f-4cd3-96b9-2a82fc46791c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8564acd2-802f-4cd3-96b9-2a82fc46791c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 266,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "5c9eb7bf-78a1-40ac-a792-dc8196d0b464",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 356,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(newProduct.name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "45a405b9-4a2d-4824-b87f-ad778c0aa7ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct.name = \"\";\nnewProduct.shortName = \"\";\nnewProduct.rental = \"\";\nnewProduct.type = \"\";\nrequest(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "cb9fcd76-2254-454f-bb4c-ffa2b82a4be2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45a405b9-4a2d-4824-b87f-ad778c0aa7ca",
              "cb9fcd76-2254-454f-bb4c-ffa2b82a4be2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 530,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6ef26162-0298-440d-b5d1-e417394e7427",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "47a2b2d3-5e12-4a59-9d03-cbe778dd23f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fdb72653-f0e4-4c62-b6d1-a2f2ee0a4c4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "47a2b2d3-5e12-4a59-9d03-cbe778dd23f1",
              "fdb72653-f0e4-4c62-b6d1-a2f2ee0a4c4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "bcf7a962-9609-4633-adf9-ead8fb5f9165",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"40' Pickup\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3fdff066-c3a9-4e35-a0e9-3ccb484d8a42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"No product found.\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dbfc7da8-d9dc-44e7-8635-6fea9e6e3383",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"\",\n  shortName: \"\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: \"\",\n  type: \"\"\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f7b35bb6-c4fe-4dbc-ad67-c05b30b8b9e7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3fdff066-c3a9-4e35-a0e9-3ccb484d8a42",
              "dbfc7da8-d9dc-44e7-8635-6fea9e6e3383",
              "f7b35bb6-c4fe-4dbc-ad67-c05b30b8b9e7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b8c0d46e-ea80-4dd2-a0ed-c04135a4b6e0",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Product.findById(products[0]._id.toHexString())\n      .then(product => {\n        expect(product).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "125307fc-52bd-4e6f-9c04-75938cd9740f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e8d6247d-f641-45c9-97d7-dc3d1c5282e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "125307fc-52bd-4e6f-9c04-75938cd9740f",
              "e8d6247d-f641-45c9-97d7-dc3d1c5282e0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 355,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "89ffe10f-9407-40fa-ab36-77b628f87406",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
        "file": "\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 564,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4ad6a918-220d-40aa-b624-8185b1a2794d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b34670ce-c73c-4c30-8986-2c1392ffa5a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "e78d5dca-e5e8-40d5-866a-a026f69046ad",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "70efc28c-dc43-49e9-b351-fa06ee45c804",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "cd656fb5-696c-4c51-8c13-df44730edefa",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "123e0358-1d21-4296-9093-791be62142bb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Quote.deleteMany({})\n  .then(() => {\n    var quoteOne = new Quote(quotes[0]).save();\n    return Promise.all([quoteOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "46b4c1dc-c89b-4f6d-9e83-8581e43562b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "7ed0ca7c-5e24-4126-88b9-57a1941ce9f2",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3ec0a8f0-a6d7-4325-9150-afeee5360df7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "47e10929-07f1-4fa7-a614-d5379815e207",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3ec0a8f0-a6d7-4325-9150-afeee5360df7",
              "47e10929-07f1-4fa7-a614-d5379815e207"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 272,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "38bd8983-77a0-4500-9335-46d5a321548f",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 533,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer).toBe(newQuote.customer);\n    expect(res.body.attention).toBe(newQuote.attention);\n    expect(res.body.isHidden).toBe(false);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4bf662bf-2c7e-4cfd-874d-3c682df1eeeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "57136df3-67f1-40d9-b208-01894af948d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newQuote.purchaseType = \"not a number\";\nrequest(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"Purchase type selected does not exist\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c5a72619-1e5a-4738-9b1d-015f7e399a78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4bf662bf-2c7e-4cfd-874d-3c682df1eeeb",
              "57136df3-67f1-40d9-b208-01894af948d4",
              "c5a72619-1e5a-4738-9b1d-015f7e399a78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 799,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e05d81d3-38b5-4cab-a484-965d7c87d2e7",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f38e637a-8fdc-48f2-8679-47659687da3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "664b67ac-4ef8-4065-8e8a-a57b128aec24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this customer\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1f5ae095-f140-4aea-8f4b-4a1d758ed1c0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f38e637a-8fdc-48f2-8679-47659687da3e",
              "664b67ac-4ef8-4065-8e8a-a57b128aec24",
              "1f5ae095-f140-4aea-8f4b-4a1d758ed1c0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 365,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1e175d1d-b7b7-40d7-a664-f86517a1fc42",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d6e74511-8ff7-483a-a05d-9f48e9f5f6a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c01f8188-19c5-4c60-a938-8785f001cd84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this user\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "16267973-754c-49f1-af1c-520bea927068",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6e74511-8ff7-483a-a05d-9f48e9f5f6a5",
              "c01f8188-19c5-4c60-a938-8785f001cd84",
              "16267973-754c-49f1-af1c-520bea927068"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "249eba56-0446-45f0-b2de-d9ebad2bf1f8",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "76a99626-803e-4444-89cf-5e5ef4db8792",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "35555929-c612-43a3-aad4-f846ae44a1d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "562c7bd6-5794-43f1-b4b2-e6048a47cdc2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "76a99626-803e-4444-89cf-5e5ef4db8792",
              "35555929-c612-43a3-aad4-f846ae44a1d0",
              "562c7bd6-5794-43f1-b4b2-e6048a47cdc2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "69f20865-4f3b-46a4-aab6-37819d0482b4",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 623,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(updateQuote._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "258892b6-f99b-42a8-a466-edafdf0955e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0c612425-c24e-4080-8dc8-4a753fa53b50",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}sss`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"No quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "856b857a-31e1-44d5-a882-c85f5ee73497",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "updateQuote.purchasePrices = \"sd235523\";\nrequest(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchasePrices).toBe(\n      \"There is an issue with the quote's purchase prices\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "71a10319-84d1-4b0f-ae4a-7d73134cd7b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "258892b6-f99b-42a8-a466-edafdf0955e7",
              "0c612425-c24e-4080-8dc8-4a753fa53b50",
              "856b857a-31e1-44d5-a882-c85f5ee73497",
              "71a10319-84d1-4b0f-ae4a-7d73134cd7b3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 985,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "60826480-50f1-45a0-984f-1c8b718a9bcb",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c4454d8-cb03-4171-99c9-c32c1ea2438b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5aee6c6c-17ba-499d-bd3e-34e469fa0cd4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7127d9e5-b368-42b2-b4ca-876f57951b22",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c4454d8-cb03-4171-99c9-c32c1ea2438b",
              "5aee6c6c-17ba-499d-bd3e-34e469fa0cd4",
              "7127d9e5-b368-42b2-b4ca-876f57951b22"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ee1bd846-c72e-4b36-8b54-9cd042d252f2",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
        "file": "\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 573,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b1000fd9-44dd-4868-88c7-8bc919152a7b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "36986c5a-4516-4511-8286-a51e97475ef4",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
            "file": "\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 177,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "1110eae4-4515-49df-9a9e-3b757856afc6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "747a109d-c5c7-44a7-9e2d-ff48146b04ba",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 180,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6409df2e-6867-4dc4-aca5-49964581e62a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6409df2e-6867-4dc4-aca5-49964581e62a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 180,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "6ddb54a5-1c06-4d41-a021-8f39e7e282b3",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 265,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findOne({ type: \"Resale\" })\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ee2d059-fe96-42c8-982b-232c574a7564",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0a2a2d5e-f871-46bf-9306-fd005989d38b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0ee2d059-fe96-42c8-982b-232c574a7564",
                  "0a2a2d5e-f871-46bf-9306-fd005989d38b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 354,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "a4815fd4-f98b-49d3-8116-f28bcd8f34fd",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 179,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf697157-6ffb-4421-b9cb-6218467c6d76",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 91,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"There was no purchase type found\"\n    );\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "92c8db8a-0703-4b4c-a434-f30dd8cb1842",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cf697157-6ffb-4421-b9cb-6218467c6d76",
                  "92c8db8a-0703-4b4c-a434-f30dd8cb1842"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 270,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "cabbe515-d29a-4217-8018-21d5d2588a72",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 268,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76c96d0f-733f-46f9-b9a8-d7bdd8804663",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "66ba37ed-555c-45b7-ad7e-da90a1b2ba15",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9602d299-5bdc-4540-8e10-d296e184984a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "76c96d0f-733f-46f9-b9a8-d7bdd8804663",
                  "66ba37ed-555c-45b7-ad7e-da90a1b2ba15",
                  "9602d299-5bdc-4540-8e10-d296e184984a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 624,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "ddd95a6e-8408-4d1e-8f71-f0dd209226a0",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 264,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "730805e0-4ac8-4411-a773-7d6be74812be",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 179,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(purchaseTypes[0].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a05896eb-d78f-4291-8379-9b3c45e59690",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "730805e0-4ac8-4411-a773-7d6be74812be",
                  "a05896eb-d78f-4291-8379-9b3c45e59690"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 443,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "3003858d-4440-4756-aed0-d54159140050",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
        "file": "\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 565,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c00eb1b9-2926-4b9e-93a4-05578ed22383",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Todo.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var todoOne = new Todo(todos[0]).save();\n    var todoTwo = new Todo(todos[1]).save();\n    var todoThree = new Todo(todos[2]).save();\n    return Promise.all([todoOne, todoTwo, todoThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b10fcd7e-bf5b-4a12-ad87-9b1689610107",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d5daa56-3ab1-4f57-addf-3ccf4d87c9ae",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7130c5df-a063-4f45-a923-9cd61b56d5cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "af576b83-c858-4669-8b43-eeac348c972d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7130c5df-a063-4f45-a923-9cd61b56d5cb",
              "af576b83-c858-4669-8b43-eeac348c972d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 184,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e6371511-5e82-40a0-aa8d-70366ed7f691",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"The newest todo\");\n    expect(res.body.creator).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ab56b2ab-5775-4756-9131-7759b758c054",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "44eee1bb-0998-41bb-a579-242504a4776e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a04c7a3e-8663-4e3b-bce6-61a2a0e4830a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab56b2ab-5775-4756-9131-7759b758c054",
              "44eee1bb-0998-41bb-a579-242504a4776e",
              "a04c7a3e-8663-4e3b-bce6-61a2a0e4830a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a8b5875d-ae96-4fe9-8193-062f49a4ced5",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n    expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7d9ec08f-aa92-4fb3-b4b2-a067ce836757",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9ca92963-22eb-48d1-8111-2e7653dbb202",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d9ec08f-aa92-4fb3-b4b2-a067ce836757",
              "9ca92963-22eb-48d1-8111-2e7653dbb202"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 532,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "5269819c-e8df-4d85-84cc-7b020c6d093d",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"a new description\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "515e6855-7059-44b5-9eb2-d06839d85422",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "684ff301-3564-4729-b383-181ba597c38e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b8ee6423-b77e-4fd8-9d11-4c41fcf134a7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "515e6855-7059-44b5-9eb2-d06839d85422",
              "684ff301-3564-4729-b383-181ba597c38e",
              "b8ee6423-b77e-4fd8-9d11-4c41fcf134a7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d68a0d58-8567-4550-8af6-1a9646d2c235",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "63bf390b-a232-47cf-881c-b3255ff691b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ea693b77-98bb-4618-96ac-95c23ae8d5e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "63bf390b-a232-47cf-881c-b3255ff691b0",
              "ea693b77-98bb-4618-96ac-95c23ae8d5e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 350,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b5e8a598-9f58-4081-866a-d28e293f47ce",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
        "file": "\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1e341f2b-22d7-4bbf-a8da-faef1ae1213d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6a65f8b8-3455-4628-aefc-1261d1ecbd16",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(users.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e423cd06-7be0-4c66-a672-7980043f7972",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e423cd06-7be0-4c66-a672-7980043f7972"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dbc3cc62-ff77-48d3-9727-7954c0267a6f",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 634,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(newUser.username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.firstName).toBe(newUser.firstName);\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8c29de21-f3bd-44d5-9bc4-f0fa69416b4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nnewUser.validated = \"hello\";\nrequest(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7aa332af-c785-40cf-a579-42537b03508c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8c29de21-f3bd-44d5-9bc4-f0fa69416b4e",
              "7aa332af-c785-40cf-a579-42537b03508c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 815,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1e20f878-be61-48a3-917e-6b8943838edc",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "05914447-1107-450f-b485-a994d8097bb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4cb2d3b6-6c10-4d3b-8c01-697d0fcb0af7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05914447-1107-450f-b485-a994d8097bb2",
              "4cb2d3b6-6c10-4d3b-8c01-697d0fcb0af7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ad0f148c-0382-400c-900a-335d2a3783cf",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "users[1].validated = true;\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(users[1].username);\n    expect(res.body.validated).toBe(true);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1bd34a98-5527-4470-9d0d-d4e2d2dd51ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/users/${users[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Invalid ID\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "370a927b-73fe-4b87-bf8f-b40d028100cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"Brian\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Sr\",\n  username: \"blpsr\",\n  password: \"thePassword\",\n  email: \"gbr@test.com\",\n  phone: \"5559991224\",\n  title: \"Manager\",\n  type: \"Staff\",\n  validated: \"someWrongValidation\"\n};\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        expect(user.firstName).toBe(\"Brian\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9aa01494-e812-4167-a6e8-c1f7976f7bf7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1bd34a98-5527-4470-9d0d-d4e2d2dd51ed",
              "370a927b-73fe-4b87-bf8f-b40d028100cd",
              "9aa01494-e812-4167-a6e8-c1f7976f7bf7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 535,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1644fc6f-0f11-4650-baed-511679945861",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id.toHexString())\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0fd778aa-13ca-4568-90ca-72928c37cc1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[1].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.username).toBe(users[1].username);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0bfec14b-e988-4698-8231-83b465285fef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0fd778aa-13ca-4568-90ca-72928c37cc1a",
              "0bfec14b-e988-4698-8231-83b465285fef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 447,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}