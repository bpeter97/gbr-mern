{
  "stats": {
    "suites": 74,
    "tests": 145,
    "passes": 130,
    "pending": 0,
    "failures": 15,
    "start": "2019-03-23T19:58:56.086Z",
    "end": "2019-03-23T20:01:20.702Z",
    "duration": 144616,
    "testsRegistered": 145,
    "passPercent": 89.7,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "70494c49-997c-4997-ace3-38940eb0a2a8",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "80ba2566-6a0a-4ace-8d00-05daebae8f20",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
        "file": "\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1883,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0351d3a3-44ec-4853-b7ca-62f3e7a15b53",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.remove({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "09c47421-bd77-45d6-bbb5-93a595774881",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.remove({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c29b49e4-aeb3-499b-9f7d-dcac7b245334",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 181,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.remove({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8aa74817-2786-4aad-ae02-04cd9ae49674",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d1f705eb-e662-499a-8ab5-a341a365b2db",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6930fd74-1841-4035-bb61-06f0b0b453e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6930fd74-1841-4035-bb61-06f0b0b453e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 210,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e9b70a4c-4205-4651-b32c-44116d23f1a2",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 110,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"20C\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "20117548-0ef5-446c-ab12-00bb07bab780",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 93,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "5c496107-7c5f-43e0-96f3-30a1b32c9748",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "20117548-0ef5-446c-ab12-00bb07bab780",
              "5c496107-7c5f-43e0-96f3-30a1b32c9748"
            ],
            "pending": [],
            "skipped": [],
            "duration": 203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "991d06f6-b12c-4720-a04a-8bd69a923aa3",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8eb5fbea-cadb-4986-a3ec-c6f09412fd94",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3b52775e-f160-489e-b79f-f26a47a3dac7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8eb5fbea-cadb-4986-a3ec-c6f09412fd94",
              "3b52775e-f160-489e-b79f-f26a47a3dac7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 266,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "182b27f1-fee3-4748-a02a-34661cff5e9f",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 90,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "38ca7704-c8e7-4289-bf3b-59774f1f9e71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "2df51318-7a30-4c12-9004-5ac22900909c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "67243e60-5230-4a6f-9cae-9b1aa9dd951c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "294c72cb-1da8-492b-8654-ebb160048745",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "38ca7704-c8e7-4289-bf3b-59774f1f9e71",
              "2df51318-7a30-4c12-9004-5ac22900909c",
              "67243e60-5230-4a6f-9cae-9b1aa9dd951c",
              "294c72cb-1da8-492b-8654-ebb160048745"
            ],
            "pending": [],
            "skipped": [],
            "duration": 363,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "17b9dcd7-23cd-4732-969e-fa5ce9ac6b0d",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fc0e7d90-daed-4dd7-bc60-662e76d5be2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "09fb38d1-c46b-4603-ad67-d597665f2231",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc0e7d90-daed-4dd7-bc60-662e76d5be2b",
              "09fb38d1-c46b-4603-ad67-d597665f2231"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 447,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "de0ea443-cab2-4a39-8d01-f02d7d455198",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3f93aa26-31f2-4258-8e24-e6e607f9b733",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3f93aa26-31f2-4258-8e24-e6e607f9b733"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d3736b63-3680-449f-b0e8-3b1fa412f762",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 178,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expect(received).toBeTruthy()\n\nExpected value to be truthy, instead received\n  null",
                  "estack": "Error: expect(received).toBeTruthy()\n\nExpected value to be truthy, instead received\n  null\n    at Container.findOne.then.container (tests\\containers.test.js:300:33)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"
                },
                "isRoot": false,
                "uuid": "7c96ffca-93ee-49a7-9c71-5718dbfa6ee8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 92,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers/\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: done() called multiple times",
                  "estack": "Error: done() called multiple times\n    at Container.findOne.then.container (tests\\containers.test.js:346:15)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"
                },
                "isRoot": false,
                "uuid": "c3bb8b14-ea09-46e3-afbc-59b0cc7ce2f8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "7c96ffca-93ee-49a7-9c71-5718dbfa6ee8",
              "c3bb8b14-ea09-46e3-afbc-59b0cc7ce2f8"
            ],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2c53da87-e822-41c7-b197-e0cef39c0f87",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ca0f416d-a1df-4779-92d3-839dc50716de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0cc78579-fb13-4a52-8498-187edd31a5c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ca0f416d-a1df-4779-92d3-839dc50716de",
              "0cc78579-fb13-4a52-8498-187edd31a5c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 353,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ac035ff7-f20f-4309-a91c-42cbc321d1e8",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "f63aea05-7aa1-4132-b1a5-dd949e58a605",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 90,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: \"\",\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  rentalResale: \"\",\n  currentAddress: \"\",\n  currentlyRented: \"\",\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "127f2dab-dbce-4de3-ae4c-ac7d5923df89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 500 \"Internal Server Error\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "e68c2962-7a3b-4288-a4ea-9a02097fba91",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "f63aea05-7aa1-4132-b1a5-dd949e58a605",
              "127f2dab-dbce-4de3-ae4c-ac7d5923df89",
              "e68c2962-7a3b-4288-a4ea-9a02097fba91"
            ],
            "pending": [],
            "skipped": [],
            "duration": 272,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "463d1492-4ad9-436e-a6e5-41f5737c023b",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1cc4f308-7052-4acc-8198-84fa40729d14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "aa44d61d-0be1-4ab5-a80f-12ee8e638a6e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1cc4f308-7052-4acc-8198-84fa40729d14",
              "aa44d61d-0be1-4ab5-a80f-12ee8e638a6e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 447,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "d4c4ea46-71d0-4302-ae6b-791918c69526",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
        "file": "\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 581,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5aa48009-c4fe-4ddb-9035-0ab4205b6ab4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.remove({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8a15a8f2-420c-440f-a809-f3c461e7b1ff",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5ab8c7a4-23fa-48e2-92ab-d925c666752f",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(customers.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f995e6a1-e7f0-42a1-b94c-65e0c9011e7e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f995e6a1-e7f0-42a1-b94c-65e0c9011e7e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 185,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "33028aba-06bf-4bb8-bef0-61e9cd694f22",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newCustomer)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(newCustomer.name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0536f64f-4d31-4cd6-814d-b73005f4e59a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(badCustomer)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8888d417-b743-4ad8-acb9-5ec25263f7ba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0536f64f-4d31-4cd6-814d-b73005f4e59a",
              "8888d417-b743-4ad8-acb9-5ec25263f7ba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 639,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9b50dfcd-bcdb-41ff-9453-cccb4994e6d0",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bd4a40cf-2ad3-4d95-945a-f7d8144f56bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9c5ebe0b-3e1d-4237-be45-2fc24a7f11a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd4a40cf-2ad3-4d95-945a-f7d8144f56bd",
              "9c5ebe0b-3e1d-4237-be45-2fc24a7f11a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "09507492-e422-48ce-af3d-d46a42341a7c",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"Jacob Belmont\",\n    address1: \"1234 Loopy St\",\n    address2: \"\",\n    city: \"Hanford\",\n    zipcode: \"93230\",\n    state: \"CA\",\n    phone: \"559-444-4444\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"another@fake.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: false,\n    flagReason: \"\",\n    lastViewed: null\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Jacob Belmont\");\n    expect(res.body.isFlagged).toBe(false);\n    expect(res.body.flagReason).toBe(\"\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[1]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        expect(customer.name).toBe(\"Jacob Belmont\");\n        expect(customer.isFlagged).toBe(false);\n        expect(customer.flagReason).toBe(\"\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "eb17de44-bc52-426b-8b25-c3acfaced8f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[2]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    zipcode: \"\",\n    state: \"\",\n    phone: \"\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"failemail.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: \"messedup\",\n    flagReason: \"Do not rent, patient hasn't paid bill.\",\n    lastViewed: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6ded67d9-a753-455c-84ff-6c0eb8e67cc1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({})\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "66249590-f2ec-4727-af0b-faa564f0081d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb17de44-bc52-426b-8b25-c3acfaced8f3",
              "6ded67d9-a753-455c-84ff-6c0eb8e67cc1",
              "66249590-f2ec-4727-af0b-faa564f0081d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 450,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ace635b8-8015-4d2c-badf-d16ce47722c5",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9a7f3111-07dc-459d-bbc2-dd5cfe5e189d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e01e4f2d-e3fb-45a5-a2e4-008640910305",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a7f3111-07dc-459d-bbc2-dd5cfe5e189d",
              "e01e4f2d-e3fb-45a5-a2e4-008640910305"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 440,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "4f5a7be7-63e6-4d3c-9d8f-1a1834e8cb3b",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
        "file": "\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 578,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "da78ec3f-bab8-4755-bf9d-5bf9d4c14c2b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "db0f9956-e04f-45df-bde6-51ec1bca3bcb",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 606,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    // Check to see if body contains users information. If so,\n    // then the user's information was passed back meaning it succeeded.\n    expect(res.body.username).toBe(newUser.username);\n    expect(res.body.password).not.toBe(newUser.password);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "394dd293-be64-4a6e-af16-6427be76d3cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Set invalid properties to newUser.\nnewUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Must enter a valid email.\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "29d6f6e8-b3e8-4d93-bdda-4201e4342956",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"jboy@test.com\";\nnewUser.phone = \"5559992222\";\nnewUser.username = users[0].username;\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.username).toBe(\"Username already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ email: newUser.email })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "79c41e9a-8a1c-41b8-a6ac-00e7d886e260",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = users[0].email;\nnewUser.phone = \"5559992222\";\nnewUser.username = \"jboy\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Email already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // If no errors during registration, check to see if newUser was\n    // stored in the database properly.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "48f863ea-5090-4185-be55-a4c97cd97cb9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "394dd293-be64-4a6e-af16-6427be76d3cb",
              "29d6f6e8-b3e8-4d93-bdda-4201e4342956",
              "79c41e9a-8a1c-41b8-a6ac-00e7d886e260",
              "48f863ea-5090-4185-be55-a4c97cd97cb9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1139,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6ce1c2de-606d-4dd0-b236-ff3ba0766678",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"thePassword\"\n  })\n  .expect(200)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBe(true);\n    expect(res.body.token).toBeTruthy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "04a1e9f8-6a72-4f05-9987-c521fd226beb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 449,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"wrongusername\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f8e7a902-1b8d-4871-83d8-2161100a3125",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"theWrongPassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3ae3c582-0e6c-4342-8027-3da871d63e13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpsr\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n    expect(res.body.login).toBe(\"Your account is not validated yet\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "93da1329-dc50-4d57-ab00-983c5f7bccaa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "04a1e9f8-6a72-4f05-9987-c521fd226beb",
              "f8e7a902-1b8d-4871-83d8-2161100a3125",
              "3ae3c582-0e6c-4342-8027-3da871d63e13",
              "93da1329-dc50-4d57-ab00-983c5f7bccaa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1029,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "21ba1b7b-e20e-434b-a801-f545cceafa25",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cd9f864a-49ae-4f61-9e9c-973d4ca57d3a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.username).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c4692d53-d63b-46f1-8958-097afa5e8793",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cd9f864a-49ae-4f61-9e9c-973d4ca57d3a",
              "c4692d53-d63b-46f1-8958-097afa5e8793"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8aa2bcf6-c918-4073-a63e-642d9e5506c2",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"somename\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.firstName).toBe(\"somename\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1e29d94e-ddb5-41a4-ab6a-b34acff3a3a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.firstName).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bda00dd4-4ec2-4cc3-bc76-70525289210a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"bademail\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: \"badvalidatedvalue\"\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1b3533b5-15dc-4425-8c15-e6c4ad93ecdb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1e29d94e-ddb5-41a4-ab6a-b34acff3a3a7",
              "bda00dd4-4ec2-4cc3-bc76-70525289210a",
              "1b3533b5-15dc-4425-8c15-e6c4ad93ecdb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9e426827-c37d-45b0-a8ae-b7ff0fc6805a",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
        "file": "\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 603,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "656169e3-7a69-455c-b2cb-b31a389a3fe3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "CalendarEvent.remove({})\n  .then(() => {\n    var eventOne = new CalendarEvent(events[0]).save();\n    var eventTwo = new CalendarEvent(events[1]).save();\n    var eventThree = new CalendarEvent(events[2]).save();\n    return Promise.all([eventOne, eventTwo, eventThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3d24ae30-7648-4abb-9d11-41b9fe946b51",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e1cd8e3c-32a8-43b0-ab8f-482cd3da6d44",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(events.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9f3a3ab6-93ea-459b-bedb-052fdece4ca4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f3a3ab6-93ea-459b-bedb-052fdece4ca4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 183,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "62bd31de-e651-4e78-8a5b-3d1e22320888",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(newEvent)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(newEvent.title);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: newEvent.title })\n      .then(event => {\n        expect(event).toBeTruthy();\n        expect(event.title).toBe(newEvent.title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3afbc8a7-b6ab-42f5-8c64-a06caaf35802",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/events\")\n  .set(\"Authorization\", users[0].token)\n  .send(badEvent)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findOne({ title: badEvent.title })\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "33817430-d5e5-4555-91fa-9f0634b447b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3afbc8a7-b6ab-42f5-8c64-a06caaf35802",
              "33817430-d5e5-4555-91fa-9f0634b447b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "595a53de-4a8a-4492-b007-c9409c122c44",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9604eb7d-c7b1-4110-a5c2-6190e868fbcd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a2ce6613-1444-48ef-854b-8843b89a275d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9604eb7d-c7b1-4110-a5c2-6190e868fbcd",
              "a2ce6613-1444-48ef-854b-8843b89a275d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "783a481c-b338-4a54-a0c2-bfbe18fe7f36",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"New title\",\n    color: events[0].color,\n    start: events[0].start,\n    end: events[0].end,\n    order: events[0].order\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.title).toBe(\"New title\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(\"New title\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "41398a52-c64d-4e64-a645-8156b9c65535",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    title: \"\",\n    color: \"\",\n    start: \"\",\n    end: \"\",\n    order: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n    expect(res.body.color).toBe(\"Color is required\");\n    expect(res.body.start).toBe(\"Start is required\");\n    expect(res.body.end).toBe(\"End is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[0]._id.toHexString())\n      .then(event => {\n        expect(event.title).toBe(events[0].title);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "d2b4f6b6-f31d-49ec-ad99-8bdb17264742",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(events[0])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a0f0ce-3bc6-4ca8-8d6f-1a69d4b4214d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "41398a52-c64d-4e64-a645-8156b9c65535",
              "d2b4f6b6-f31d-49ec-ad99-8bdb17264742",
              "c9a0f0ce-3bc6-4ca8-8d6f-1a69d4b4214d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 539,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c89fc460-6379-438e-852c-346134f2cad2",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\events.test.js",
            "file": "\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(events[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    CalendarEvent.findById(events[1]._id.toHexString())\n      .then(event => {\n        expect(event).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0ad0ffe6-01b2-48fa-a2ce-5242e6530180",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.event).toBe(\"There was no event found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "912ace73-778d-44d3-aced-5838d1d8260e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0ad0ffe6-01b2-48fa-a2ce-5242e6530180",
              "912ace73-778d-44d3-aced-5838d1d8260e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ea9f6c1b-2efa-481d-87e2-27ea1936d574",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
        "file": "\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 595,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "82fcff72-96ce-419f-8265-8498753f8261",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.remove({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d627dff6-d3ec-4186-946d-185b642f0f0a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.remove({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8546e219-aff7-46e8-8584-f48cd460834a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.remove({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "63cc7906-f34f-4b23-beb5-f685fd9a045d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.remove({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "add812a0-24b0-477a-88bf-bc9597b34f64",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.remove({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0aa238ff-ee4a-4095-82a8-4442dc1d39d0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.remove({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9336e967-dc41-481b-9427-5fc329ff063c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 184,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.remove({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "42b3ab23-4d24-4d49-a0a7-38de91a541cf",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 181,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.remove({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fc82534a-4994-4b27-93ea-44c5b17e91fe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Order.remove({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4636fcb3-9229-40f5-90f7-f103fb02558d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9774d69c-7848-4bce-b399-663efaf43528",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 360,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders.length).toBe(orders.length);\n  })\n  .end(done);",
                "err": {
                  "message": "TypeError: Cannot read property 'length' of undefined",
                  "estack": "TypeError: Cannot read property 'length' of undefined\n    at request.get.set.expect.expect.res (tests\\orders.test.js:112:34)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "a979c928-8b7e-4260-8d36-ef1313c785a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "602732d8-29de-457b-8981-26017e2441c9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "602732d8-29de-457b-8981-26017e2441c9"
            ],
            "failures": [
              "a979c928-8b7e-4260-8d36-ef1313c785a3"
            ],
            "pending": [],
            "skipped": [],
            "duration": 364,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4570c6ad-eb6a-42d6-8420-fc3b14a29a1c",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f6b1f333-ef90-4442-ab8b-1e6f0c3cefd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f04f2c98-6d07-47ad-a944-9eaf60df47cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b7b03bb4-5287-41c6-8bd6-9708396c14f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f6b1f333-ef90-4442-ab8b-1e6f0c3cefd5",
              "f04f2c98-6d07-47ad-a944-9eaf60df47cc",
              "b7b03bb4-5287-41c6-8bd6-9708396c14f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 453,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "32de26a4-5141-461d-85d1-a2bdd21d83c2",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 358,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                "err": {
                  "message": "TypeError: Cannot read property '0' of undefined",
                  "estack": "TypeError: Cannot read property '0' of undefined\n    at request.get.set.expect.expect.res (tests\\orders.test.js:166:33)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "4057050b-8b3e-4344-aded-4dde30c7a3bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9209200-62a9-48e5-9fba-17f41e39e80f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "99cae537-5266-481f-92eb-8ca2a87f1cd3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9209200-62a9-48e5-9fba-17f41e39e80f",
              "99cae537-5266-481f-92eb-8ca2a87f1cd3"
            ],
            "failures": [
              "4057050b-8b3e-4344-aded-4dde30c7a3bd"
            ],
            "pending": [],
            "skipped": [],
            "duration": 452,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0b230277-c018-4c78-8d60-528db53b432d",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 1003,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "53111f09-82c1-40e0-b48e-36d75d4b5bfc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b705b550-5aae-46d4-b8ea-14e4e662eab8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "53111f09-82c1-40e0-b48e-36d75d4b5bfc",
              "b705b550-5aae-46d4-b8ea-14e4e662eab8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1007,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8ced4be6-b2d0-4aeb-a26b-6c6d3240b1e3",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d4e5ef00-bfe9-456a-aabf-13adc18703ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ea671ade-f147-44dc-8fd0-f28731ca89b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f483dae3-12e3-43f1-b137-0ba055be2f88",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d4e5ef00-bfe9-456a-aabf-13adc18703ef",
              "ea671ade-f147-44dc-8fd0-f28731ca89b8",
              "f483dae3-12e3-43f1-b137-0ba055be2f88"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 454,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8b4ff2ce-34d9-4837-a5a4-8d2382c08477",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f66b38d2-cb79-46b0-82f3-53cbc068430f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4de85e31-791e-481f-8f64-98b15dce43f9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "396174df-7903-4c21-b54e-b59b94486ed9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f66b38d2-cb79-46b0-82f3-53cbc068430f",
              "4de85e31-791e-481f-8f64-98b15dce43f9",
              "396174df-7903-4c21-b54e-b59b94486ed9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 280,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "e99c1a61-7e5b-4bb2-8669-5c69a0e7cb4e",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 566,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0d2100a1-548b-40cd-9bd0-aa77123e346e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ProductType.remove({})\n  .then(() => {\n    var modification = new ProductType(productTypes[0]).save();\n    var container = new ProductType(productTypes[1]).save();\n    var rentalModification = new ProductType(productTypes[2]).save();\n    var delivery = new ProductType(productTypes[3]).save();\n    var pickup = new ProductType(productTypes[4]).save();\n    return Promise.all([\n      modification,\n      container,\n      rentalModification,\n      delivery,\n      pickup\n    ]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3c92d9d5-1a40-4bd0-a93a-3fb504f64964",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d7a9966d-125d-412d-b859-2610c5546bd5",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    // check to see if product types array exists.\n    expect(res.body.length).toBe(5);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f7e1678e-44da-4244-9444-043122015aba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7e1678e-44da-4244-9444-043122015aba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fac3efd1-1945-4093-8b9f-4ac939e12806",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 355,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProductType)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(newProductType.type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result.type).toBe(newProductType.type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "c5b9b4cd-37cb-4f9f-8bbf-88ce56238ef4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7a525bc5-4942-4af9-897c-ad1e4bd39524",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5b9b4cd-37cb-4f9f-8bbf-88ce56238ef4",
              "7a525bc5-4942-4af9-897c-ad1e4bd39524"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 537,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6298b59d-b570-4db8-a174-c8b256007863",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c39cf9e2-df83-435c-906b-8cd0cb23fe60",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "acfcca60-bbf3-48df-a677-f89173d78831",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c39cf9e2-df83-435c-906b-8cd0cb23fe60",
              "acfcca60-bbf3-48df-a677-f89173d78831"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 273,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a1def26e-890f-4c1d-84ff-8ae7bf8a1b94",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"new modification\"\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"new modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7b4d6c7c-a9ab-4e48-b265-a18a9de61115",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ee3acc29-71ce-436a-becf-52a5ea47e762",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"container\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"That type is already being used\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70729574-a403-4358-9306-3e085aa7afd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"some new mod\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"No product found with that ID in the URL\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a71721e9-f912-4c7f-97f3-910542be9fcb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7b4d6c7c-a9ab-4e48-b265-a18a9de61115",
              "ee3acc29-71ce-436a-becf-52a5ea47e762",
              "70729574-a403-4358-9306-3e085aa7afd0",
              "a71721e9-f912-4c7f-97f3-910542be9fcb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 625,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dc3b8923-ce70-476e-89c8-9bc536d5cc93",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(productTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ProductType.findById(productTypes[0]._id.toHexString())\n      .then(type => {\n        expect(type).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "77f4c855-e1b6-4b91-bf2d-ffba4de78fdb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1ce325a9-64f6-478e-a995-21b0c99fc989",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(404)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"Unable to find and remove the product type\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b178c716-7679-465c-87d0-4ddd7b0ec907",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77f4c855-e1b6-4b91-bf2d-ffba4de78fdb",
              "1ce325a9-64f6-478e-a995-21b0c99fc989",
              "b178c716-7679-465c-87d0-4ddd7b0ec907"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 541,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "da88c168-6d75-4702-b912-32388fc3d060",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.remove({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "bd63cad4-61c9-4786-9a85-d9e377deeffb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "741a7533-564a-438d-823f-1920139e913f",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2e0007b6-ba14-459b-9fd3-1c1b43a43ee2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e0007b6-ba14-459b-9fd3-1c1b43a43ee2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0a0bb30d-b96b-4cf1-a324-0b3271053dfb",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 91,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(newProduct.name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                  "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "881aeb52-caf4-40f6-8c5b-6c13ab23a5ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct.name = \"\";\nnewProduct.shortName = \"\";\nnewProduct.rental = \"\";\nnewProduct.type = \"\";\nrequest(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1ab9425e-ffe0-418e-b494-99fd9b99b59b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1ab9425e-ffe0-418e-b494-99fd9b99b59b"
            ],
            "failures": [
              "881aeb52-caf4-40f6-8c5b-6c13ab23a5ef"
            ],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1c5ef625-35c5-4f81-95b3-d1e50b9bbbb7",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "49fbbb90-3436-4434-b4d3-00d32ed5395b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "60f9bc91-cf8d-49b9-92b9-8d3ec5ae233a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "49fbbb90-3436-4434-b4d3-00d32ed5395b",
              "60f9bc91-cf8d-49b9-92b9-8d3ec5ae233a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "671a84c8-6fbf-44c4-b105-312b75e9628c",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 90,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"40' Pickup\");\n  })\n  .end(done);",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                  "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at Server.localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1618:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
                },
                "isRoot": false,
                "uuid": "3a471b2a-67f3-4c75-8b9b-7993c810b528",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"No product found.\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cfc694cd-375e-4c55-8636-00860762ed67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"\",\n  shortName: \"\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: \"\",\n  type: \"\"\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1e99149f-4e31-4f21-b74b-1efa88d81887",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cfc694cd-375e-4c55-8636-00860762ed67",
              "1e99149f-4e31-4f21-b74b-1efa88d81887"
            ],
            "failures": [
              "3a471b2a-67f3-4c75-8b9b-7993c810b528"
            ],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fc2f7e25-692e-4e25-a3a4-542dbfb4706f",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Product.findById(products[0]._id.toHexString())\n      .then(product => {\n        expect(product).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f0cd9b16-40cc-4285-aee6-ec49c68b58e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d07f3556-2adf-4fd7-bbe6-bd52f055173d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0cd9b16-40cc-4285-aee6-ec49c68b58e0",
              "d07f3556-2adf-4fd7-bbe6-bd52f055173d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 367,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "a02388e0-9a05-4582-8c3a-c16da48da064",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
        "file": "\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b33967d4-ce06-4e6e-a229-b399f2886c87",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.remove({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ddf2fbc3-3018-426d-95ff-60e42f757405",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.remove({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2d6322a1-4a2e-4279-ac8a-07fe1b476d54",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.remove({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "06cd858e-9f54-4c94-8330-ffff5791ea5a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.remove({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "71776320-a641-49ea-8676-21f0a73c8d25",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.remove({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c038981f-dadf-4441-af11-534c3ebe6acd",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Quote.remove({})\n  .then(() => {\n    var quoteOne = new Quote(quotes[0]).save();\n    return Promise.all([quoteOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "30a35d2d-89f9-4072-b75d-07f6b9491bef",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1bd581c9-b5c6-4f0e-b417-40fafc55de0d",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "88044a57-7ee5-4f58-b776-47dcb12f981f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/quotes\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "23166c09-0158-45cc-9387-8ff01c157e7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88044a57-7ee5-4f58-b776-47dcb12f981f",
              "23166c09-0158-45cc-9387-8ff01c157e7b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 272,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0cc64c50-e24f-4dd4-a19b-3e59bef1e49f",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 538,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer).toBe(newQuote.customer);\n    expect(res.body.attention).toBe(newQuote.attention);\n    expect(res.body.isHidden).toBe(false);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "61c80ff8-ecea-4d6e-9fec-f290a6dd1333",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "31bacb8f-1ce7-4e7b-9f87-b7f9c3875611",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newQuote.purchaseType = \"not a number\";\nrequest(app)\n  .post(\"/api/quotes\")\n  .send(newQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"Purchase type selected does not exist\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b5cb7809-f8b4-4dfd-94b1-29cdce355f9d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61c80ff8-ecea-4d6e-9fec-f290a6dd1333",
              "31bacb8f-1ce7-4e7b-9f87-b7f9c3875611",
              "b5cb7809-f8b4-4dfd-94b1-29cdce355f9d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 809,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e2f8bd10-8d43-4602-ae5c-86df88380043",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c76b0f2a-8037-419e-b6df-f7844091f89f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7adcbdfb-d703-4052-9007-5c573d4b2a12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/customer/${customers[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this customer\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a49cac10-a8e1-4caf-ae13-83a1c5218d2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c76b0f2a-8037-419e-b6df-f7844091f89f",
              "7adcbdfb-d703-4052-9007-5c573d4b2a12",
              "a49cac10-a8e1-4caf-ae13-83a1c5218d2e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 369,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9328ce33-6439-4951-a540-dd05d61d83df",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(1);\n    expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f704442f-b08e-4578-8283-98a1b1a34d2f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "af4bde18-cd69-40e5-9b54-e054753fb13a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/user/${users[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\n      \"There were no quotes found for this user\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ec928088-c853-4d55-9ad0-4d36f198ac37",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f704442f-b08e-4578-8283-98a1b1a34d2f",
              "af4bde18-cd69-40e5-9b54-e054753fb13a",
              "ec928088-c853-4d55-9ad0-4d36f198ac37"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 364,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3aefcb00-b435-43d5-9ab2-d8931ee12eec",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "13fb6d58-13df-4a2e-85c8-2d152ba0f976",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "701139d8-6615-4c0c-9c94-2bdd74d0e398",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "504585ec-8d9c-487c-b919-a0fff9c7b8c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "13fb6d58-13df-4a2e-85c8-2d152ba0f976",
              "701139d8-6615-4c0c-9c94-2bdd74d0e398",
              "504585ec-8d9c-487c-b919-a0fff9c7b8c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 375,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1ac51956-b366-4d2c-885f-d02f6770eb66",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 633,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(updateQuote._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0d727acc-9e81-4e16-994e-552c3de095fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a9950bb6-1523-4614-8f66-8957185950a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/quotes/${updateQuote._id}sss`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"No quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "52374c0b-6c7b-4b35-9675-48da810a85bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "updateQuote.purchasePrices = \"sd235523\";\nrequest(app)\n  .patch(`/api/quotes/${updateQuote._id}`)\n  .send(updateQuote)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchasePrices).toBe(\n      \"There is an issue with the quote's purchase prices\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "18b9df46-e2c5-4cf3-8fdf-d1f73ec86232",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d727acc-9e81-4e16-994e-552c3de095fa",
              "a9950bb6-1523-4614-8f66-8957185950a9",
              "52374c0b-6c7b-4b35-9675-48da810a85bd",
              "18b9df46-e2c5-4cf3-8fdf-d1f73ec86232"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 996,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b96fcaa9-969e-46ab-a7e8-f19d85ee9425",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\quotes.test.js",
            "file": "\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.customer.name).toBe(customers[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d88a5fe6-4796-4038-b745-4401015a3152",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6cfb88d6-67b1-44fd-a934-263c2fcb3f71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/quotes/${quotes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.quote).toBe(\"There was no quote found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2d33ab06-cc61-45e9-b693-4ab9436bea2c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d88a5fe6-4796-4038-b745-4401015a3152",
              "6cfb88d6-67b1-44fd-a934-263c2fcb3f71",
              "2d33ab06-cc61-45e9-b693-4ab9436bea2c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 368,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "6de82302-6ef3-4d0e-b574-1c068f10b9fc",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
        "file": "\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 561,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5a58e056-7e28-4603-bdc9-5cbece919503",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5060c7b0-0fc5-4e54-9361-d11904a53b4c",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
            "file": "\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 173,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "PurchaseType.remove({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "a4ecb4ba-2021-4e9b-8b77-78ef4506f68a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "ea85c0fc-c73a-4457-8d71-e9a1a949692a",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 180,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d1c912b-d8c3-4fd1-9372-506d089a1b8f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1d1c912b-d8c3-4fd1-9372-506d089a1b8f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 180,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "f6a4ed8b-87ac-4313-811e-ffefa48f5e02",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 266,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findOne({ type: \"Resale\" })\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2368771c-b103-4a6c-9dd8-85c5c90c01d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .post(\"/api/settings/purchasetypes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c57130e-3af0-45f6-8861-e43f7d10fb36",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2368771c-b103-4a6c-9dd8-85c5c90c01d5",
                  "0c57130e-3af0-45f6-8861-e43f7d10fb36"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 356,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "56ee2584-234e-4153-b011-eea4138b1fdb",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 178,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f6392e76-2080-477c-92e5-1daa5ed8acac",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .get(\n    `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n  )\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\n      \"There was no purchase type found\"\n    );\n  })\n  .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "63fde724-5812-4aa4-8b73-55cff39a03e6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f6392e76-2080-477c-92e5-1daa5ed8acac",
                  "63fde724-5812-4aa4-8b73-55cff39a03e6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 268,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "c5944da1-e450-4d63-8116-676e68e6a9e2",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 265,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Resale\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(\"Resale\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9ac76b50-bfd3-41cc-84f4-af68c39c7bc3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 177,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"Resale\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "361876a4-59c4-402f-9f6b-8fae000d9c0b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 181,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Purchase type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[1]._id)\n      .then(purchaseType => {\n        expect(purchaseType.type).toBe(purchaseTypes[1].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dca0f7d0-ee32-4765-a8c3-ad27151ed1f9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9ac76b50-bfd3-41cc-84f4-af68c39c7bc3",
                  "361876a4-59c4-402f-9f6b-8fae000d9c0b",
                  "dca0f7d0-ee32-4765-a8c3-ad27151ed1f9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 623,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "19dcc7c6-1c6f-477b-a863-4d1ea42a9376",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\tests\\settings.test.js",
                "file": "\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 268,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(purchaseTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "366d3307-1298-4c6f-a3c8-56b23f97189e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 177,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(app)\n  .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.purchaseType).toBe(\"No purchase type found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    PurchaseType.findById(purchaseTypes[0]._id)\n      .then(purchaseType => {\n        expect(purchaseType).toBeTruthy();\n        expect(purchaseType.type).toBe(purchaseTypes[0].type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "755ada2e-751c-4a35-a5a3-da9072745109",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "366d3307-1298-4c6f-a3c8-56b23f97189e",
                  "755ada2e-751c-4a35-a5a3-da9072745109"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 445,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9d788479-d730-4940-8265-43b898ef44ea",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
        "file": "\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 570,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "10c16177-67e9-41e9-b8a6-3993d73436ed",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Todo.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var todoOne = new Todo(todos[0]).save();\n    var todoTwo = new Todo(todos[1]).save();\n    var todoThree = new Todo(todos[2]).save();\n    return Promise.all([todoOne, todoTwo, todoThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2b2ba291-8940-43f2-8579-d4c1285143cd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "004e7231-71c6-4102-8346-3962628e3c3b",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(2);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff3587c6-a057-4fc1-9e85-2d617ff7ab03",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/todos\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "82ac027a-3094-458a-b29d-df8622d43116",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff3587c6-a057-4fc1-9e85-2d617ff7ab03",
              "82ac027a-3094-458a-b29d-df8622d43116"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 183,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a6e6a844-c5e4-455f-b40f-0bc4c70cbdeb",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"The newest todo\");\n    expect(res.body.creator).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "eb6d446a-3c6c-4f4e-bf88-d2e0f6706877",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .send({\n    desc: \"The newest todo\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "22408f0a-0564-4d60-9e3e-2ea962794e59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/todos\")\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9cf30594-3b0f-4929-9cb8-d7115eace351",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb6d446a-3c6c-4f4e-bf88-d2e0f6706877",
              "22408f0a-0564-4d60-9e3e-2ea962794e59",
              "9cf30594-3b0f-4929-9cb8-d7115eace351"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f2484ea0-3528-4c1d-97bb-f5a4caefd9c1",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n    expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b318cba9-c8f2-43d4-8840-a8eb5f920eae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d80050b0-dff8-4342-9340-68f9d2ea1778",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b318cba9-c8f2-43d4-8840-a8eb5f920eae",
              "d80050b0-dff8-4342-9340-68f9d2ea1778"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 528,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1396c1a4-f470-4f17-9d62-ef1f9f7e29d3",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"a new description\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "377c6abd-ecf8-43aa-b830-2e0cf471b0da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    desc: \"a new description\",\n    creator: users[1]._id\n  })\n  .expect(401)\n  .expect(res => {\n    expect(res.body.desc).toBeFalsy();\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d73e2b89-31d7-4c95-a5ee-38a6d786b869",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .send({\n    desc: \"\",\n    creator: users[1]._id\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.desc).toBe(\"Todo description is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "811b46ea-ddf9-47cf-87e4-32d3b55aa205",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "377c6abd-ecf8-43aa-b830-2e0cf471b0da",
              "d73e2b89-31d7-4c95-a5ee-38a6d786b869",
              "811b46ea-ddf9-47cf-87e4-32d3b55aa205"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "40865bc8-0c87-40ba-b392-6694546ac295",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\todos.test.js",
            "file": "\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[1].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.desc).toBe(todos[0].desc);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d29d8ce1-cf32-4f57-9482-9d6f3814599e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/todos/${todos[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.todo).toBe(\"You cannot access this todo\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bdad006e-f9cb-4f61-b137-1df647b26931",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d29d8ce1-cf32-4f57-9482-9d6f3814599e",
              "bdad006e-f9cb-4f61-b137-1df647b26931"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "3a7acc8f-e242-423f-aeb3-8cdabf3b9b9b",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
        "file": "\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.remove({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9e2658ca-a91d-41e1-92a8-a372f2376bf1",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "63a17e37-4b81-498f-a00c-6e03b894791e",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(users.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ca7c4424-c2e1-4471-9afd-4d4ecb907e0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ca7c4424-c2e1-4471-9afd-4d4ecb907e0f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 178,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d35afe5b-9667-4e4d-8ae5-a21f069cc93b",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(newUser.username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.firstName).toBe(newUser.firstName);\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "df175f60-e62b-4dc8-9281-d60bafa97f4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nnewUser.validated = \"hello\";\nrequest(app)\n  .post(\"/api/users\")\n  .set(\"Authorization\", users[0].token)\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "b5b093e9-5284-43d8-af83-08c1a23e47b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df175f60-e62b-4dc8-9281-d60bafa97f4f",
              "b5b093e9-5284-43d8-af83-08c1a23e47b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 815,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b582e3a3-9008-4be5-a6bd-b96766eacc13",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff1404dc-dc3b-4957-942b-10ed59d32a52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/users/${users[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "155a8884-e2e8-4ef3-9a57-dee042216c0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff1404dc-dc3b-4957-942b-10ed59d32a52",
              "155a8884-e2e8-4ef3-9a57-dee042216c0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "5e8bfd63-16ad-4200-b8f7-1f3e8a7cecde",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "users[1].validated = true;\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(200)\n  .expect(res => {\n    expect(res.body.username).toBe(users[1].username);\n    expect(res.body.validated).toBe(true);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fa11bb07-2871-47fe-af11-9464c2b53198",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/users/${users[1]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send(users[1])\n  .expect(400)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Invalid ID\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0b5e082a-b144-4336-bf4f-5afe21f63439",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"Brian\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Sr\",\n  username: \"blpsr\",\n  password: \"thePassword\",\n  email: \"gbr@test.com\",\n  phone: \"5559991224\",\n  title: \"Manager\",\n  type: \"Staff\",\n  validated: \"someWrongValidation\"\n};\nrequest(app)\n  .patch(`/api/users/${users[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user.validated).toBe(true);\n        expect(user.firstName).toBe(\"Brian\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "017e267e-f253-420c-bf27-b9ece9e74ff0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa11bb07-2871-47fe-af11-9464c2b53198",
              "0b5e082a-b144-4336-bf4f-5afe21f63439",
              "017e267e-f253-420c-bf27-b9ece9e74ff0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 541,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fc91a126-888e-4d7e-a9bd-f939369dc102",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\users.test.js",
            "file": "\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[0]._id.toHexString())\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9c2c1688-e874-430e-accd-aef207a33e62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/users/${users[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n    expect(res.body.username).not.toBe(users[1].username);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    User.findById(users[1]._id.toHexString())\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.username).toBe(users[1].username);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "fe0a9d05-0c8c-4ec7-98d6-375130b87256",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c2c1688-e874-430e-accd-aef207a33e62",
              "fe0a9d05-0c8c-4ec7-98d6-375130b87256"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 442,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}