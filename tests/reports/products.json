{
  "stats": {
    "suites": 12,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-24T00:02:53.348Z",
    "end": "2019-03-24T00:03:04.105Z",
    "duration": 10757,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a13866e8-e689-4c33-8646-12afcc4b855f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3542784b-be1d-46be-82b8-dd290c037558",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1874,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f50b45ff-de04-4399-849e-eb5f2dd29431",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 185,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ProductType.deleteMany({})\n  .then(() => {\n    var modification = new ProductType(productTypes[0]).save();\n    var container = new ProductType(productTypes[1]).save();\n    var rentalModification = new ProductType(productTypes[2]).save();\n    var delivery = new ProductType(productTypes[3]).save();\n    var pickup = new ProductType(productTypes[4]).save();\n    return Promise.all([\n      modification,\n      container,\n      rentalModification,\n      delivery,\n      pickup\n    ]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d3701fe9-96c7-41cb-8693-3fdd5996de33",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "116fddb6-dc69-43eb-b112-6696fbdafae2",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    // check to see if product types array exists.\n    expect(res.body.length).toBe(5);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d6898612-2093-416d-9c31-8bd6de8c3db9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6898612-2093-416d-9c31-8bd6de8c3db9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "efec953b-fffc-42a3-93de-8e4755fcfc39",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProductType)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(newProductType.type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result.type).toBe(newProductType.type);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "6a6e12bf-eb06-40e6-85be-1bdaac7bea15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products/types\")\n  .set(\"Authorization\", users[0].token)\n  .send({ type: \"\" })\n  .expect(400)\n  .expect(res => {\n    // check to see if new product type exists.\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    ProductType.findOne({ type: newProductType.type })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8a3efc46-7033-4cc6-a893-3eecaf38c55b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a6e12bf-eb06-40e6-85be-1bdaac7bea15",
              "8a3efc46-7033-4cc6-a893-3eecaf38c55b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a043fb0f-a54d-4fbd-8db0-9cdcd6af2ad5",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ca2c5054-3c45-4c5e-a806-5abf0cdc3033",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "550d4c2a-651f-4833-9fc7-f52f8a83c065",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ca2c5054-3c45-4c5e-a806-5abf0cdc3033",
              "550d4c2a-651f-4833-9fc7-f52f8a83c065"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 274,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d03139d1-f06c-41f3-bf17-459ae9d4ba97",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"new modification\"\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(\"new modification\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "21eb501a-af5b-47c5-bd09-36fdcc6b5fdd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"Type is required\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b1e322ae-7ebc-4122-92d4-e236d540c9fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"container\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"That type is already being used\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7c811e30-5071-494b-9ce4-db9dcfb12ab8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    type: \"some new mod\"\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"No product found with that ID in the URL\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9112fe63-038c-4090-8775-323bf1c9ef5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "21eb501a-af5b-47c5-bd09-36fdcc6b5fdd",
              "b1e322ae-7ebc-4122-92d4-e236d540c9fb",
              "7c811e30-5071-494b-9ce4-db9dcfb12ab8",
              "9112fe63-038c-4090-8775-323bf1c9ef5e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 629,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d7bdb0a2-28c4-4a27-879c-7bcc9a43a879",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.type).toBe(productTypes[0].type);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ProductType.findById(productTypes[0]._id.toHexString())\n      .then(type => {\n        expect(type).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "7d6e6a9e-f2dc-4d95-bffe-4b1e5fc6f777",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.type).toBe(\"There was no product type found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bf63202d-3eca-47e0-a076-c438c45967fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(404)\n  .expect(res => {\n    expect(res.body.type).toBe(\n      \"Unable to find and remove the product type\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "472a44ff-c674-406e-b96e-eecaa10cc467",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d6e6a9e-f2dc-4d95-bffe-4b1e5fc6f777",
              "bf63202d-3eca-47e0-a076-c438c45967fa",
              "472a44ff-c674-406e-b96e-eecaa10cc467"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "758595df-6b96-48cb-9755-0ab5fb48b4ed",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
        "file": "\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "889b80ca-e35f-42ed-bfd8-c610b0bcc178",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca4b9a45-aeae-49a5-980f-0dcc73a2e10d",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 275,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e75552e4-e5b0-4765-84bd-d29efb4533ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e75552e4-e5b0-4765-84bd-d29efb4533ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f2195cad-ea01-48e7-8d45-c4d97420043f",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(newProduct.name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4d5faf7b-6ac6-4aa7-986a-9651755923c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct.name = \"\";\nnewProduct.shortName = \"\";\nnewProduct.rental = \"\";\nnewProduct.type = \"\";\nrequest(app)\n  .post(\"/api/products\")\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "68df6079-b71f-4fd5-b49e-d61bbc578ae1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4d5faf7b-6ac6-4aa7-986a-9651755923c9",
              "68df6079-b71f-4fd5-b49e-d61bbc578ae1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 539,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "073b6de9-dabe-48f8-882d-461a8ac9c655",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dbe67b7b-479c-4a7f-a364-7b673ec55283",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b717b832-0a0f-449e-a88e-9ef01147a2ee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbe67b7b-479c-4a7f-a364-7b673ec55283",
              "b717b832-0a0f-449e-a88e-9ef01147a2ee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4667f14d-2038-4c4c-993d-baa005ac406d",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"40' Pickup\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "111fa1aa-6f26-4d11-9063-12fcfa9ab62d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"40' Pickup\",\n  shortName: \"40PU\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: false,\n  type: `${productTypes[0]._id.toHexString()}`\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"No product found.\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4048807f-b976-4709-a805-7ca58943ab78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newProduct = {\n  name: \"\",\n  shortName: \"\",\n  price: 110.0,\n  monthlyPrice: 0.0,\n  rental: \"\",\n  type: \"\"\n};\nrequest(app)\n  .patch(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .send(newProduct)\n  .expect(400)\n  .expect(res => {\n    // check to see if new product exists.\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.shortName).toBe(\"Short name is required\");\n    expect(res.body.rental).toBe(\"Must select a rental type\");\n    expect(res.body.type).toBe(\"Must select a product type\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check to see if it was inserted into db properly.\n    Product.findOne({ name: newProduct.name })\n      .then(result => {\n        expect(result).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "e4fc404e-cf33-4665-8feb-10be54a00920",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "111fa1aa-6f26-4d11-9063-12fcfa9ab62d",
              "4048807f-b976-4709-a805-7ca58943ab78",
              "e4fc404e-cf33-4665-8feb-10be54a00920"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 448,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b804a8bf-e089-4194-a19f-e89271aeca75",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\products.test.js",
            "file": "\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(products[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Product.findById(products[0]._id.toHexString())\n      .then(product => {\n        expect(product).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "49b09f37-d334-45cf-bbf9-5fa1b3dabe7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.product).toBe(\"There was no product found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "67ecd11c-5da8-4fee-b5d7-47b3a4486788",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "49b09f37-d334-45cf-bbf9-5fa1b3dabe7d",
              "67ecd11c-5da8-4fee-b5d7-47b3a4486788"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 353,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}