{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-23T23:00:06.064Z",
    "end": "2019-03-23T23:00:11.841Z",
    "duration": 5777,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9d140bb3-b414-4fdc-a26d-a8f17ffe2a3f",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "cb257dc6-950b-4325-b2ae-b681176a68b9",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
        "file": "\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1874,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "62fc04d6-7b63-4b40-8be4-d4e43affcdc3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "bd4666c2-4bb4-48f0-b879-29fe87a51a1d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d6987ace-a175-4a60-a8c4-ca79560f792c",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(customers.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ee1e1644-8c00-4886-86a3-7833e6148b9c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee1e1644-8c00-4886-86a3-7833e6148b9c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 212,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "42c37b15-0ff5-405e-8af5-26dc573960f1",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newCustomer)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(newCustomer.name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8a88aed2-7fb3-4da1-828a-8818e735cca6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/customers\")\n  .set(\"Authorization\", users[0].token)\n  .send(badCustomer)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findOne({ name: newCustomer.name })\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "f4082b5c-7e97-4a88-af5f-9489fd3b410e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a88aed2-7fb3-4da1-828a-8818e735cca6",
              "f4082b5c-7e97-4a88-af5f-9489fd3b410e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 661,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c5233191-7209-45cd-a1c8-31084e855176",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n    expect(res.body.lastViewed).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "60180201-9a02-442a-9936-552b45798887",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a204678c-0d40-4701-97e3-4db6b4e5f9d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "60180201-9a02-442a-9936-552b45798887",
              "a204678c-0d40-4701-97e3-4db6b4e5f9d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 279,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "5d9d5616-3ca3-4529-9951-b707e8b3bb46",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"Jacob Belmont\",\n    address1: \"1234 Loopy St\",\n    address2: \"\",\n    city: \"Hanford\",\n    zipcode: \"93230\",\n    state: \"CA\",\n    phone: \"559-444-4444\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"another@fake.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: false,\n    flagReason: \"\",\n    lastViewed: null\n  })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Jacob Belmont\");\n    expect(res.body.isFlagged).toBe(false);\n    expect(res.body.flagReason).toBe(\"\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[1]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        expect(customer.name).toBe(\"Jacob Belmont\");\n        expect(customer.isFlagged).toBe(false);\n        expect(customer.flagReason).toBe(\"\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "9a4d2edb-715d-4f3b-87f0-455daf81a43f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[2]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({\n    name: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    zipcode: \"\",\n    state: \"\",\n    phone: \"\",\n    ext: \"123\",\n    fax: \"559-444-4448\",\n    email: \"failemail.com\",\n    rdp: \"\",\n    notes: \"Customer requires quote everytime before orders\",\n    isFlagged: \"messedup\",\n    flagReason: \"Do not rent, patient hasn't paid bill.\",\n    lastViewed: null\n  })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.name).toBe(\"Name is required\");\n    expect(res.body.address).toBe(\"Address is required\");\n    expect(res.body.city).toBe(\"City is required\");\n    expect(res.body.zipcode).toBe(\"Zipcode is required\");\n    expect(res.body.state).toBe(\"State is required\");\n    expect(res.body.phone).toBe(\"Phone is required\");\n    expect(res.body.email).toBe(\"Email is invalid\");\n    expect(res.body.isFlagged).toBe(\n      \"You must select whether the customer has a flag or not\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "394b187c-3b7a-4c0e-9297-1865c9eff0b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .send({})\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a4011fe7-dd6c-4237-a0db-58050c23b222",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a4d2edb-715d-4f3b-87f0-455daf81a43f",
              "394b187c-3b7a-4c0e-9297-1865c9eff0b4",
              "a4011fe7-dd6c-4237-a0db-58050c23b222"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 456,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4c8618bf-7f8e-42fb-9b6f-c828270eaf02",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\customers.test.js",
            "file": "\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.name).toBe(customers[0].name);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "a1de8dc0-37d2-4b6e-a0a2-c4a00858ee80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/customers/${customers[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Customer.findById(customers[0]._id)\n      .then(customer => {\n        expect(customer).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "aa07791a-7ee0-48d3-becf-aa6a8fa9f6c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1de8dc0-37d2-4b6e-a0a2-c4a00858ee80",
              "aa07791a-7ee0-48d3-becf-aa6a8fa9f6c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}