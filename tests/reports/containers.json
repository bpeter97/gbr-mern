{
  "stats": {
    "suites": 11,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-23T22:56:04.694Z",
    "end": "2019-03-23T22:56:22.861Z",
    "duration": 18167,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "bc866a8d-06ec-44d8-a9e4-400957d965cb",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e3a66fa3-56c1-4591-8c21-daf960a23260",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
        "file": "\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1846,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1acc3903-0e41-48a3-98a7-fca787ba8526",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f4cbe2b8-605d-4354-8624-4d8c4c5deb5d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2a8a960f-d004-4e72-8bad-232f77305e40",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c7a1ad72-d939-416e-ba98-6052b15f0585",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d41b2bfd-5d98-47ac-b1c5-18eff8b0328f",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 211,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4e980670-3a1f-4f86-88f0-ee9ab262a247",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e980670-3a1f-4f86-88f0-ee9ab262a247"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 211,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "757d8c3c-2dfc-4a14-8f3d-b3efddaa547e",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 364,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainerSize)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "01413baa-0b62-4dfc-999c-985e53dbf3cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) return done(err);\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "ca9a59fe-a226-4843-9f86-570c2bfd6b4c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "01413baa-0b62-4dfc-999c-985e53dbf3cd",
              "ca9a59fe-a226-4843-9f86-570c2bfd6b4c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 544,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4f598d40-0149-4bea-b83e-a18017a54327",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d6757f66-5e81-4359-863d-cb6e6235be84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5b9911af-e221-4b37-b5ea-588d7a249ea5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6757f66-5e81-4359-863d-cb6e6235be84",
              "5b9911af-e221-4b37-b5ea-588d7a249ea5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "68e8ba6a-0445-4823-ade7-d7e48e2b1328",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "245ef914-c3b0-4f87-b0d4-de75c2ccc157",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "8cd08d1c-8562-4c67-808a-b31b8812dc82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b6a2a7bf-b7b2-4392-bfc4-aab8d189ea0b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "39421713-a74f-448d-8b07-9130451370b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "245ef914-c3b0-4f87-b0d4-de75c2ccc157",
              "8cd08d1c-8562-4c67-808a-b31b8812dc82",
              "b6a2a7bf-b7b2-4392-bfc4-aab8d189ea0b",
              "39421713-a74f-448d-8b07-9130451370b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 809,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4ca3876e-cb86-4ad0-8750-a8cd1392f0f7",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "67936676-ad7b-4ae8-8688-3dd276d5e68f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "3c08fa7e-0e57-48ef-bbdd-8739afef7494",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67936676-ad7b-4ae8-8688-3dd276d5e68f",
              "3c08fa7e-0e57-48ef-bbdd-8739afef7494"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 445,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "58afaf0f-7eb0-402a-8c47-5de06f251f3f",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cb17d2bd-5de5-4133-bc4c-7f35c51458cb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb17d2bd-5de5-4133-bc4c-7f35c51458cb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0a10e4ed-db02-45bd-8f1b-f322459fd507",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bd28cf84-6dd6-4986-834e-0e0b6d9b4abe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "1f44add3-2a0d-4348-9e33-c7952b65ce6f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bd28cf84-6dd6-4986-834e-0e0b6d9b4abe",
              "1f44add3-2a0d-4348-9e33-c7952b65ce6f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9a3ede75-7cde-4b27-8a28-6124b3365ff7",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "824c6208-a325-4ee0-a331-b55ec4903216",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e1503daf-c979-41f5-ab3c-fc9872ceda87",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "824c6208-a325-4ee0-a331-b55ec4903216",
              "e1503daf-c979-41f5-ab3c-fc9872ceda87"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 357,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "603c087c-2d17-4695-ae58-6000b72a2c66",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 551,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "03849187-7a6f-4ca1-909f-12a1a32c3607",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: \"\",\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  rentalResale: \"\",\n  currentAddress: \"\",\n  currentlyRented: \"\",\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a4237018-4742-4675-85f9-48e23be410e7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: containers[1].size.toHexString(),\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: containers[1].stats.toHexString(),\n  currentRentee: null,\n  previousRentees:\n    \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n  currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n  currentlyRented: false\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "14abd185-dad4-48ce-8d50-e57474a675e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "03849187-7a6f-4ca1-909f-12a1a32c3607",
              "a4237018-4742-4675-85f9-48e23be410e7",
              "14abd185-dad4-48ce-8d50-e57474a675e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 739,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "67fee512-8f1f-4239-ae38-cb7e96b6d8a4",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
            "file": "\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "5e27092f-abd1-45d1-8546-3f9a49640f11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3f5f028e-36f7-4880-bd0a-a662652423e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5e27092f-abd1-45d1-8546-3f9a49640f11",
              "3f5f028e-36f7-4880-bd0a-a662652423e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}