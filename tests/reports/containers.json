{
  "stats": {
    "suites": 11,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-24T04:08:09.178Z",
    "end": "2019-07-24T04:08:26.770Z",
    "duration": 17592,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ce4c8cdd-8199-4335-9eed-0e12448838f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d2cdc650-6525-4b09-a3f3-bfd4618c5eb0",
          "title": "CONTAINERS",
          "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
          "file": "\\tests\\containers.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: populateUsers",
              "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
              "timedOut": false,
              "duration": 2039,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "8b25fd71-593b-4d0e-8b3c-20f4661890dd",
              "parentUUID": "d2cdc650-6525-4b09-a3f3-bfd4618c5eb0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainerSizes",
              "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
              "timedOut": false,
              "duration": 175,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "7c54138b-16cb-4437-8222-7998c1371dea",
              "parentUUID": "d2cdc650-6525-4b09-a3f3-bfd4618c5eb0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainerStats",
              "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
              "timedOut": false,
              "duration": 179,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "82508db8-3726-4719-9349-77d18b48264f",
              "parentUUID": "d2cdc650-6525-4b09-a3f3-bfd4618c5eb0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainers",
              "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
              "timedOut": false,
              "duration": 178,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "b2e393f8-ed7b-4322-971c-5d4d6142efc2",
              "parentUUID": "d2cdc650-6525-4b09-a3f3-bfd4618c5eb0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b405fbc-a961-4ef4-bbbf-60ef19ea9a41",
              "title": "GET /containers/sizes",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of container sizes",
                  "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "94996562-b1f7-46e3-a962-5ee781342f5e",
                  "parentUUID": "6b405fbc-a961-4ef4-bbbf-60ef19ea9a41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94996562-b1f7-46e3-a962-5ee781342f5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 207,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "159b5988-ca64-4aac-9208-18fad5ca59d0",
              "title": "POST /containers/sizes",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new container size",
                  "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                  "timedOut": false,
                  "duration": 370,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainerSize)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"20C\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "a8adac5a-b773-46f4-b09e-596569c26053",
                  "parentUUID": "159b5988-ca64-4aac-9208-18fad5ca59d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new container size with invalid input",
                  "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(\"/api/containers/sizes\")\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) return done(err);\n    ContainerSize.findOne({ size: \"20C\" })\n      .then(size => {\n        expect(size).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "9ce1e4f5-1fdf-40ae-9ded-aafe6c62463f",
                  "parentUUID": "159b5988-ca64-4aac-9208-18fad5ca59d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8adac5a-b773-46f4-b09e-596569c26053",
                "9ce1e4f5-1fdf-40ae-9ded-aafe6c62463f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2ae2f218-53d1-4c69-a547-740bcf4109fe",
              "title": "GET /containers/sizes/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a specific container size",
                  "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "8be3fcdd-76f5-4993-bef1-fb32056bb520",
                  "parentUUID": "2ae2f218-53d1-4c69-a547-740bcf4109fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return a specific container size with invalid :id",
                  "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                  "timedOut": false,
                  "duration": 497,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "eef75b98-6ef3-4eb1-8bf5-b345eb185ae3",
                  "parentUUID": "2ae2f218-53d1-4c69-a547-740bcf4109fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8be3fcdd-76f5-4993-bef1-fb32056bb520",
                "eef75b98-6ef3-4eb1-8bf5-b345eb185ae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "53fb08d2-a68a-4df2-bcb0-1a3a8f051a65",
              "title": "PATCH /containers/sizes/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should patch a container size successfully",
                  "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                  "timedOut": false,
                  "duration": 348,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"10\" })\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(\"10\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"10\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "9f30ea6d-17af-47b6-85f2-e63adb341fad",
                  "parentUUID": "53fb08d2-a68a-4df2-bcb0-1a3a8f051a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not patch a container size with errors",
                  "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                  "timedOut": false,
                  "duration": 178,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"Size is required\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        expect(containerSize.size).toBe(\"20\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "df220529-9602-4cf8-b83c-3e48123b0c1b",
                  "parentUUID": "53fb08d2-a68a-4df2-bcb0-1a3a8f051a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not patch a container size with invalid ID",
                  "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "032c2bf0-577c-49ff-b2db-743bcd1c4276",
                  "parentUUID": "53fb08d2-a68a-4df2-bcb0-1a3a8f051a65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not patch a container size with size that exists",
                  "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                  "timedOut": false,
                  "duration": 175,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send({ size: \"40\" })\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"That size already exists\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "0c5ade4b-ad12-4ef6-8b49-c79eaeefa368",
                  "parentUUID": "53fb08d2-a68a-4df2-bcb0-1a3a8f051a65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f30ea6d-17af-47b6-85f2-e63adb341fad",
                "df220529-9602-4cf8-b83c-3e48123b0c1b",
                "032c2bf0-577c-49ff-b2db-743bcd1c4276",
                "0c5ade4b-ad12-4ef6-8b49-c79eaeefa368"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 787,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "9b1d3137-7c5c-4f6b-a099-452d3cfa98ab",
              "title": "DELETE /containers/sizes/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete the container size",
                  "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                  "timedOut": false,
                  "duration": 262,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.size).toBe(containerSizes[0].size);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "3a54b102-618c-4810-8fe5-eaefd6571c88",
                  "parentUUID": "9b1d3137-7c5c-4f6b-a099-452d3cfa98ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete the container size with invalid id",
                  "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                  "timedOut": false,
                  "duration": 185,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.size).toBeTruthy();\n    expect(res.body.size).toBe(\"There was no size found\");\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    ContainerSize.findById(containerSizes[0]._id)\n      .then(containerSize => {\n        expect(containerSize).toBeTruthy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "911baef9-0e45-4aef-ad07-f985639b9269",
                  "parentUUID": "9b1d3137-7c5c-4f6b-a099-452d3cfa98ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a54b102-618c-4810-8fe5-eaefd6571c88",
                "911baef9-0e45-4aef-ad07-f985639b9269"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 447,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "75507c2c-772f-4077-b466-9dfc0006fb89",
              "title": "GET /containers/",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of containers",
                  "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(3);\n    // Check to see if each container has a size and stats.\n    expect(res.body[0].size).not.toBe(null);\n    expect(res.body[1].size).not.toBe(null);\n    expect(res.body[2].size).not.toBe(null);\n    expect(res.body[0].stats).not.toBe(null);\n    expect(res.body[1].stats).not.toBe(null);\n    expect(res.body[2].stats).not.toBe(null);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "9f89e4af-acff-4edf-aeca-2c189b547fc7",
                  "parentUUID": "75507c2c-772f-4077-b466-9dfc0006fb89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f89e4af-acff-4edf-aeca-2c189b547fc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3e326213-72a2-42a1-854d-1b145e18b03a",
              "title": "POST /containers/",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new container",
                  "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                  "timedOut": false,
                  "duration": 349,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    // Check to see if each container has a size and stats.\n    expect(res.body.size).not.toBe(null);\n    expect(res.body.stats).not.toBe(null);\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeTruthy();\n        expect(container.size).not.toBe(null);\n        expect(container.stats).not.toBe(null);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "e20fbc7e-bec0-45f9-ba4b-551b36279e64",
                  "parentUUID": "3e326213-72a2-42a1-854d-1b145e18b03a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new container with validation errors",
                  "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                  "timedOut": false,
                  "duration": 177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "newContainer.rentalResale = \"\";\nnewContainer.hasOnBoxNumbers = 123;\nnewContainer.hasShelves = 123;\nnewContainer.hasSigns = 123;\nnewContainer.isPainted = 123;\nrequest(app)\n  .post(\"/api/containers\")\n  .set(\"Authorization\", users[0].token)\n  .send(newContainer)\n  // .expect(200)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    // Check to see if each container has a size and stats.\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n    expect(res.body.hasShelves).toBe(\n      \"You must select whether the container has shelves or not\"\n    );\n    expect(res.body.isPainted).toBe(\n      \"You must select whether the container is painted or not\"\n    );\n    expect(res.body.hasOnBoxNumbers).toBe(\n      \"You must select whether the container has GBR numbers or not\"\n    );\n    expect(res.body.hasSigns).toBe(\n      \"You must select whether the container has signs or not\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      done(err);\n    }\n    Container.findOne({ serialNumber: \"123456727\" })\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "42fa88bc-7577-447a-86a6-b9c1d2d64425",
                  "parentUUID": "3e326213-72a2-42a1-854d-1b145e18b03a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e20fbc7e-bec0-45f9-ba4b-551b36279e64",
                "42fa88bc-7577-447a-86a6-b9c1d2d64425"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 526,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "0e125622-63aa-41b5-9f1e-3b2a529cfb7f",
              "title": "GET /containers/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a container",
                  "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "c63f9329-48a9-473e-a71d-6dba9d7238cd",
                  "parentUUID": "0e125622-63aa-41b5-9f1e-3b2a529cfb7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return a container with invalid id",
                  "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/containers/${containers[0]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "45ecaf96-bfba-4e39-b143-8d35ad7d18e4",
                  "parentUUID": "0e125622-63aa-41b5-9f1e-3b2a529cfb7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c63f9329-48a9-473e-a71d-6dba9d7238cd",
                "45ecaf96-bfba-4e39-b143-8d35ad7d18e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 345,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ab7d9920-b808-43ca-b31c-f4f1b0df9059",
              "title": "PATCH /containers/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a container",
                  "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                  "timedOut": false,
                  "duration": 535,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: {\n    _id: containers[1].size.toHexString(),\n    size: \"40\"\n  },\n  serialNumber: containers[1].serialNumber,\n  hasShelves: true,\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"Rental\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: {\n    _id: containers[1].stats.toHexString(),\n    currentRentee: null,\n    previousRentees:\n      \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n    currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n    currentlyRented: false\n  }\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n    expect(res.body.hasSigns).toBe(patchData.hasSigns);\n    expect(res.body.hasShelves).toBe(patchData.hasShelves);\n    expect(res.body.isPainted).toBe(patchData.isPainted);\n    expect(res.body.isFlagged).toBe(patchData.isFlagged);\n    expect(res.body.flagReason).toBe(patchData.flagReason);\n    // Need to update stats object when patching a container!\n    expect(res.body.stats.currentAddress).toBe(\n      res.body.stats.currentAddress\n    );\n    expect(res.body.stats.currentRentee).toBe(null);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "c972df22-00ad-438b-8794-3ade05c2ee21",
                  "parentUUID": "ab7d9920-b808-43ca-b31c-f4f1b0df9059",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not patch a container with invalid fields",
                  "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "patchData = {\n  gbrNumber: containers[1].gbrNumber,\n  releaseNumber: containers[1].releaseNumber,\n  size: {},\n  serialNumber: containers[1].serialNumber,\n  hasShelves: \"true\",\n  isPainted: true,\n  hasOnBoxNumbers: true,\n  hasSigns: true,\n  rentalResale: \"\",\n  isFlagged: true,\n  flagReason: \"Container is super damaged\",\n  stats: {\n    _id: containers[1].stats.toHexString(),\n    currentRentee: null,\n    previousRentees:\n      \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n    currentAddress: \"\",\n    currentlyRented: \"\"\n  }\n};\nrequest(app)\n  .patch(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .send(patchData)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBeFalsy();\n    expect(res.body.size).toBe(\"Size is required\");\n    expect(res.body.currentlyRented).toBe(\n      \"You must select whether the container is currently rented\"\n    );\n    expect(res.body.currentAddress).toBe(\"Current address is required\");\n    expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "30c58655-92aa-4318-926d-95cca8add501",
                  "parentUUID": "ab7d9920-b808-43ca-b31c-f4f1b0df9059",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c972df22-00ad-438b-8794-3ade05c2ee21",
                "30c58655-92aa-4318-926d-95cca8add501"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 626,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3bb5f1af-c4e3-4b63-b94d-f9b011962fae",
              "title": "DELETE /containers/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\containers.test.js",
              "file": "\\tests\\containers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a container",
                  "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                  "timedOut": false,
                  "duration": 354,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(containers[1]._id.toHexString());\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Container.findById(containers[1]._id)\n      .then(container => {\n        expect(container).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "4711ea0f-9e1a-4f0a-84aa-39e8514d1390",
                  "parentUUID": "3bb5f1af-c4e3-4b63-b94d-f9b011962fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete a container with invalid ID",
                  "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                  "timedOut": false,
                  "duration": 94,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .delete(`/api/containers/${containers[1]._id}sss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.container).toBe(\"There was no container found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "bab6fe71-c310-4c35-a279-694b90d62b00",
                  "parentUUID": "3bb5f1af-c4e3-4b63-b94d-f9b011962fae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4711ea0f-9e1a-4f0a-84aa-39e8514d1390",
                "bab6fe71-c310-4c35-a279-694b90d62b00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 448,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "containers",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "tests/reports",
        "reportFilename": "containers"
      },
      "version": "4.0.1"
    }
  }
}