{
  "stats": {
    "suites": 5,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-23T23:00:43.655Z",
    "end": "2019-03-23T23:00:55.305Z",
    "duration": 11650,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "d190cd8b-0296-4f68-ba15-e436bcf8ba48",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f49bc090-b0ed-439c-89a8-8bbd8960b786",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
        "file": "\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 566,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "11e61d12-55af-499e-9322-9c8f2776cb62",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "73c0a54c-469b-42b6-a8dc-c331e26a918b",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 520,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(200)\n  .expect(res => {\n    // Check to see if body contains users information. If so,\n    // then the user's information was passed back meaning it succeeded.\n    expect(res.body.username).toBe(newUser.username);\n    expect(res.body.password).not.toBe(newUser.password);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeTruthy();\n        expect(user.password).not.toBe(newUser.password);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "20a333c4-a5fb-434a-ba87-324b8065aff9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Set invalid properties to newUser.\nnewUser.email = \"amessedupemail\";\nnewUser.phone = \"(559) 999-1111\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Must enter a valid email.\");\n    expect(res.body.phone).toBe(\n      \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n    );\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "4ae38dbb-67eb-40f6-a5d7-04e8cb01659e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = \"jboy@test.com\";\nnewUser.phone = \"5559992222\";\nnewUser.username = users[0].username;\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.username).toBe(\"Username already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // Check if user was saved in DB.\n    User.findOne({ email: newUser.email })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "11a425a3-126b-46be-92a3-5ac8725445f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "newUser.email = users[0].email;\nnewUser.phone = \"5559992222\";\nnewUser.username = \"jboy\";\nrequest(app)\n  .post(\"/api/register\")\n  .send(newUser)\n  .expect(400)\n  .expect(res => {\n    // Check to see if validation errors are there.\n    expect(res.body.email).toBe(\"Email already exists.\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    // If no errors during registration, check to see if newUser was\n    // stored in the database properly.\n    User.findOne({ username: newUser.username })\n      .then(user => {\n        expect(user).toBeFalsy();\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "0c4524fb-f0a9-49e8-be56-acd80d2cadc5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "20a333c4-a5fb-434a-ba87-324b8065aff9",
              "4ae38dbb-67eb-40f6-a5d7-04e8cb01659e",
              "11a425a3-126b-46be-92a3-5ac8725445f8",
              "0c4524fb-f0a9-49e8-be56-acd80d2cadc5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1060,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4e9850e0-da8e-489c-b6d5-40956b3c6c49",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"thePassword\"\n  })\n  .expect(200)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBe(true);\n    expect(res.body.token).toBeTruthy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d5493c51-23d5-4d0a-a971-a4106a13e720",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"wrongusername\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "250cc948-139d-4573-9f92-56153245ee92",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpj\",\n    password: \"theWrongPassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6cbf40d5-8305-4c8f-bba1-c3cc9b786168",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/login\")\n  .send({\n    username: \"blpsr\",\n    password: \"thePassword\"\n  })\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.success).toBeFalsy();\n    expect(res.body.token).toBeFalsy();\n    expect(res.body.login).toBe(\"Your account is not validated yet\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c8fca227-9984-483c-9b04-7036ec204d62",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d5493c51-23d5-4d0a-a971-a4106a13e720",
              "250cc948-139d-4573-9f92-56153245ee92",
              "6cbf40d5-8305-4c8f-bba1-c3cc9b786168",
              "c8fca227-9984-483c-9b04-7036ec204d62"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 658,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ae6e0034-f968-4185-bfe5-9c8faab66900",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.username).toBe(users[0].username);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4a2c785e-99bb-4c34-b956-6af35d7a5219",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.username).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "87f51f8f-9225-4ee6-a43a-df063f6ce030",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4a2c785e-99bb-4c34-b956-6af35d7a5219",
              "87f51f8f-9225-4ee6-a43a-df063f6ce030"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 100,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b883cb92-7014-432a-832b-2407918b65f9",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\defaults.test.js",
            "file": "\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"somename\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(users[0]._id.toHexString());\n    expect(res.body.firstName).toBe(\"somename\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ff29dc05-5d75-4578-aefc-43c81fe9578d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"test@test.com\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: true\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .expect(401)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.firstName).toBeFalsy();\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70a26ad2-9881-4a33-a48f-ec76f712d7e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "userData = {\n  firstName: \"newname\",\n  lastName: \"Peter\",\n  middleInitial: \"L\",\n  suffix: \"Jr\",\n  username: \"blpj\",\n  password: \"thePassword\",\n  email: \"bademail\",\n  phone: \"5559991234\",\n  title: \"Web Developer\",\n  type: \"Admin\",\n  validated: \"badvalidatedvalue\"\n};\nrequest(app)\n  .patch(\"/api/profile\")\n  .set(\"Authorization\", users[0].token)\n  .send(userData)\n  .expect(400)\n  .expect(res => {\n    // check to see if success & token has been created.\n    expect(res.body.email).toBe(\"Must enter a valid email\");\n    expect(res.body.validated).toBe(\n      \"You must select whether the user is validated\"\n    );\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b1694a09-9fb4-4ac7-8e8c-8f24c36b5476",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ff29dc05-5d75-4578-aefc-43c81fe9578d",
              "70a26ad2-9881-4a33-a48f-ec76f712d7e5",
              "b1694a09-9fb4-4ac7-8e8c-8f24c36b5476"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 285,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}