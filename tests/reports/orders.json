{
  "stats": {
    "suites": 10,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2019-08-01T01:57:06.781Z",
    "end": "2019-08-01T01:58:10.059Z",
    "duration": 63278,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d163eb48-64cf-4c5a-8245-7b3e882c4734",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "583d041e-a94f-4aae-8386-a68939fd5f60",
          "title": "ORDERS",
          "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
          "file": "\\tests\\orders.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook: populateUsers",
              "fullTitle": "ORDERS \"before each\" hook: populateUsers",
              "timedOut": false,
              "duration": 561,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "dbf6f5f7-68c4-493a-b547-9ea3f17e8c36",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateProducts",
              "fullTitle": "ORDERS \"before each\" hook: populateProducts",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "de9eb59a-1e7d-41fa-b2e3-d0fb62a2f68f",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populatePurchaseTypes",
              "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
              "timedOut": false,
              "duration": 172,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "fdd732c7-9d4e-4368-9ba0-4f3aa48225aa",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateCustomers",
              "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
              "timedOut": false,
              "duration": 173,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "653d50d9-12fe-4679-a1d3-35ebcbf24c11",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateRequestedProducts",
              "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "ff3ef6b4-856f-45ee-bb4f-ad46b5d32f75",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populatePurchasePrices",
              "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "9e6e8bc9-ebe6-4644-a77f-1a5de2b8e593",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainerSizes",
              "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
              "timedOut": false,
              "duration": 175,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "64788947-4dfc-413e-8668-f540679ea72b",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainerStats",
              "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
              "timedOut": false,
              "duration": 184,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "e0581b24-d098-41ab-9728-221060e85dcf",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateContainers",
              "fullTitle": "ORDERS \"before each\" hook: populateContainers",
              "timedOut": false,
              "duration": 176,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "d7162990-0eb1-4ac9-ae24-d8633a7c959f",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateOrders",
              "fullTitle": "ORDERS \"before each\" hook: populateOrders",
              "timedOut": false,
              "duration": 174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "Order.deleteMany({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "8f7ec5f2-5425-4416-83a5-edc0b9cf55d1",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: populateOrderSignatures",
              "fullTitle": "ORDERS \"before each\" hook: populateOrderSignatures",
              "timedOut": false,
              "duration": 181,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "OrderSignature.deleteMany({})\n  .then(() => {\n    var orderSignatureOne = new OrderSignature(orderSignature).save();\n    return Promise.all([orderSignatureOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
              "err": {},
              "uuid": "d91e1927-aa11-4e23-a618-2ae4540731b5",
              "parentUUID": "583d041e-a94f-4aae-8386-a68939fd5f60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37b25eb8-02c9-45a0-9cee-1a2ea4d83766",
              "title": "GET /orders",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all orders that are not hidden",
                  "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                  "timedOut": false,
                  "duration": 750,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(orders.length);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "aad5d1ed-4a37-479d-8eec-ec2935593ccb",
                  "parentUUID": "37b25eb8-02c9-45a0-9cee-1a2ea4d83766",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return orders if the user is not logged in",
                  "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "6c698c96-d0e8-495e-b754-da153cbdafec",
                  "parentUUID": "37b25eb8-02c9-45a0-9cee-1a2ea4d83766",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aad5d1ed-4a37-479d-8eec-ec2935593ccb",
                "6c698c96-d0e8-495e-b754-da153cbdafec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 756,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f5c031ab-c135-488e-9711-546c1e717e0a",
              "title": "GET /orders/customer/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all of a customer's orders",
                  "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                  "timedOut": false,
                  "duration": 748,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "33008ca6-2303-4b7d-b8e0-9657904f0357",
                  "parentUUID": "f5c031ab-c135-488e-9711-546c1e717e0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return orders if user is not logged in",
                  "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "57b644d9-7361-4445-ab68-076e64c1b0b8",
                  "parentUUID": "f5c031ab-c135-488e-9711-546c1e717e0a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return orders if supplied an invalid ID",
                  "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "669055a6-e621-4685-83c5-10e88f8a197f",
                  "parentUUID": "f5c031ab-c135-488e-9711-546c1e717e0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33008ca6-2303-4b7d-b8e0-9657904f0357",
                "57b644d9-7361-4445-ab68-076e64c1b0b8",
                "669055a6-e621-4685-83c5-10e88f8a197f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 840,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3a75adb7-49d4-4f81-b4aa-06a793d2320e",
              "title": "GET /orders/user/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all of a user's created orders",
                  "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                  "timedOut": false,
                  "duration": 356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "7a3fd454-432a-45bd-8505-1074ce8cd2e2",
                  "parentUUID": "3a75adb7-49d4-4f81-b4aa-06a793d2320e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return orders if user is not logged in",
                  "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "7463474b-b249-481c-813f-c773e12120c4",
                  "parentUUID": "3a75adb7-49d4-4f81-b4aa-06a793d2320e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return orders if supplied an invalid ID",
                  "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "f02a12bc-81d2-49a3-96b2-0f2ebb480466",
                  "parentUUID": "3a75adb7-49d4-4f81-b4aa-06a793d2320e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a3fd454-432a-45bd-8505-1074ce8cd2e2",
                "7463474b-b249-481c-813f-c773e12120c4",
                "f02a12bc-81d2-49a3-96b2-0f2ebb480466"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 449,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1bbdedfd-cdaf-47a1-a947-ef2bd5ad1088",
              "title": "POST /orders",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create an order and return it",
                  "fullTitle": "ORDERS POST /orders should create an order and return it",
                  "timedOut": false,
                  "duration": 992,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "11f3ec39-4130-45f5-ab05-9b172b7092ba",
                  "parentUUID": "1bbdedfd-cdaf-47a1-a947-ef2bd5ad1088",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create an order if user is not logged in",
                  "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "4811b466-23ee-43a4-bd8f-a7c38f7c947c",
                  "parentUUID": "1bbdedfd-cdaf-47a1-a947-ef2bd5ad1088",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11f3ec39-4130-45f5-ab05-9b172b7092ba",
                "4811b466-23ee-43a4-bd8f-a7c38f7c947c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 996,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3c03b752-758f-495e-8e4f-b37c9771795d",
              "title": "GET /orders/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an order with the ID matching the provided ID",
                  "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                  "timedOut": false,
                  "duration": 353,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "dc7426d0-1555-4708-b7da-a186b6038eae",
                  "parentUUID": "3c03b752-758f-495e-8e4f-b37c9771795d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an order if not logged in",
                  "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "3dd48f6e-ba91-49c2-a275-bcbd24b87054",
                  "parentUUID": "3c03b752-758f-495e-8e4f-b37c9771795d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an order if supplied an invalid ID",
                  "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                  "timedOut": false,
                  "duration": 91,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "c05e73b4-7d02-436c-b73f-e590385c00a7",
                  "parentUUID": "3c03b752-758f-495e-8e4f-b37c9771795d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc7426d0-1555-4708-b7da-a186b6038eae",
                "3dd48f6e-ba91-49c2-a275-bcbd24b87054",
                "c05e73b4-7d02-436c-b73f-e590385c00a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 448,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ba926682-41f0-4154-82ea-94627be3409c",
              "title": "DELETE /orders/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete an order",
                  "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                  "timedOut": false,
                  "duration": 176,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "c101dd9a-34f5-45d8-bd98-70ff6981e371",
                  "parentUUID": "ba926682-41f0-4154-82ea-94627be3409c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete an order if not logged in",
                  "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "5277a896-dcdf-4c2d-bdc4-0c6113e79780",
                  "parentUUID": "ba926682-41f0-4154-82ea-94627be3409c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete an order with an invalid ID",
                  "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                  "timedOut": false,
                  "duration": 88,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "0d72e681-3c47-4ade-911d-ea1be1c813a4",
                  "parentUUID": "ba926682-41f0-4154-82ea-94627be3409c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c101dd9a-34f5-45d8-bd98-70ff6981e371",
                "5277a896-dcdf-4c2d-bdc4-0c6113e79780",
                "0d72e681-3c47-4ade-911d-ea1be1c813a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 268,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b7c1ff7f-4a1c-4125-9eb5-e0be58492df7",
              "title": "POST /orders/signature",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create and return a new OrderSignature",
                  "fullTitle": "ORDERS POST /orders/signature should create and return a new OrderSignature",
                  "timedOut": false,
                  "duration": 364,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(`/api/orders/signature`)\n  .send(newOrderSignature)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body).toBeTruthy();\n    expect(res.body.signature).toStrictEqual(signatureData);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findById(orders[0]._id)\n      .populate(\"signature\")\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.signature).toBeTruthy();\n        expect(order.signature.order.toHexString()).toBe(orders[0]._id);\n        done();\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "7c75a515-aa75-468c-a076-1ade6c8fff5c",
                  "parentUUID": "b7c1ff7f-4a1c-4125-9eb5-e0be58492df7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not create a new OrderSignature if not logged in",
                  "fullTitle": "ORDERS POST /orders/signature should not create a new OrderSignature if not logged in",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .post(`/api/orders/signature`)\n  .send(newOrderSignature)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "e0875e85-55fa-4e7a-841f-fc1555c8a901",
                  "parentUUID": "b7c1ff7f-4a1c-4125-9eb5-e0be58492df7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c75a515-aa75-468c-a076-1ade6c8fff5c",
                "e0875e85-55fa-4e7a-841f-fc1555c8a901"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 370,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "7eaad75a-39ad-496f-acf1-59ba9799fb15",
              "title": "GET /orders/signature/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an OrderSignature",
                  "fullTitle": "ORDERS GET /orders/signature/:id should return an OrderSignature",
                  "timedOut": false,
                  "duration": 183,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/signature/${orderSignature._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body).toBeTruthy();\n    expect(res.body.signature).toStrictEqual(signatureData);\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "dd14bb94-f40d-4b0d-8981-7b8cc4f4dce7",
                  "parentUUID": "7eaad75a-39ad-496f-acf1-59ba9799fb15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an OrderSignature with invalid ID",
                  "fullTitle": "ORDERS GET /orders/signature/:id should not return an OrderSignature with invalid ID",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/signature/${orderSignature._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body).toBeTruthy();\n    expect(res.body.signature).toStrictEqual(\n      \"The ID provided was invalid\"\n    );\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "95364ee1-4293-4c12-a878-be0dc8776f09",
                  "parentUUID": "7eaad75a-39ad-496f-acf1-59ba9799fb15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not return an OrderSignature if not logged in",
                  "fullTitle": "ORDERS GET /orders/signature/:id should not return an OrderSignature if not logged in",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .get(`/api/orders/signature/${orderSignature._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "710fdb89-8659-451c-a63b-d35b7bb5d723",
                  "parentUUID": "7eaad75a-39ad-496f-acf1-59ba9799fb15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd14bb94-f40d-4b0d-8981-7b8cc4f4dce7",
                "95364ee1-4293-4c12-a878-be0dc8776f09",
                "710fdb89-8659-451c-a63b-d35b7bb5d723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 279,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "76dc9f9d-5085-4002-bb4e-957b5504e816",
              "title": "DELETE /orders/signature/:id",
              "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
              "file": "\\tests\\orders.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a specific OrderSignature",
                  "fullTitle": "ORDERS DELETE /orders/signature/:id should delete a specific OrderSignature",
                  "timedOut": false,
                  "duration": 351,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/signature/${orderSignature._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body).toBeTruthy();\n    expect(res.body.signature).toStrictEqual(signatureData);\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    OrderSignature.findById(orderSignature._id)\n      .then(sig => {\n        expect(sig).not.toBeTruthy();\n        Order.findById(orders[0]._id)\n          .then(order => {\n            expect(order.signature).toBeUndefined();\n            done();\n          })\n          .catch(e => done(e));\n      })\n      .catch(e => done(e));\n  });",
                  "err": {},
                  "uuid": "35f55043-89fe-4d8f-ad4b-a7f771b273b0",
                  "parentUUID": "76dc9f9d-5085-4002-bb4e-957b5504e816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete an OrderSignature if not logged in",
                  "fullTitle": "ORDERS DELETE /orders/signature/:id should not delete an OrderSignature if not logged in",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/signature/${orderSignature._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "dd341f8a-0f8f-4710-a89d-ceaf922313f4",
                  "parentUUID": "76dc9f9d-5085-4002-bb4e-957b5504e816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not delete an OrderSignature with invalid ID",
                  "fullTitle": "ORDERS DELETE /orders/signature/:id should not delete an OrderSignature with invalid ID",
                  "timedOut": false,
                  "duration": 87,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request(app)\n  .del(`/api/orders/signature/${orderSignature._id}ssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body).toBeTruthy();\n    expect(res.body.signature).toStrictEqual(\n      \"The ID provided was invalid\"\n    );\n  })\n  .end(done);",
                  "err": {},
                  "uuid": "8c281e8b-88a4-4327-8c48-bf75da20270b",
                  "parentUUID": "76dc9f9d-5085-4002-bb4e-957b5504e816",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35f55043-89fe-4d8f-ad4b-a7f771b273b0",
                "dd341f8a-0f8f-4710-a89d-ceaf922313f4",
                "8c281e8b-88a4-4327-8c48-bf75da20270b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 441,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "orders",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "tests/reports",
        "reportFilename": "orders"
      },
      "version": "4.0.1"
    }
  }
}