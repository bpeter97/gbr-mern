{
  "stats": {
    "suites": 7,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-23T23:18:25.474Z",
    "end": "2019-03-23T23:19:05.734Z",
    "duration": 40260,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9353520c-b6e2-4b94-b6b7-8b72e9387a96",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "60126c12-cd93-46c0-b062-9768c309eccd",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
        "file": "\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 569,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "User.deleteMany({})\n  .then(() => {\n    // generate the hash/salted password for the users.\n    var userOne = new User(users[0]).save().then(user => {\n      users[0].token = user.generateAuthToken();\n    });\n    var userTwo = new User(users[1]).save().then(user => {\n      users[1].token = user.generateAuthToken();\n    });\n    var userThree = new User(users[2]).save();\n    var userFour = new User(users[3]).save();\n    return Promise.all([userOne, userTwo, userThree, userFour]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9baa6cf3-75af-4663-b0ae-1e1c8123b215",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Product.deleteMany({})\n  .then(() => {\n    var lockbox = new Product(products[0]).save();\n    var delivery = new Product(products[1]).save();\n    var container = new Product(products[2]).save();\n    return Promise.all([lockbox, delivery, container]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2ce82345-e96b-43dc-9998-8985fd021e71",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchaseType.deleteMany({})\n  .then(() => {\n    var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n    var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n    return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c0e70315-320f-4795-84d3-72895c768ce3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Customer.deleteMany({})\n  .then(() => {\n    var customerOne = new Customer(customers[0]).save();\n    var customerTwo = new Customer(customers[1]).save();\n    var customerThree = new Customer(customers[2]).save();\n    return Promise.all([customerOne, customerTwo, customerThree]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "7cb20262-cae6-4749-a48c-4d885afb798f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "RequestedProduct.deleteMany({})\n  .then(() => {\n    var requestedProductOne = new RequestedProduct(\n      requestedProducts[0]\n    ).save();\n    var requestedProductTwo = new RequestedProduct(\n      requestedProducts[1]\n    ).save();\n    return Promise.all([requestedProductOne, requestedProductTwo]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f1c6787a-4fdc-424f-91ac-7b624ffc4fd4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "PurchasePrices.deleteMany({})\n  .then(() => {\n    var ppOne = new PurchasePrices(purchasePrices[0]).save();\n    return Promise.all([ppOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5675004e-e1f3-4828-ba08-2bd334313b7d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 185,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerSize.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerSize(containerSizes[0]).save();\n    var fourty = new ContainerSize(containerSizes[1]).save();\n    var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "34543818-2d3c-41d4-b62f-770f7400a7a0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "ContainerStats.deleteMany({})\n  .then(() => {\n    var twenty = new ContainerStats(containerStats[0]).save();\n    var fourty = new ContainerStats(containerStats[1]).save();\n    var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "da623435-ca15-48e3-b4fb-a7d0a217f140",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Container.deleteMany({})\n  .then(() => {\n    var twenty = new Container(containers[0]).save();\n    var fourty = new Container(containers[1]).save();\n    var twentydoubledoors = new Container(containers[2]).save();\n    return Promise.all([twenty, fourty, twentydoubledoors]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0f3a0b44-7cd2-4fe0-963f-627d41282b63",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "Order.deleteMany({})\n  .then(() => {\n    var orderOne = new Order(orders[0]).save();\n    return Promise.all([orderOne]);\n  })\n  .then(() => done())\n  .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6b06f14e-ec9e-43d9-b87e-b3d0a62dd77f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "47e2cea5-0227-4189-9fcc-90cb116f79a2",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 758,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.length).toBe(orders.length);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ae3f19e3-10e9-4b33-b46b-fe6ac33e334b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(\"/api/orders\")\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d5b00a8b-1ea9-4890-8590-f9a956d93f7f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ae3f19e3-10e9-4b33-b46b-fe6ac33e334b",
              "d5b00a8b-1ea9-4890-8590-f9a956d93f7f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 764,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6039415b-92ef-4448-841b-467243d8fbbe",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 756,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d0c5128c-7da2-4a4f-a5bc-7526d92b02ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "87f49bbe-d998-4e76-8b21-18810c09a3bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.customer).toBe(\"There was no customer found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "55e02fd8-46e3-48f6-8fd5-2d27d5c83194",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d0c5128c-7da2-4a4f-a5bc-7526d92b02ba",
              "87f49bbe-d998-4e76-8b21-18810c09a3bc",
              "55e02fd8-46e3-48f6-8fd5-2d27d5c83194"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 853,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8fcc4c00-58be-4b4f-8cf5-e29f9a59d403",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 370,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body[0].createdBy._id).toBe(orders[0].createdBy);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d2d87490-f9d3-49f8-b708-af303c3ffb8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "761ae422-5c88-42cd-a0d9-eebd3ff56d08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/user/${users[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.user).toBe(\"There was no user found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "33cb82c8-54a2-4fdc-b2e7-c5588a8f135f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2d87490-f9d3-49f8-b708-af303c3ffb8f",
              "761ae422-5c88-42cd-a0d9-eebd3ff56d08",
              "33cb82c8-54a2-4fdc-b2e7-c5588a8f135f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 471,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "152f5e82-a392-46fe-9e98-1ba265c1b69e",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 1018,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body.job.name).toBe(\"Walmart Construction\");\n  })\n  .end(err => {\n    if (err) {\n      return done(err);\n    }\n    Order.findOne({\n      job: {\n        name: \"Walmart Construction\",\n        address: \"1733 S. Casablanca St\",\n        city: \"Visalia\",\n        zipcode: \"93292\"\n      }\n    })\n      .then(order => {\n        expect(order).toBeTruthy();\n        expect(order.job.name).toBe(\"Walmart Construction\");\n        done();\n      })\n      .catch(e => done(e));\n  });",
                "err": {},
                "isRoot": false,
                "uuid": "bda09f6d-30a7-4208-96fe-3c4ef5da08b4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .post(\"/api/orders\")\n  .send(newOrder)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0ea53152-966b-4ae5-b36c-fc17df0798a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bda09f6d-30a7-4208-96fe-3c4ef5da08b4",
              "0ea53152-966b-4ae5-b36c-fc17df0798a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1022,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b3569af0-284a-4aca-a443-646414112c25",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6b3deafa-62d6-4628-b7d1-0239668ef34e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bd7c5e47-c5f7-4250-8faa-004f769f6d09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .get(`/api/orders/${orders[0]._id}ssssssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d1d4d9aa-3c9e-40a5-a4e1-1b3aa0bbab03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6b3deafa-62d6-4628-b7d1-0239668ef34e",
              "bd7c5e47-c5f7-4250-8faa-004f769f6d09",
              "d1d4d9aa-3c9e-40a5-a4e1-1b3aa0bbab03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 455,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7c90ab9e-ed6b-4d4f-af51-ca78f51f44ec",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\tests\\orders.test.js",
            "file": "\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .set(\"Authorization\", users[0].token)\n  .expect(200)\n  .expect(res => {\n    expect(res.body._id).toBe(orders[0]._id);\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7d74caa0-9fbd-4f57-bbcd-aa2d7becf75d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}`)\n  .expect(401)\n  .expect(res => {\n    expect(res.body.auth).toBe(\"Authorization failed\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0a8f70b3-d93d-432b-8559-04d3a2655152",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n  .del(`/api/orders/${orders[0]._id}sssssss`)\n  .set(\"Authorization\", users[0].token)\n  .expect(400)\n  .expect(res => {\n    expect(res.body.order).toBe(\"There was no order found\");\n  })\n  .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "21de7e3e-aa6d-41c1-af36-8472bf86063b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d74caa0-9fbd-4f57-bbcd-aa2d7becf75d",
              "0a8f70b3-d93d-432b-8559-04d3a2655152",
              "21de7e3e-aa6d-41c1-af36-8472bf86063b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2019
}