{
  "stats": {
    "suites": 74,
    "tests": 145,
    "passes": 145,
    "pending": 0,
    "failures": 0,
    "start": "2018-10-10T23:32:14.780Z",
    "end": "2018-10-10T23:34:37.116Z",
    "duration": 142336,
    "testsRegistered": 145,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b09797bd-bf3b-45d7-aba5-350badd6c3da",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "50cf35c8-9b13-4f1a-b076-99234464f225",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
        "file": "\\server\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1816,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6b8bb69f-fae1-4ead-8544-ab966a51ff47",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "23d37cf0-3fb3-4b50-9d9d-75de0cc20327",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f07fbb3f-ce70-458b-8e48-75a7e90aa6de",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c43bec8a-d3b8-4e1b-a932-ec8d227f0e45",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8fe7c227-c603-4c1d-a960-7a8e5bc962c9",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 232,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8def57ad-24e7-49ff-ba12-217270603add",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8def57ad-24e7-49ff-ba12-217270603add"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 232,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ad9c7002-6042-4a00-aa5e-21b5b778d9cf",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 370,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"20C\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(\"20C\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2ebf5644-90cf-49b3-9eac-26494b657e10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "446f4a48-866a-4c55-9bdb-16d5424bcaf3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ebf5644-90cf-49b3-9eac-26494b657e10",
              "446f4a48-866a-4c55-9bdb-16d5424bcaf3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 541,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2ae44073-3dd2-471d-807a-399150299a28",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1e546731-2ddd-402a-9e90-b17cfc5bfc83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "241d0750-2482-4c71-89e0-c054907f8aed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1e546731-2ddd-402a-9e90-b17cfc5bfc83",
              "241d0750-2482-4c71-89e0-c054907f8aed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "eb262448-ab96-4a88-af5e-2d0230adc839",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"10\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(\"10\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"10\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "1493cbf8-8797-482e-8b74-42c40b00d1b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"20\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "9b4377e3-c1d7-4ce7-b46a-78c39136c2b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b34bb179-d05d-48d0-8361-eb0974f623a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"40\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"That size already exists\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "28aac87f-e4e6-4143-a2f1-21a7cf2ce63c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1493cbf8-8797-482e-8b74-42c40b00d1b5",
              "9b4377e3-c1d7-4ce7-b46a-78c39136c2b9",
              "b34bb179-d05d-48d0-8361-eb0974f623a4",
              "28aac87f-e4e6-4143-a2f1-21a7cf2ce63c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 794,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b93b0940-b53f-4096-aaec-016a5d0b1b1a",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(containerSizes[0].size);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b45bdf6b-6b0e-4c9f-883c-57b2a1e02001",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d29e94f6-9762-4eb8-a929-fcb9da31eba7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b45bdf6b-6b0e-4c9f-883c-57b2a1e02001",
              "d29e94f6-9762-4eb8-a929-fcb9da31eba7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 444,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9d4d62b9-1bc1-46ca-9546-a02b0376c2ba",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n          // Check to see if each container has a size and stats.\n          expect(res.body[0].size).not.toBe(null);\n          expect(res.body[1].size).not.toBe(null);\n          expect(res.body[2].size).not.toBe(null);\n          expect(res.body[0].stats).not.toBe(null);\n          expect(res.body[1].stats).not.toBe(null);\n          expect(res.body[2].stats).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fb5237aa-3457-4221-8d0c-3ab89f302853",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fb5237aa-3457-4221-8d0c-3ab89f302853"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 280,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0c0b3328-78f6-41a7-8d29-ee825a5bca9e",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 374,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          // Check to see if each container has a size and stats.\n          expect(res.body.size).not.toBe(null);\n          expect(res.body.stats).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeTruthy();\n              expect(container.size).not.toBe(null);\n              expect(container.stats).not.toBe(null);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "585565bb-25a6-4add-9963-047473a671b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newContainer.rentalResale = \"\";\n      newContainer.hasOnBoxNumbers = 123;\n      newContainer.hasShelves = 123;\n      newContainer.hasSigns = 123;\n      newContainer.isPainted = 123;\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n          expect(res.body.hasShelves).toBe(\n            \"You must select whether the container has shelves or not\"\n          );\n          expect(res.body.isPainted).toBe(\n            \"You must select whether the container is painted or not\"\n          );\n          expect(res.body.hasOnBoxNumbers).toBe(\n            \"You must select whether the container has GBR numbers or not\"\n          );\n          expect(res.body.hasSigns).toBe(\n            \"You must select whether the container has signs or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "86ad1e1f-8b0a-4d8b-831b-13ed2c4c7a4f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "585565bb-25a6-4add-9963-047473a671b3",
              "86ad1e1f-8b0a-4d8b-831b-13ed2c4c7a4f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c924a486-d15b-438b-9f4e-0609cacc45c2",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 280,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5dc837e2-51f6-427f-8cdc-ab439916fe74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "02ae3811-1fad-44c6-93e9-27d35076bf0d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5dc837e2-51f6-427f-8cdc-ab439916fe74",
              "02ae3811-1fad-44c6-93e9-27d35076bf0d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 375,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f3955f8c-0d10-42f6-b91b-bd448a333719",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 532,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n          expect(res.body.hasSigns).toBe(patchData.hasSigns);\n          expect(res.body.hasShelves).toBe(patchData.hasShelves);\n          expect(res.body.isPainted).toBe(patchData.isPainted);\n          expect(res.body.isFlagged).toBe(patchData.isFlagged);\n          expect(res.body.flagReason).toBe(patchData.flagReason);\n          expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n          expect(res.body.stats.currentRentee).toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b61e675a-3a57-4816-b5f4-6c5f3fb26342",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: \"\",\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        rentalResale: \"\",\n        currentAddress: \"\",\n        currentlyRented: \"\",\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          expect(res.body.size).toBe(\"Size is required\");\n          expect(res.body.currentlyRented).toBe(\n            \"You must select whether the container is currently rented\"\n          );\n          expect(res.body.currentAddress).toBe(\"Current address is required\");\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c95cfa19-0455-4fab-89aa-cd57361d7e67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5f50b652-bb06-4cdb-ac38-4fbc7eaff5c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b61e675a-3a57-4816-b5f4-6c5f3fb26342",
              "c95cfa19-0455-4fab-89aa-cd57361d7e67",
              "5f50b652-bb06-4cdb-ac38-4fbc7eaff5c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 708,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "84315988-ac36-44db-9aae-75763470e4e2",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 343,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(containers[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Container.findById(containers[1]._id)\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "1d12d834-5cdb-4962-8ed8-f359440cdfe8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2a5353c7-45c3-4859-9b2c-ef8db7032d40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d12d834-5cdb-4962-8ed8-f359440cdfe8",
              "2a5353c7-45c3-4859-9b2c-ef8db7032d40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "da1e7bb5-bca3-4928-a209-09eda1789d03",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
        "file": "\\server\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 595,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "38084b5f-a363-4475-9687-0e1a170fbee0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 163,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fb47ab49-a879-4452-a807-0b330446e9f8",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0c5033c7-7adf-41e4-8c77-30430101edfe",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(customers.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "61c53037-55e9-4ab8-935a-6f17e2f206ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61c53037-55e9-4ab8-935a-6f17e2f206ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 172,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "15a7229e-a434-425f-bfbe-0d8759d1e4bd",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .send(newCustomer)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(newCustomer.name);\n          expect(res.body.lastViewed).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findOne({ name: newCustomer.name })\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "1a8192ad-e4bf-4158-8ca0-f3ff73329306",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .send(badCustomer)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.address).toBe(\"Address is required\");\n          expect(res.body.city).toBe(\"City is required\");\n          expect(res.body.zipcode).toBe(\"Zipcode is required\");\n          expect(res.body.state).toBe(\"State is required\");\n          expect(res.body.phone).toBe(\"Phone is required\");\n          expect(res.body.email).toBe(\"Email is invalid\");\n          expect(res.body.isFlagged).toBe(\n            \"You must select whether the customer has a flag or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findOne({ name: newCustomer.name })\n            .then(customer => {\n              expect(customer).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a8f9325b-66ef-4b8e-b114-b95720d03f6c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1a8192ad-e4bf-4158-8ca0-f3ff73329306",
              "a8f9325b-66ef-4b8e-b114-b95720d03f6c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 552,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "292a7f17-5392-4162-a2ac-23a58d3d2c9e",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/customers/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(customers[0].name);\n          expect(res.body.lastViewed).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f0fb6934-14e1-45e8-87f9-44a51b626e56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7d759fa7-b5bd-4958-87cb-55496519346c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f0fb6934-14e1-45e8-87f9-44a51b626e56",
              "7d759fa7-b5bd-4958-87cb-55496519346c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 262,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c92065bd-fd4d-4359-8153-9953455dafc2",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          name: \"Jacob Belmont\",\n          address1: \"1234 Loopy St\",\n          address2: \"\",\n          city: \"Hanford\",\n          zipcode: \"93230\",\n          state: \"CA\",\n          phone: \"559-444-4444\",\n          ext: \"123\",\n          fax: \"559-444-4448\",\n          email: \"another@fake.com\",\n          rdp: \"\",\n          notes: \"Customer requires quote everytime before orders\",\n          isFlagged: false,\n          flagReason: \"\",\n          lastViewed: null\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Jacob Belmont\");\n          expect(res.body.isFlagged).toBe(false);\n          expect(res.body.flagReason).toBe(\"\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[1]._id)\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              expect(customer.name).toBe(\"Jacob Belmont\");\n              expect(customer.isFlagged).toBe(false);\n              expect(customer.flagReason).toBe(\"\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7c81543e-8d2c-44bb-912b-9182a369bd4e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[2]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          name: \"\",\n          address1: \"\",\n          address2: \"\",\n          city: \"\",\n          zipcode: \"\",\n          state: \"\",\n          phone: \"\",\n          ext: \"123\",\n          fax: \"559-444-4448\",\n          email: \"failemail.com\",\n          rdp: \"\",\n          notes: \"Customer requires quote everytime before orders\",\n          isFlagged: \"messedup\",\n          flagReason: \"Do not rent, patient hasn't paid bill.\",\n          lastViewed: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.address).toBe(\"Address is required\");\n          expect(res.body.city).toBe(\"City is required\");\n          expect(res.body.zipcode).toBe(\"Zipcode is required\");\n          expect(res.body.state).toBe(\"State is required\");\n          expect(res.body.phone).toBe(\"Phone is required\");\n          expect(res.body.email).toBe(\"Email is invalid\");\n          expect(res.body.isFlagged).toBe(\n            \"You must select whether the customer has a flag or not\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f7eae4b0-5f14-4948-b6e3-d72abca8794e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .send({})\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0c980300-7c8f-4be2-8a88-d8abe1ded2d6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7c81543e-8d2c-44bb-912b-9182a369bd4e",
              "f7eae4b0-5f14-4948-b6e3-d72abca8794e",
              "0c980300-7c8f-4be2-8a88-d8abe1ded2d6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 440,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8b7c59d4-dc39-40ca-9e6a-6a075141c856",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/customers/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(customers[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[0]._id)\n            .then(customer => {\n              expect(customer).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "10e88abe-941b-478d-8c8a-b7c2c36d066a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[0]._id)\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "16bfea1d-7722-4b17-b559-7093c0b4e944",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "10e88abe-941b-478d-8c8a-b7c2c36d066a",
              "16bfea1d-7722-4b17-b559-7093c0b4e944"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "1caf53a7-c498-4623-a7f6-c3dca96b64b7",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
        "file": "\\server\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 567,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "dee0ac19-b740-4e94-bea3-e6bd539d2744",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "caf4da48-491f-4d49-9165-16f4a7053696",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 489,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          // Check to see if body contains users information. If so,\n          // then the user's information was passed back meaning it succeeded.\n          expect(res.body.username).toBe(newUser.username);\n          expect(res.body.password).not.toBe(newUser.password);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "66d5c830-0963-4b00-98fd-1449f1b9664a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      // Set invalid properties to newUser.\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Must enter a valid email.\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bd589a29-cf8c-414d-9f31-317ab551d7c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"jboy@test.com\";\n      newUser.phone = \"5559992222\";\n      newUser.username = users[0].username;\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.username).toBe(\"Username already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ email: newUser.email })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7bc1ec39-13bc-4f44-af1d-b00245166626",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = users[0].email;\n      newUser.phone = \"5559992222\";\n      newUser.username = \"jboy\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Email already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // If no errors during registration, check to see if newUser was\n          // stored in the database properly.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4a58ee32-af24-4f4d-b560-707bd9282f93",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66d5c830-0963-4b00-98fd-1449f1b9664a",
              "bd589a29-cf8c-414d-9f31-317ab551d7c7",
              "7bc1ec39-13bc-4f44-af1d-b00245166626",
              "4a58ee32-af24-4f4d-b560-707bd9282f93"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1008,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ebed5bb7-3122-4527-9d74-af8e0fa83457",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"thePassword\"\n        })\n        .expect(200)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBe(true);\n          expect(res.body.token).toBeTruthy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dae7dbdb-3f2e-4710-a646-5285786a1dfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"wrongusername\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a6645d2a-3b6a-4925-9f5d-089a05eef159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"theWrongPassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3d45513b-a379-4674-8651-68c8cbe0f561",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpsr\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n          expect(res.body.login).toBe(\"Your account is not validated yet\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "65492ad0-785a-4a03-9310-be071879e1cb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dae7dbdb-3f2e-4710-a646-5285786a1dfd",
              "a6645d2a-3b6a-4925-9f5d-089a05eef159",
              "3d45513b-a379-4674-8651-68c8cbe0f561",
              "65492ad0-785a-4a03-9310-be071879e1cb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 709,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "877c0472-55da-49f1-9372-6f852f795da8",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "341d7066-b638-4eba-bfb1-1e80857c2e81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/profile\")\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.username).toBeFalsy();\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3c7c9b63-12b1-4394-89fd-1c9f7f286484",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "341d7066-b638-4eba-bfb1-1e80857c2e81",
              "3c7c9b63-12b1-4394-89fd-1c9f7f286484"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "604d6728-c7aa-4170-867e-a490c9dede43",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"somename\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"test@test.com\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: true\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.firstName).toBe(\"somename\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4875efee-3163-4e04-8df2-1e511f0ff318",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"newname\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"test@test.com\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: true\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.firstName).toBeFalsy();\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "44cd2322-266d-4d1d-8b7c-f0a249dda4dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"newname\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"bademail\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: \"badvalidatedvalue\"\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(400)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.email).toBe(\"Must enter a valid email\");\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c3a3ad8e-4eaf-4398-8439-a8bf220603e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4875efee-3163-4e04-8df2-1e511f0ff318",
              "44cd2322-266d-4d1d-8b7c-f0a249dda4dd",
              "c3a3ad8e-4eaf-4398-8439-a8bf220603e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "d642b910-bcf7-4c0a-9928-796e5bbfec0b",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
        "file": "\\server\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 581,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "51e1b52f-1f2a-4272-b847-3a8a8a52e0b8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 166,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  CalendarEvent.remove({})\n    .then(() => {\n      var eventOne = new CalendarEvent(events[0]).save();\n      var eventTwo = new CalendarEvent(events[1]).save();\n      var eventThree = new CalendarEvent(events[2]).save();\n      return Promise.all([eventOne, eventTwo, eventThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "353d9ef6-8448-4101-8082-fd70bd499336",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "cfaa79d5-3d69-4c9c-a2f4-076316da4382",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(events.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "191dc29c-0195-4aa0-af22-2115c3df4c82",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "191dc29c-0195-4aa0-af22-2115c3df4c82"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 168,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ca503e12-ee97-4b30-babb-6d2d49432ad9",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(newEvent)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(newEvent.title);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: newEvent.title })\n            .then(event => {\n              expect(event).toBeTruthy();\n              expect(event.title).toBe(newEvent.title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "df54b144-bf31-4f5b-8a71-b058f93e1beb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(badEvent)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: badEvent.title })\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d0b59a56-2aba-48b5-91d2-9df194ed52af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df54b144-bf31-4f5b-8a71-b058f93e1beb",
              "d0b59a56-2aba-48b5-91d2-9df194ed52af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 424,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dfd4aa34-1ed4-4c1c-bd61-fd5350327fdb",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9291d1c3-cad9-4d16-8900-9f8318d878c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8f93c8d9-6ba5-408d-8f01-bd6a674fb664",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9291d1c3-cad9-4d16-8900-9f8318d878c7",
              "8f93c8d9-6ba5-408d-8f01-bd6a674fb664"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 271,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dffe208b-fa7c-4304-9c2a-043d7ad2f332",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"New title\",\n          color: events[0].color,\n          start: events[0].start,\n          end: events[0].end,\n          order: events[0].order\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(\"New title\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(\"New title\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8e645556-f4c2-4c88-8431-6e890d062508",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"\",\n          color: \"\",\n          start: \"\",\n          end: \"\",\n          order: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(events[0].title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "893a6d0a-1ce2-4d5b-b914-1a35dbed2925",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .send(events[0])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ea0418ec-49b5-4e2b-b2ff-5d9ad795076b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8e645556-f4c2-4c88-8431-6e890d062508",
              "893a6d0a-1ce2-4d5b-b914-1a35dbed2925",
              "ea0418ec-49b5-4e2b-b2ff-5d9ad795076b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 524,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "158fa08a-fea1-4557-91d1-8dc2be3b2607",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[1]._id.toHexString())\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "ec1ecfb5-d13b-40f6-b097-9fc1858833e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3ca8035f-4b38-4530-a750-68003f8f0186",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec1ecfb5-d13b-40f6-b097-9fc1858833e5",
              "3ca8035f-4b38-4530-a750-68003f8f0186"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 352,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "0eda8019-0457-4d85-af11-f90804709a57",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
        "file": "\\server\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 581,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8b7a40a4-419d-4aad-9ef2-fd50ddccd31d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "08fc90c4-e43e-44eb-b05f-f66351e6b050",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "7e2cee04-60c2-48f8-830e-260191c009e9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a749d59f-4e28-4359-92f6-2fdfb1925fca",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9f04074a-1407-48fd-a1ba-f06d5326af67",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "289ede56-0046-45e6-bdbd-4ddc418aafbe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c5f90a07-b7ee-437d-b551-53a82db8957f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 189,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6390449a-5c37-4474-bc85-1778e696e5e7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "10c0388b-dd1c-4d99-afdd-56e285ebbf06",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 202,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Order.remove({})\n    .then(() => {\n      var orderOne = new Order(orders[0]).save();\n      return Promise.all([orderOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a0f7ec51-4301-46d7-8945-6c04ff036435",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "33700d59-978b-4103-a4ca-83f145d5377c",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders.length).toBe(orders.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ca2b0d98-9a7e-4b60-9e32-005515e5bc0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "756b5b48-9bb1-48df-ba4e-d96c4efd968c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ca2b0d98-9a7e-4b60-9e32-005515e5bc0d",
              "756b5b48-9bb1-48df-ba4e-d96c4efd968c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 272,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "902adca4-f90d-4e61-bf1d-03866e998df3",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "071374e6-6194-4ce7-b9c4-d0134eb5cc67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "666cb870-0332-46a3-8781-4d8e45c55c7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2d7cf3bd-df33-419d-a9e3-80704a779760",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "071374e6-6194-4ce7-b9c4-d0134eb5cc67",
              "666cb870-0332-46a3-8781-4d8e45c55c7a",
              "2d7cf3bd-df33-419d-a9e3-80704a779760"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 356,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "21df08b4-9480-422e-ae37-e9e9d31d82c5",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 295,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders[0].createdBy._id).toBe(orders[0].createdBy);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "02a20214-a723-4a74-bcbb-4da040000bfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c616f63b-8889-4e3b-b88c-ce0d50c3b074",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f6a55347-1f4f-429b-b222-50240b842407",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02a20214-a723-4a74-bcbb-4da040000bfd",
              "c616f63b-8889-4e3b-b88c-ce0d50c3b074",
              "f6a55347-1f4f-429b-b222-50240b842407"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 387,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f9edfb47-d13f-499a-ba23-3ad61fd440de",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/orders\")\n        .send(newOrder)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.job.name).toBe(\"Walmart Construction\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Order.findOne({\n            job: {\n              name: \"Walmart Construction\",\n              address: \"1733 S. Casablanca St\",\n              city: \"Visalia\",\n              zipcode: \"93292\"\n            }\n          })\n            .then(order => {\n              expect(order).toBeTruthy();\n              expect(order.job.name).toBe(\"Walmart Construction\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "79a9beb3-b29b-4b57-a403-cdcf87c88031",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/orders\")\n        .send(newOrder)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "46e6d3c8-9535-4342-8a35-346164e29548",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "79a9beb3-b29b-4b57-a403-cdcf87c88031",
              "46e6d3c8-9535-4342-8a35-346164e29548"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 620,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "14bc7af3-5ec2-4a94-8234-70e7194b36fe",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c60dae47-df3f-41aa-b7e0-95bab8d4bd12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "68e0e5cc-4960-4076-a5b2-3591c9716172",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}ssssssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8b9f99d6-d988-4664-af6c-09b18bb77521",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c60dae47-df3f-41aa-b7e0-95bab8d4bd12",
              "68e0e5cc-4960-4076-a5b2-3591c9716172",
              "8b9f99d6-d988-4664-af6c-09b18bb77521"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 380,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c43a427d-261e-413f-b679-4a30e92beac9",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "97be6a94-d490-4ec6-87df-7d166731bd46",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9fc4f779-6075-4023-bb2c-aa348de7b420",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70853c0b-4116-4d8a-9f2e-f902311b315f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97be6a94-d490-4ec6-87df-7d166731bd46",
              "9fc4f779-6075-4023-bb2c-aa348de7b420",
              "70853c0b-4116-4d8a-9f2e-f902311b315f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 379,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c030e820-6744-4947-ae07-8f6c6e48c673",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 563,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a0b9885e-fcb5-4b7b-840c-8a330b4efb8f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ProductType.remove({})\n    .then(() => {\n      var modification = new ProductType(productTypes[0]).save();\n      var container = new ProductType(productTypes[1]).save();\n      var rentalModification = new ProductType(productTypes[2]).save();\n      var delivery = new ProductType(productTypes[3]).save();\n      var pickup = new ProductType(productTypes[4]).save();\n      return Promise.all([\n        modification,\n        container,\n        rentalModification,\n        delivery,\n        pickup\n      ]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f5ff6597-d98d-4c46-9643-24e758bc3c7d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "f89afcba-f8aa-4719-9d6d-de3474aaa171",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          // check to see if product types array exists.\n          expect(res.body.length).toBe(5);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "22dc3927-79af-4b9f-b35e-164b101edb99",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "22dc3927-79af-4b9f-b35e-164b101edb99"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 168,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6cd9dfcc-f8e8-4e8c-a644-fd14547bab6f",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProductType)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(newProductType.type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result.type).toBe(newProductType.type);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "91cbc3f0-5ee4-4b24-a4b3-514a9e9c9938",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send({ type: \"\" })\n        .expect(400)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b9fd880e-cd84-4b86-a055-c79b58bb8d57",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91cbc3f0-5ee4-4b24-a4b3-514a9e9c9938",
              "b9fd880e-cd84-4b86-a055-c79b58bb8d57"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 505,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "60565894-0efd-45a5-ba06-621a694f5b33",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bc5bb4e3-1036-44a8-a79b-15b1704e1425",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "608411af-ed6d-4a55-8531-5f20bb9f2621",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc5bb4e3-1036-44a8-a79b-15b1704e1425",
              "608411af-ed6d-4a55-8531-5f20bb9f2621"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 285,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dcbcd2eb-6c33-4c3f-a781-219ed22ff0cf",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 287,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"new modification\"\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"new modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9a64591c-3961-4502-ab15-e9d53ddca2da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f1e23f69-087f-4cbd-b5d7-4377e7bb548f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"container\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"That type is already being used\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "51406811-622e-4553-9e8b-930d5261a660",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"some new mod\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"No product found with that ID in the URL\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "77c28432-6698-4d48-8cab-28a760cfc20a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a64591c-3961-4502-ab15-e9d53ddca2da",
              "f1e23f69-087f-4cbd-b5d7-4377e7bb548f",
              "51406811-622e-4553-9e8b-930d5261a660",
              "77c28432-6698-4d48-8cab-28a760cfc20a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 643,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "155af496-5318-4b39-a574-df5f8caa1244",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(productTypes[0].type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ProductType.findById(productTypes[0]._id.toHexString())\n            .then(type => {\n              expect(type).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "1a9a13e4-b20e-4214-8e94-1e09cedde824",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c90de009-45be-41b6-a631-e5aae2059a02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(404)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"Unable to find and remove the product type\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7dec2fb0-7c9a-4184-8665-e630cf099f1c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1a9a13e4-b20e-4214-8e94-1e09cedde824",
              "c90de009-45be-41b6-a631-e5aae2059a02",
              "7dec2fb0-7c9a-4184-8665-e630cf099f1c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 512,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "37c6bd12-345c-477c-8cf6-fb95d033e75e",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 166,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a976195a-f89f-4e80-9505-6e3cc1587738",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "631632b2-16c9-42b7-a02b-06f721413609",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9c232abf-08ab-4ff4-a806-4a1ad5fcbd2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c232abf-08ab-4ff4-a806-4a1ad5fcbd2a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 255,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b6c03eaf-3c81-4ea7-a463-cfc5051aeb9e",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 333,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(newProduct.name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b0f34c73-c4a1-4ea9-8aaa-79ad6342359d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct.name = \"\";\n      newProduct.shortName = \"\";\n      newProduct.rental = \"\";\n      newProduct.type = \"\";\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8a6c28a8-ea88-4245-b6e9-f900830c98e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b0f34c73-c4a1-4ea9-8aaa-79ad6342359d",
              "8a6c28a8-ea88-4245-b6e9-f900830c98e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 504,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "74b32c3c-8950-41dd-a3d7-7c988793f3b5",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "85b9f422-d5d1-43f9-a659-3d288d266e14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0cf516c4-800d-4fa4-8b61-47a1b9353afb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "85b9f422-d5d1-43f9-a659-3d288d266e14",
              "0cf516c4-800d-4fa4-8b61-47a1b9353afb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2821f176-02d0-423f-82a4-3931b3280e75",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 198,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(\"40' Pickup\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "01b69216-4791-438d-b053-1992d8e125c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"No product found.\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1816a317-78fc-4eba-bdc4-ce3e040e0792",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"\",\n        shortName: \"\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: \"\",\n        type: \"\"\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "9acc6d52-f4e9-44f1-b5c6-0d3c4f78e9bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "01b69216-4791-438d-b053-1992d8e125c5",
              "1816a317-78fc-4eba-bdc4-ce3e040e0792",
              "9acc6d52-f4e9-44f1-b5c6-0d3c4f78e9bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 457,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "45dad2de-e7ee-4c5c-ab82-90f617505e3b",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Product.findById(products[0]._id.toHexString())\n            .then(product => {\n              expect(product).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f151eda3-ed02-44c4-9384-d8f959d86730",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0d0e6963-42fc-4a58-baec-309184c1f482",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f151eda3-ed02-44c4-9384-d8f959d86730",
              "0d0e6963-42fc-4a58-baec-309184c1f482"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 350,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "86b983e6-b646-4188-b53f-53b0a69fde66",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
        "file": "\\server\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 563,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0fb83e25-408b-4ae6-bbc6-b86295c44543",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 238,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6de9c911-245b-40f1-b861-bc912aa123ef",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 169,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d8dd434c-c153-4104-ae33-5bd6c535117d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "36604f1c-7d87-4e7f-aa10-647a7b1330d7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c98f6ff1-2fdc-4615-981b-cea281c01664",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4706c13d-5cee-4f4b-9af4-dfad0624becb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Quote.remove({})\n    .then(() => {\n      var quoteOne = new Quote(quotes[0]).save();\n      return Promise.all([quoteOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fbfeedb7-f3ab-4bc2-9919-5cb1ad73bc8e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "25b5e773-afa2-41d6-8265-a12a72c3953e",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1f8857ef-6e75-4695-a976-61a5b5592ec7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "96d35c6f-dbee-47e8-a534-5972bae7c1f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1f8857ef-6e75-4695-a976-61a5b5592ec7",
              "96d35c6f-dbee-47e8-a534-5972bae7c1f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 267,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "66438985-7dc8-4bea-9ec4-2dd94840cfa8",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 541,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer).toBe(newQuote.customer);\n          expect(res.body.attention).toBe(newQuote.attention);\n          expect(res.body.isHidden).toBe(false);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d567aa5d-1fd5-4a66-b827-2a088ac3793a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70299e87-dc6b-46f7-9cd9-d0956a9aff8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newQuote.purchaseType = \"not a number\";\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchaseType).toBe(\n            \"Purchase type selected does not exist\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "35512af5-9634-4068-94ef-e15217ee6598",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d567aa5d-1fd5-4a66-b827-2a088ac3793a",
              "70299e87-dc6b-46f7-9cd9-d0956a9aff8a",
              "35512af5-9634-4068-94ef-e15217ee6598"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 804,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "dd5498f6-053f-4a4a-ab7e-89030cf13d8a",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 275,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abe252ce-9a6f-4f5f-af09-922b007fc1b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "47ac4b58-4c7a-45fa-b5c7-543192a10a21",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this customer\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70cb51a2-8402-4a14-ad10-4150c16f8e94",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abe252ce-9a6f-4f5f-af09-922b007fc1b0",
              "47ac4b58-4c7a-45fa-b5c7-543192a10a21",
              "70cb51a2-8402-4a14-ad10-4150c16f8e94"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 368,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6378a987-eaa2-418b-ba1f-83d33289e362",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "15e57e75-a296-4bd5-8130-0d05093a045f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "65ce9f9e-61dc-4d50-ad44-ac082d2555e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this user\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "925f0148-e594-49be-9dd8-4504107a348c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "15e57e75-a296-4bd5-8130-0d05093a045f",
              "65ce9f9e-61dc-4d50-ad44-ac082d2555e8",
              "925f0148-e594-49be-9dd8-4504107a348c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 360,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fd94c765-cfff-4a27-95e3-063f9e803791",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 306,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "23fa9455-a786-446d-a40c-9b1df56f43f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "330984ec-fc85-4d4b-8b7b-0e1756e991a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8a51c3eb-7963-4697-a5a5-72554e839e32",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "23fa9455-a786-446d-a40c-9b1df56f43f3",
              "330984ec-fc85-4d4b-8b7b-0e1756e991a9",
              "8a51c3eb-7963-4697-a5a5-72554e839e32"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 403,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1de6a33e-2dc1-48d1-a6af-338a77a93b16",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 588,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(updateQuote._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ee989f5c-11ee-4061-a6c9-b474034b6d13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "21ec36e0-5c0b-496b-823c-7c7eae5f25a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}sss`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"No quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "656edc61-6cd3-4fa6-8f51-ea2654261d14",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      updateQuote.purchasePrices = \"sd235523\";\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchasePrices).toBe(\n            \"There is an issue with the quote's purchase prices\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cb67d996-58cf-497b-b322-2eb0b1142340",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ee989f5c-11ee-4061-a6c9-b474034b6d13",
              "21ec36e0-5c0b-496b-823c-7c7eae5f25a0",
              "656edc61-6cd3-4fa6-8f51-ea2654261d14",
              "cb67d996-58cf-497b-b322-2eb0b1142340"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 940,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "390784f3-fda0-4af5-afeb-e68c089638d2",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "693feddd-bc33-4c4a-b7ea-eb276aa5a257",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d6d1233a-72e3-40f2-bda3-6b6f38083bd9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "50eb867d-d0d9-4a02-a9c8-35e659fa6e27",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "693feddd-bc33-4c4a-b7ea-eb276aa5a257",
              "d6d1233a-72e3-40f2-bda3-6b6f38083bd9",
              "50eb867d-d0d9-4a02-a9c8-35e659fa6e27"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 383,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c8c3edc3-5920-4c76-a237-23a9b8761e0f",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
        "file": "\\server\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 579,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f6116196-f778-4c88-8eee-aa3a689674ba",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "15b2d0f5-b3c4-4f23-8d05-6ff94d6640e2",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
            "file": "\\server\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 187,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "ae2d682f-658e-457a-9272-6d700257fc73",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "cc61f6fa-d95b-40e3-93c6-c28a503a9dcc",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 174,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.length).toBe(2);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33ab1369-e953-44cd-baba-526e69c4521c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "33ab1369-e953-44cd-baba-526e69c4521c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 174,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "c57c0532-5771-409e-b908-560410cdba8b",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 253,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findOne({ type: \"Resale\" })\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "611cee72-91bd-4555-be11-922476440ea8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "449801c3-02b1-4257-83bb-212b1b76e539",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "611cee72-91bd-4555-be11-922476440ea8",
                  "449801c3-02b1-4257-83bb-212b1b76e539"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 346,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "427627da-de40-41a1-9f45-5f3564687d1b",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 173,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(purchaseTypes[0].type);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "194b5bd7-03c2-4f42-859d-8dc9ddca3b5f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\n              \"There was no purchase type found\"\n            );\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a73c2ee5-f10f-4005-920f-cdbde1df22d5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "194b5bd7-03c2-4f42-859d-8dc9ddca3b5f",
                  "a73c2ee5-f10f-4005-920f-cdbde1df22d5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 262,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "596b2ad2-cf94-4b15-bc05-71373a698203",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 301,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dd070af6-a773-4229-9d1c-af1287fc8b2d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 191,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2b377451-a157-4054-a804-46c794ec6b20",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 173,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "671c5062-6971-4634-8a5f-aa137b57c8c1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "dd070af6-a773-4229-9d1c-af1287fc8b2d",
                  "2b377451-a157-4054-a804-46c794ec6b20",
                  "671c5062-6971-4634-8a5f-aa137b57c8c1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 665,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "7a791962-3aa3-4520-b253-7b083eb63ad3",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 251,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(purchaseTypes[0].type);\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeFalsy();\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d81955bb-4cdc-44d0-a3b3-a39d44d54634",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 168,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(purchaseTypes[0].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4e1ed9b-82ae-4763-ae12-7e2e69a5443c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d81955bb-4cdc-44d0-a3b3-a39d44d54634",
                  "e4e1ed9b-82ae-4763-ae12-7e2e69a5443c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 419,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "18b0a49c-3a1f-43f2-af29-793a1ed31de2",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
        "file": "\\server\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 580,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "57d9c3cb-1bb1-442f-a3fa-55a9ca4ad967",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 184,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Todo.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var todoOne = new Todo(todos[0]).save();\n      var todoTwo = new Todo(todos[1]).save();\n      var todoThree = new Todo(todos[2]).save();\n      return Promise.all([todoOne, todoTwo, todoThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b5d8b3d7-fd77-4bfb-9121-56855070e56f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "92e8d992-86d0-4997-b047-ca10b4273016",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(2);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "913aac6a-1e62-414c-b98c-b39576591df6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "959cdb25-3fa5-4aec-8401-28b4e874cc0e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "913aac6a-1e62-414c-b98c-b39576591df6",
              "959cdb25-3fa5-4aec-8401-28b4e874cc0e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b8065e3b-9efe-4225-8dd9-abf1cec8658a",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"The newest todo\");\n          expect(res.body.creator).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "480e8cd9-1152-400d-9adc-0f3d9dea9973",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "58873388-1552-4995-8b6a-c10a0a64b14c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "42228f66-93ce-47f0-b873-26428235f97b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "480e8cd9-1152-400d-9adc-0f3d9dea9973",
              "58873388-1552-4995-8b6a-c10a0a64b14c",
              "42228f66-93ce-47f0-b873-26428235f97b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 259,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fcde5366-d62c-4041-a7c3-4d8e8ebc04fd",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n          expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "81230809-de17-47bf-8afe-77e08cb68a57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6d071992-592b-47fe-82f7-62974edb702d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81230809-de17-47bf-8afe-77e08cb68a57",
              "6d071992-592b-47fe-82f7-62974edb702d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 543,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8207e63a-437b-43fc-a603-a41c6ce74e5a",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"a new description\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0b54ad0e-08e1-4f0f-a1e3-20385ef6beba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6878e186-c900-47fd-b294-751a81648a93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dcc9da3f-d91c-4a78-b343-dbded18ebe10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0b54ad0e-08e1-4f0f-a1e3-20385ef6beba",
              "6878e186-c900-47fd-b294-751a81648a93",
              "dcc9da3f-d91c-4a78-b343-dbded18ebe10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 462,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6b0f6f42-e084-4db1-805b-d68d3b6fad59",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9d5cc320-43b6-4c46-8bc5-1d5632b1b772",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2c39b2b-9969-4181-a06b-db939c0681db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9d5cc320-43b6-4c46-8bc5-1d5632b1b772",
              "c2c39b2b-9969-4181-a06b-db939c0681db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 344,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "797ff659-c49f-4305-86f5-b3fc60055a40",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
        "file": "\\server\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 562,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0bd79351-2f40-4e21-a636-39b75d338d5c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c56caf6a-e024-4222-a11d-cc6e3b5dd97d",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(users.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c2c03d9d-57ab-4eae-bbcc-e66b163f4e8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c2c03d9d-57ab-4eae-bbcc-e66b163f4e8d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f020fb8c-8c05-41a9-a4b6-4955dd8a0412",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 638,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.username).toBe(newUser.username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.firstName).toBe(newUser.firstName);\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "61309930-c716-4ca2-9e00-96536897da5b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      newUser.validated = \"hello\";\n      request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.email).toBe(\"Must enter a valid email\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7e42d873-ffce-46ec-ba91-cc1fdfe3a8a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61309930-c716-4ca2-9e00-96536897da5b",
              "7e42d873-ffce-46ec-ba91-cc1fdfe3a8a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 809,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "786043d4-5aaa-4a42-bf8c-197081900ef6",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8673c5ec-f93f-42c9-acb5-8be42d07d9f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.username).not.toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9a38ef90-17a7-48f6-91ca-64157215cc5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8673c5ec-f93f-42c9-acb5-8be42d07d9f1",
              "9a38ef90-17a7-48f6-91ca-64157215cc5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 260,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b2a59c71-b3d9-4a4b-889f-300137fd055b",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      users[1].validated = true;\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(users[1])\n        .expect(200)\n        .expect(res => {\n          expect(res.body.username).toBe(users[1].username);\n          expect(res.body.validated).toBe(true);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "12c293d9-1098-4ba6-b59c-b59fdc3ea152",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/users/${users[1]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .send(users[1])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Invalid ID\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ce72e235-6ad5-4d85-93eb-f4c931a7b5a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"Brian\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Sr\",\n        username: \"blpsr\",\n        password: \"thePassword\",\n        email: \"gbr@test.com\",\n        phone: \"5559991224\",\n        title: \"Manager\",\n        type: \"Staff\",\n        validated: \"someWrongValidation\"\n      };\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              expect(user.firstName).toBe(\"Brian\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a45522f4-42a9-4010-add5-9d6c0a4f94f3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12c293d9-1098-4ba6-b59c-b59fdc3ea152",
              "ce72e235-6ad5-4d85-93eb-f4c931a7b5a1",
              "a45522f4-42a9-4010-add5-9d6c0a4f94f3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 518,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d96e5037-6d40-40f3-8a91-98186244a845",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[0]._id.toHexString())\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "61b8f6b7-49e8-41ef-ac57-6471d6b63fb1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[1]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.username).not.toBe(users[1].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.username).toBe(users[1].username);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7d87238e-8668-4e73-90cd-717dde5b8b5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61b8f6b7-49e8-41ef-ac57-6471d6b63fb1",
              "7d87238e-8668-4e73-90cd-717dde5b8b5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 429,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}