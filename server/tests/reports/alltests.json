{
  "stats": {
    "suites": 67,
    "tests": 129,
    "passes": 129,
    "pending": 0,
    "failures": 0,
    "start": "2018-08-07T02:42:07.555Z",
    "end": "2018-08-07T02:43:47.590Z",
    "duration": 100035,
    "testsRegistered": 129,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "71f9eccb-79bc-4cd3-b7ef-6d73caddc955",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "af78982a-eb1f-45b6-8db8-842d45828111",
        "title": "CONTAINERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
        "file": "\\server\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1456,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c0d5eb6d-6df0-44c4-b106-4ff2a2c5cb11",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "efa2bfd0-d7b1-433b-90ee-29051e63c6d9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "df799e62-8b19-43ef-abdc-b53ac5f5baa1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "79c77a91-ca79-4567-9cb0-7421c5bc944f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "682c945c-a727-4d46-b7fe-a8de966a5af6",
            "title": "GET /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "74ce09d8-3586-4f22-beed-e5e482ec9da3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "74ce09d8-3586-4f22-beed-e5e482ec9da3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 219,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "392fa895-9355-40f3-b80c-3cb0f5dd00d0",
            "title": "POST /containers/sizes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 374,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"20C\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(\"20C\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "553763b9-cb25-4ccc-a870-4383d73264c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2ab18085-ea0a-4790-b2d0-4dabdcfba8a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "553763b9-cb25-4ccc-a870-4383d73264c9",
              "2ab18085-ea0a-4790-b2d0-4dabdcfba8a9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 551,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "30973135-3312-42b6-ad26-b3bf310bed71",
            "title": "GET /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(containerSizes[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7a3e7b31-9596-4ca2-8f98-9efca13fe3e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "812f1d08-75fc-4b9b-babe-6f4e599b81c8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7a3e7b31-9596-4ca2-8f98-9efca13fe3e3",
              "812f1d08-75fc-4b9b-babe-6f4e599b81c8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4e8bbed5-6036-4c80-b219-e5a9e7cbe7cd",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 371,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"10\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(\"10\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"10\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "53c377de-f329-4b4a-8706-cd9ca953fc5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"20\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "3267a5c4-eba7-4d9e-8cdc-bb41c0b961ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fdc37934-b677-456d-b6ed-186a91b56ac9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"40\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"That size already exists\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f4d39c06-025e-4ff9-9917-087b3e849572",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "53c377de-f329-4b4a-8706-cd9ca953fc5f",
              "3267a5c4-eba7-4d9e-8cdc-bb41c0b961ab",
              "fdc37934-b677-456d-b6ed-186a91b56ac9",
              "f4d39c06-025e-4ff9-9917-087b3e849572"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 813,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c5c0edb3-160e-459b-a606-d2c4288b8627",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.size).toBe(containerSizes[0].size);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "5c9366d0-9b6c-4dd1-819c-11428419148f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "970f8ff1-6b5b-4c43-8262-31443fa54926",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c9366d0-9b6c-4dd1-819c-11428419148f",
              "970f8ff1-6b5b-4c43-8262-31443fa54926"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 463,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2cc2f364-92bd-4495-b0c1-3bdeb1583afd",
            "title": "GET /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 291,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n          // Check to see if each container has a size and stats.\n          expect(res.body[0].size).not.toBe(null);\n          expect(res.body[1].size).not.toBe(null);\n          expect(res.body[2].size).not.toBe(null);\n          expect(res.body[0].stats).not.toBe(null);\n          expect(res.body[1].stats).not.toBe(null);\n          expect(res.body[2].stats).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d3956659-16a6-4f86-ae6b-1820725da05e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3956659-16a6-4f86-ae6b-1820725da05e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 291,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a4ccf1b9-1cfc-4226-8216-e19c8e9b7c69",
            "title": "POST /containers/",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 348,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          // Check to see if each container has a size and stats.\n          expect(res.body.size).not.toBe(null);\n          expect(res.body.stats).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeTruthy();\n              expect(container.size).not.toBe(null);\n              expect(container.stats).not.toBe(null);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "272512d9-ec16-4433-b1c6-cdc30c9a8c11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newContainer.rentalResale = \"\";\n      newContainer.hasOnBoxNumbers = 123;\n      newContainer.hasShelves = 123;\n      newContainer.hasSigns = 123;\n      newContainer.isPainted = 123;\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n          expect(res.body.hasShelves).toBe(\n            \"You must select whether the container has shelves or not\"\n          );\n          expect(res.body.isPainted).toBe(\n            \"You must select whether the container is painted or not\"\n          );\n          expect(res.body.hasOnBoxNumbers).toBe(\n            \"You must select whether the container has GBR numbers or not\"\n          );\n          expect(res.body.hasSigns).toBe(\n            \"You must select whether the container has signs or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f55e0523-90e3-4ca4-ad7a-76180230bab3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "272512d9-ec16-4433-b1c6-cdc30c9a8c11",
              "f55e0523-90e3-4ca4-ad7a-76180230bab3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 526,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "48faf314-75e0-47ac-ae5b-aa8fbfea8b1b",
            "title": "GET /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.serialNumber).toBe(containers[0].serialNumber);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ab4ce6ea-4d0a-4d1c-9a34-1fa482b8dfd3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "36321561-c8be-4f20-bd7b-c0f2e887d3b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab4ce6ea-4d0a-4d1c-9a34-1fa482b8dfd3",
              "36321561-c8be-4f20-bd7b-c0f2e887d3b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 360,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "33e7668d-bdbd-40e1-90a7-0be0897a00c5",
            "title": "PATCH /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 554,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.hasOnBoxNumbers).toBe(patchData.hasOnBoxNumbers);\n          expect(res.body.hasSigns).toBe(patchData.hasSigns);\n          expect(res.body.hasShelves).toBe(patchData.hasShelves);\n          expect(res.body.isPainted).toBe(patchData.isPainted);\n          expect(res.body.isFlagged).toBe(patchData.isFlagged);\n          expect(res.body.flagReason).toBe(patchData.flagReason);\n          expect(res.body.stats.currentAddress).toBe(patchData.currentAddress);\n          expect(res.body.stats.currentRentee).toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a5eb52e5-6f0d-4100-8ab0-0c8f8e7c8b7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: \"\",\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        rentalResale: \"\",\n        currentAddress: \"\",\n        currentlyRented: \"\",\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          expect(res.body.size).toBe(\"Size is required\");\n          expect(res.body.currentlyRented).toBe(\n            \"You must select whether the container is currently rented\"\n          );\n          expect(res.body.currentAddress).toBe(\"Current address is required\");\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "438fa888-7e07-4646-a3e5-06f0265e5789",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "22bc6c42-aabc-42a0-9279-07cececb819f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a5eb52e5-6f0d-4100-8ab0-0c8f8e7c8b7e",
              "438fa888-7e07-4646-a3e5-06f0265e5789",
              "22bc6c42-aabc-42a0-9279-07cececb819f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 743,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ca2bc738-c920-48cb-acb0-2f3d73bb1930",
            "title": "DELETE /containers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 349,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(containers[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Container.findById(containers[1]._id)\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c1c21ff1-7a24-41d4-b905-e127dab1bac9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "67179f4a-ab21-4ef5-989c-ec5ec3a76852",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c1c21ff1-7a24-41d4-b905-e127dab1bac9",
              "67179f4a-ab21-4ef5-989c-ec5ec3a76852"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 442,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "e9e2a51c-170a-4f0c-88d6-1b9586dfadab",
        "title": "CUSTOMERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
        "file": "\\server\\tests\\customers.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "CUSTOMERS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 479,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "26bbef06-81ea-44cb-bf94-829c719ca491",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "CUSTOMERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c198b7d2-bc1f-41b6-a197-52686043624a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "842ddff7-25a2-4d99-af84-ec050c39b9e9",
            "title": "GET /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of customers",
                "fullTitle": "CUSTOMERS GET /customers should return an array of customers",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(customers.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3955f704-527c-40cc-92b3-4317fa9d518b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3955f704-527c-40cc-92b3-4317fa9d518b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "974c65c2-1872-43cf-a5e4-2470d0c22a30",
            "title": "POST /customers",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new customer and update last viewed",
                "fullTitle": "CUSTOMERS POST /customers should create a new customer and update last viewed",
                "timedOut": false,
                "duration": 384,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .send(newCustomer)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(newCustomer.name);\n          expect(res.body.lastViewed).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findOne({ name: newCustomer.name })\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "686ff4c1-faec-4752-bbc7-1f077e458102",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new customer with validation errors",
                "fullTitle": "CUSTOMERS POST /customers should not create a new customer with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/customers\")\n        .set(\"Authorization\", users[0].token)\n        .send(badCustomer)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.address).toBe(\"Address is required\");\n          expect(res.body.city).toBe(\"City is required\");\n          expect(res.body.zipcode).toBe(\"Zipcode is required\");\n          expect(res.body.state).toBe(\"State is required\");\n          expect(res.body.phone).toBe(\"Phone is required\");\n          expect(res.body.email).toBe(\"Email is invalid\");\n          expect(res.body.isFlagged).toBe(\n            \"You must select whether the customer has a flag or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findOne({ name: newCustomer.name })\n            .then(customer => {\n              expect(customer).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "62c315c3-fc5d-4064-9069-72acbac76a85",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "686ff4c1-faec-4752-bbc7-1f077e458102",
              "62c315c3-fc5d-4064-9069-72acbac76a85"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 562,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3bd86f5c-821f-4404-96bf-c612e8c0b6ec",
            "title": "GET /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a customer with updated last viewed property",
                "fullTitle": "CUSTOMERS GET /customers/:id should return a customer with updated last viewed property",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/customers/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(customers[0].name);\n          expect(res.body.lastViewed).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "793f6533-efad-41c8-848b-ed084c030f57",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user with invalid ID",
                "fullTitle": "CUSTOMERS GET /customers/:id should not return user with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b3bce9f0-ca2b-45ff-9197-a09c454d6f34",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "793f6533-efad-41c8-848b-ed084c030f57",
              "b3bce9f0-ca2b-45ff-9197-a09c454d6f34"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 273,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "536df845-1d53-4149-a131-521f662f26cd",
            "title": "PATCH /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a customer & return the customer",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should update a customer & return the customer",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          name: \"Jacob Belmont\",\n          address1: \"1234 Loopy St\",\n          address2: \"\",\n          city: \"Hanford\",\n          zipcode: \"93230\",\n          state: \"CA\",\n          phone: \"559-444-4444\",\n          ext: \"123\",\n          fax: \"559-444-4448\",\n          email: \"another@fake.com\",\n          rdp: \"\",\n          notes: \"Customer requires quote everytime before orders\",\n          isFlagged: false,\n          flagReason: \"\",\n          lastViewed: null\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Jacob Belmont\");\n          expect(res.body.isFlagged).toBe(false);\n          expect(res.body.flagReason).toBe(\"\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[1]._id)\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              expect(customer.name).toBe(\"Jacob Belmont\");\n              expect(customer.isFlagged).toBe(false);\n              expect(customer.flagReason).toBe(\"\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d76afc9e-1b7d-4488-9829-e9bc0498e268",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update the customer with validation errors",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update the customer with validation errors",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[2]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          name: \"\",\n          address1: \"\",\n          address2: \"\",\n          city: \"\",\n          zipcode: \"\",\n          state: \"\",\n          phone: \"\",\n          ext: \"123\",\n          fax: \"559-444-4448\",\n          email: \"failemail.com\",\n          rdp: \"\",\n          notes: \"Customer requires quote everytime before orders\",\n          isFlagged: \"messedup\",\n          flagReason: \"Do not rent, patient hasn't paid bill.\",\n          lastViewed: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.address).toBe(\"Address is required\");\n          expect(res.body.city).toBe(\"City is required\");\n          expect(res.body.zipcode).toBe(\"Zipcode is required\");\n          expect(res.body.state).toBe(\"State is required\");\n          expect(res.body.phone).toBe(\"Phone is required\");\n          expect(res.body.email).toBe(\"Email is invalid\");\n          expect(res.body.isFlagged).toBe(\n            \"You must select whether the customer has a flag or not\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9c33b636-df48-4a8a-a6af-18e02f9632a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update customer with incorrect ID.",
                "fullTitle": "CUSTOMERS PATCH /customers/:id should not update customer with incorrect ID.",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .send({})\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4d8b988b-67af-46b5-8918-003a6f29d695",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d76afc9e-1b7d-4488-9829-e9bc0498e268",
              "9c33b636-df48-4a8a-a6af-18e02f9632a9",
              "4d8b988b-67af-46b5-8918-003a6f29d695"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 448,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "16c84858-6f0b-4302-bad8-d393573607df",
            "title": "DELETE /customers/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\customers.test.js",
            "file": "\\server\\tests\\customers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a customer return the customers data",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should delete a customer return the customers data",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/customers/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(customers[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[0]._id)\n            .then(customer => {\n              expect(customer).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a21581e3-9623-420a-bea1-01f804a1b9db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete customer with incorrect ID.",
                "fullTitle": "CUSTOMERS DELETE /customers/:id should not delete customer with incorrect ID.",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/customers/${customers[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Customer.findById(customers[0]._id)\n            .then(customer => {\n              expect(customer).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c2986646-db63-47c3-8ffd-8fd3f227e150",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a21581e3-9623-420a-bea1-01f804a1b9db",
              "c2986646-db63-47c3-8ffd-8fd3f227e150"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 438,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b0936a6b-555d-4f52-b876-f7304e251fdb",
        "title": "DEFAULTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
        "file": "\\server\\tests\\defaults.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "DEFAULTS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 487,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "95cce518-2975-49f4-99d2-e1d5893aae51",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0d47c07c-e5da-41b6-9cd9-0b3931bdec1c",
            "title": "POST /register",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 466,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          // Check to see if body contains users information. If so,\n          // then the user's information was passed back meaning it succeeded.\n          expect(res.body.username).toBe(newUser.username);\n          expect(res.body.password).not.toBe(newUser.password);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "093a1c90-3944-4bd5-8ef8-c180acd05a93",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      // Set invalid properties to newUser.\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Must enter a valid email.\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "fe33e562-575d-4406-91a8-44e6113922d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"jboy@test.com\";\n      newUser.phone = \"5559992222\";\n      newUser.username = users[0].username;\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.username).toBe(\"Username already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ email: newUser.email })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "5ca3bb2b-bd0a-4b0e-8cd3-a5773355cb58",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = users[0].email;\n      newUser.phone = \"5559992222\";\n      newUser.username = \"jboy\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Email already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // If no errors during registration, check to see if newUser was\n          // stored in the database properly.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f7b38ef0-e00c-4f63-b330-62b3cced6a5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "093a1c90-3944-4bd5-8ef8-c180acd05a93",
              "fe33e562-575d-4406-91a8-44e6113922d7",
              "5ca3bb2b-bd0a-4b0e-8cd3-a5773355cb58",
              "f7b38ef0-e00c-4f63-b330-62b3cced6a5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1044,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f4ea7166-2c9c-44fa-961f-bda078e76f40",
            "title": "POST /login",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 225,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"thePassword\"\n        })\n        .expect(200)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBe(true);\n          expect(res.body.token).toBeTruthy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4ac7d817-1a41-4712-b9bc-4111b79f87cf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"wrongusername\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8f8f78a7-a410-4f0b-9756-112009568acc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"theWrongPassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "099584fe-8599-4d09-9e7a-bb2411a97447",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpsr\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n          expect(res.body.login).toBe(\"Your account is not validated yet\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3f1a2a7f-9a8c-4764-a7be-184302302587",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4ac7d817-1a41-4712-b9bc-4111b79f87cf",
              "8f8f78a7-a410-4f0b-9756-112009568acc",
              "099584fe-8599-4d09-9e7a-bb2411a97447",
              "3f1a2a7f-9a8c-4764-a7be-184302302587"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 749,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ad0f6e3a-d7d7-447b-b5ef-304db84db8fd",
            "title": "GET /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return logged in users information",
                "fullTitle": "DEFAULTS GET /profile should return logged in users information",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ab0fe1c9-f4dc-4cb6-8d49-6582a8042d67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return user information if not logged in",
                "fullTitle": "DEFAULTS GET /profile should not return user information if not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/profile\")\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.username).toBeFalsy();\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "82c74e53-145b-4b43-adfb-1141fbb63283",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ab0fe1c9-f4dc-4cb6-8d49-6582a8042d67",
              "82c74e53-145b-4b43-adfb-1141fbb63283"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 105,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "45887374-f7a8-486c-9af1-72c41cde4820",
            "title": "PATCH /profile",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the logged in users information",
                "fullTitle": "DEFAULTS PATCH /profile should update the logged in users information",
                "timedOut": false,
                "duration": 182,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"somename\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"test@test.com\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: true\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.firstName).toBe(\"somename\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6d2be391-803c-48d2-8789-18a6d345b88e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information if not logged in",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information if not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"newname\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"test@test.com\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: true\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.firstName).toBeFalsy();\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5e2e1b6f-6be0-4224-a699-277a40174512",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user information with validation errors",
                "fullTitle": "DEFAULTS PATCH /profile should not update user information with validation errors",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"newname\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Jr\",\n        username: \"blpj\",\n        password: \"thePassword\",\n        email: \"bademail\",\n        phone: \"5559991234\",\n        title: \"Web Developer\",\n        type: \"Admin\",\n        validated: \"badvalidatedvalue\"\n      };\n      request(app)\n        .patch(\"/api/profile\")\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(400)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.email).toBe(\"Must enter a valid email\");\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "22c86f0d-05fb-4db0-aae6-0d20a78e7ea6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6d2be391-803c-48d2-8789-18a6d345b88e",
              "5e2e1b6f-6be0-4224-a699-277a40174512",
              "22c86f0d-05fb-4db0-aae6-0d20a78e7ea6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 281,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "c612488f-c17c-4612-b0eb-6c121bf94105",
        "title": "EVENTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
        "file": "\\server\\tests\\events.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "EVENTS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 486,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2401752a-520e-4c95-b681-71c98f2ead5d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateEvents",
            "fullTitle": "EVENTS \"before each\" hook: populateEvents",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  CalendarEvent.remove({})\n    .then(() => {\n      var eventOne = new CalendarEvent(events[0]).save();\n      var eventTwo = new CalendarEvent(events[1]).save();\n      var eventThree = new CalendarEvent(events[2]).save();\n      return Promise.all([eventOne, eventTwo, eventThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "43187d60-da2b-4244-b369-981b097d7c77",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "e856c305-1bc4-4979-916b-63801aff026e",
            "title": "GET /events",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(events.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9b63e60b-ac13-4c8c-8a0c-e83d0953f399",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b63e60b-ac13-4c8c-8a0c-e83d0953f399"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 191,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c0659547-88c0-470c-a16a-fd1928dcc03c",
            "title": "POST /events",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(newEvent)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(newEvent.title);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: newEvent.title })\n            .then(event => {\n              expect(event).toBeTruthy();\n              expect(event.title).toBe(newEvent.title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "cedef467-92f0-49ca-bca7-e4de233fa55d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .set(\"Authorization\", users[0].token)\n        .send(badEvent)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: badEvent.title })\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "5469ad02-d583-44a1-91fd-84c30bad65f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cedef467-92f0-49ca-bca7-e4de233fa55d",
              "5469ad02-d583-44a1-91fd-84c30bad65f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 436,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d8c77f38-14c9-4154-9797-c6adea90ccdc",
            "title": "GET /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "460ff16d-d67c-488f-a965-1cab8f9d33e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4b1bbcbd-019a-4f4f-9379-185fcd62936d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "460ff16d-d67c-488f-a965-1cab8f9d33e6",
              "4b1bbcbd-019a-4f4f-9379-185fcd62936d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 266,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2298be70-67b2-4047-94cf-8ea2e041811e",
            "title": "PATCH /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"New title\",\n          color: events[0].color,\n          start: events[0].start,\n          end: events[0].end,\n          order: events[0].order\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.title).toBe(\"New title\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(\"New title\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a8ca8c1d-b3e8-4523-9c98-550d6a9096e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          title: \"\",\n          color: \"\",\n          start: \"\",\n          end: \"\",\n          order: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(events[0].title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "ac6cd515-e6a8-482f-9283-d4858054b6b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .set(\"Authorization\", users[0].token)\n        .send(events[0])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "44488aa0-2c38-477b-9d05-1fa3e42ff24d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a8ca8c1d-b3e8-4523-9c98-550d6a9096e6",
              "ac6cd515-e6a8-482f-9283-d4858054b6b5",
              "44488aa0-2c38-477b-9d05-1fa3e42ff24d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "50328095-30ce-48c3-80d5-6b91ee0d303d",
            "title": "DELETE /events/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(events[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[1]._id.toHexString())\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "21748e87-871e-41e8-b938-4d4c9813c81b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f4159d79-94ac-421e-a148-5bdb65a14976",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "21748e87-871e-41e8-b938-4d4c9813c81b",
              "f4159d79-94ac-421e-a148-5bdb65a14976"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "76dd98b5-edf7-4b04-839a-dfd800210ee8",
        "title": "PRODUCT TYPES",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 486,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9268602e-8e36-41eb-a475-6ad8cc61f443",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ProductType.remove({})\n    .then(() => {\n      var modification = new ProductType(productTypes[0]).save();\n      var container = new ProductType(productTypes[1]).save();\n      var rentalModification = new ProductType(productTypes[2]).save();\n      var delivery = new ProductType(productTypes[3]).save();\n      var pickup = new ProductType(productTypes[4]).save();\n      return Promise.all([\n        modification,\n        container,\n        rentalModification,\n        delivery,\n        pickup\n      ]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "fc992df1-f29b-413b-8cf1-80f0100aad10",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ba8b8c14-e114-47ff-b85b-a69b3a3bf391",
            "title": "GET /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          // check to see if product types array exists.\n          expect(res.body.length).toBe(5);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7aa85e3c-14d2-4640-8784-9c963e4b9b01",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7aa85e3c-14d2-4640-8784-9c963e4b9b01"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "99bc1e05-1e3d-45b7-a174-19bd8e67dfe2",
            "title": "POST /products/types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 347,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProductType)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(newProductType.type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result.type).toBe(newProductType.type);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "484cfc55-8e45-43b2-9d7a-2dc7589975ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send({ type: \"\" })\n        .expect(400)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "555fa251-8e89-4170-94bf-aab3144fced7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "484cfc55-8e45-43b2-9d7a-2dc7589975ef",
              "555fa251-8e89-4170-94bf-aab3144fced7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 523,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b54cc2f3-4dcc-4118-a281-a74999c9741e",
            "title": "GET /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c3d1757-36b0-44d1-9985-3f72fc308ed4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "30841825-78d6-476c-a968-2c5a7a16ad1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c3d1757-36b0-44d1-9985-3f72fc308ed4",
              "30841825-78d6-476c-a968-2c5a7a16ad1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 273,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "80f4cfbd-e281-4d81-9170-e2bcf73858c6",
            "title": "PATCH /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"new modification\"\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"new modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8785ce1f-3122-486e-831c-430541a593b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dc474096-0b4a-49ac-af41-f03f4f486134",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"container\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"That type is already being used\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "47c7fd4c-3093-44dd-9395-bc244398b593",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"some new mod\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"No product found with that ID in the URL\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ee9eb3b3-d1b1-45ea-8947-a692d5f2c749",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8785ce1f-3122-486e-831c-430541a593b5",
              "dc474096-0b4a-49ac-af41-f03f4f486134",
              "47c7fd4c-3093-44dd-9395-bc244398b593",
              "ee9eb3b3-d1b1-45ea-8947-a692d5f2c749"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 632,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "88998b69-0751-431c-a523-c871d50ef067",
            "title": "DELETE /products/types/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 260,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(productTypes[0].type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ProductType.findById(productTypes[0]._id.toHexString())\n            .then(type => {\n              expect(type).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "1d82bebb-8c3b-4761-a7f7-b514dfbed8be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "753492e2-8aca-44c6-a324-b286ee4459ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(404)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"Unable to find and remove the product type\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d4e04601-4387-46f9-a6f5-781d3199ab32",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d82bebb-8c3b-4761-a7f7-b514dfbed8be",
              "753492e2-8aca-44c6-a324-b286ee4459ba",
              "d4e04601-4387-46f9-a6f5-781d3199ab32"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 538,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ea49b798-77d6-4c71-ab1b-8b32e06f7a74",
        "title": "PRODUCTS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 169,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5cfd7820-2ba9-4151-8990-0f1b2cb02791",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "0929b1d4-9ad1-42bb-bae4-858bc8a605d2",
            "title": "GET /products",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c382696e-4fd2-4a59-9134-3ad5d8ff9737",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c382696e-4fd2-4a59-9134-3ad5d8ff9737"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 266,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "febad415-19fa-4028-a9a2-2526c107ce85",
            "title": "POST /products",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(newProduct.name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "12a913b9-39a2-4803-9823-4407fd8ac540",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct.name = \"\";\n      newProduct.shortName = \"\";\n      newProduct.rental = \"\";\n      newProduct.type = \"\";\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "56ef064d-a50e-4bd8-9b62-63186f5d4106",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12a913b9-39a2-4803-9823-4407fd8ac540",
              "56ef064d-a50e-4bd8-9b62-63186f5d4106"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d305908d-8f92-486e-8d6a-1d922b4194d5",
            "title": "GET /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c0773305-e95a-4c16-ab19-ec2b92419e68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e0fb6aa6-3c01-4e9c-9990-1fac998f26f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c0773305-e95a-4c16-ab19-ec2b92419e68",
              "e0fb6aa6-3c01-4e9c-9990-1fac998f26f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 271,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e27c4915-6387-46b0-80b2-7870c10c06b2",
            "title": "PATCH /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(\"40' Pickup\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "97740796-4b11-4247-97c8-c2e3aed39350",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"No product found.\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a8451a00-8fa0-49c7-a84b-770b717037ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"\",\n        shortName: \"\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: \"\",\n        type: \"\"\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b6f6350e-ddb8-495e-b8ff-7bf6096228f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97740796-4b11-4247-97c8-c2e3aed39350",
              "a8451a00-8fa0-49c7-a84b-770b717037ae",
              "b6f6350e-ddb8-495e-b8ff-7bf6096228f4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 447,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4739c767-6c23-4445-a1c9-5c89946771e1",
            "title": "DELETE /products/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Product.findById(products[0]._id.toHexString())\n            .then(product => {\n              expect(product).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "36fa978f-e92b-469d-b080-559c836d94bc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4efa4101-3f9f-4537-be13-a813d106cd78",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36fa978f-e92b-469d-b080-559c836d94bc",
              "4efa4101-3f9f-4537-be13-a813d106cd78"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "ebc8705d-1911-4810-b4ba-6342e0a5667b",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
        "file": "\\server\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 479,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1d6bffcf-7a70-4f85-bcaf-3e2930441526",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "de443fbb-d701-4f00-8613-659a5407c84f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "96941f37-f9b9-4b08-bdd7-26eecff4167d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 179,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a1e16723-6ca1-4a27-ac62-ceda31d17b16",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "8f5a7eb2-4c2e-4947-8496-d0fad44479ff",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1c360fc9-beb7-4228-a770-f72afe26bea6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Quote.remove({})\n    .then(() => {\n      var quoteOne = new Quote(quotes[0]).save();\n      return Promise.all([quoteOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "478b286f-52ff-4e9e-90fe-3c875450c539",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2e558bfd-06d5-4be4-bfb3-22a4621cac4b",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0f304927-a8be-4a72-93b3-5d700864974c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f3a0ee96-204f-44d9-83e9-482dfaf8df16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0f304927-a8be-4a72-93b3-5d700864974c",
              "f3a0ee96-204f-44d9-83e9-482dfaf8df16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 280,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "94a7a3f3-6e2b-49d7-99eb-ff898d6f53ba",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 531,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer).toBe(newQuote.customer);\n          expect(res.body.attention).toBe(newQuote.attention);\n          expect(res.body.isHidden).toBe(false);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dfaefedf-b0c7-4ab8-8737-3974d89ac2a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ac47c495-c0d9-4e53-9495-4e4f0d4ff3f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newQuote.purchaseType = \"not a number\";\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchaseType).toBe(\n            \"Purchase type selected does not exist\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ee500304-c3ad-460b-8aa3-4f6a9380493e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfaefedf-b0c7-4ab8-8737-3974d89ac2a8",
              "ac47c495-c0d9-4e53-9495-4e4f0d4ff3f3",
              "ee500304-c3ad-460b-8aa3-4f6a9380493e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 799,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fb8a648f-2252-4036-af33-6e7ecc1bf494",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "820851aa-0914-4258-86a9-fd2c7bd76169",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3d817936-145b-4f63-b941-b85e79ffe50e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this customer\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d3cf33fc-6f12-4fe9-9fc5-961af00b06a5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "820851aa-0914-4258-86a9-fd2c7bd76169",
              "3d817936-145b-4f63-b941-b85e79ffe50e",
              "d3cf33fc-6f12-4fe9-9fc5-961af00b06a5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 364,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1f0078c2-1098-4307-9ff1-6c40c0fad6db",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b06c1b6a-d823-49c3-8f76-d9cb6ba22160",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e723a036-4f18-441e-840d-ebe3364bee88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this user\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "55c19dee-8dea-42cf-95e8-d3e95057c649",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b06c1b6a-d823-49c3-8f76-d9cb6ba22160",
              "e723a036-4f18-441e-840d-ebe3364bee88",
              "55c19dee-8dea-42cf-95e8-d3e95057c649"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 363,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7bce44e5-b8b7-43ba-b970-deedec42a7dd",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7579b03b-12b0-4585-bf05-54235afd06ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "62a74782-dcf7-430c-9957-2705a6948279",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f154601c-9476-497c-9084-98c920d6603f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7579b03b-12b0-4585-bf05-54235afd06ad",
              "62a74782-dcf7-430c-9957-2705a6948279",
              "f154601c-9476-497c-9084-98c920d6603f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c723ec98-5744-4e7b-aa75-5c5e8935137a",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 606,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(updateQuote._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7bf103df-8d88-43ce-9a6a-d9fab9b4f986",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "584b5377-dfac-4df4-b47c-dcd96728845f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}sss`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"No quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "57c1a93a-8859-47de-b596-c86a4c2bd78b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 273,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      updateQuote.purchasePrices = \"sd235523\";\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchasePrices).toBe(\n            \"There is an issue with the quote's purchase prices\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b110eeb4-0c02-4ed2-8cba-e24d9d106923",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7bf103df-8d88-43ce-9a6a-d9fab9b4f986",
              "584b5377-dfac-4df4-b47c-dcd96728845f",
              "57c1a93a-8859-47de-b596-c86a4c2bd78b",
              "b110eeb4-0c02-4ed2-8cba-e24d9d106923"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 974,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3a8807bf-75f5-4fb0-ba96-b58110892259",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "78ef37bd-a36b-443b-bfe3-a91aa35ad594",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5d08aa4c-e341-411f-91c7-c48c7a984f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5fe0828c-bf35-41b8-829e-cf4126e13bef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78ef37bd-a36b-443b-bfe3-a91aa35ad594",
              "5d08aa4c-e341-411f-91c7-c48c7a984f0d",
              "5fe0828c-bf35-41b8-829e-cf4126e13bef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 372,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "e54ee7a6-719f-4e69-a504-3a0940e0d638",
        "title": "SETTINGS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
        "file": "\\server\\tests\\settings.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "SETTINGS \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 487,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "dc0d35fe-cd1a-4796-9365-cdf80ec1b0a6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "30ad01d0-e62b-4a9f-94bf-b3161e6dfd47",
            "title": "Purchase Types",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
            "file": "\\server\\tests\\settings.test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook: populatePurchaseTypes",
                "fullTitle": "SETTINGS Purchase Types \"before each\" hook: populatePurchaseTypes",
                "timedOut": false,
                "duration": 174,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
                "err": {},
                "isRoot": false,
                "uuid": "2643ce55-4067-4f5b-9eda-abab378f9bc8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a2ee0eef-c53b-4dc4-9e7d-08f5bc00e2b0",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 176,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.length).toBe(2);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b713f37-a601-49c1-b69a-e7968d1454b8",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4b713f37-a601-49c1-b69a-e7968d1454b8"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 176,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "bc4fd437-4020-4337-891c-381f8bedd433",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 263,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findOne({ type: \"Resale\" })\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39aee4f6-7281-4010-8e6f-c94b9171a9bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 92,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3dbf5374-ee05-4f3b-92fd-4caa499af340",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "39aee4f6-7281-4010-8e6f-c94b9171a9bf",
                  "3dbf5374-ee05-4f3b-92fd-4caa499af340"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 355,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "67f32d14-c41f-4002-8640-91e463a335e8",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 177,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(purchaseTypes[0].type);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "65b6253f-a8f1-4778-b3e6-a87db8ed488b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\n              \"There was no purchase type found\"\n            );\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "120fdeb1-72e9-4571-b0d8-9ab715bab464",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "65b6253f-a8f1-4778-b3e6-a87db8ed488b",
                  "120fdeb1-72e9-4571-b0d8-9ab715bab464"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 266,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "01a08eaf-68a0-4ebf-84d6-80bbe49c608a",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 261,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2dd31543-aae7-411e-b4d3-c5b895c8261d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 179,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b2317c9b-7895-404b-9f14-361bd9cb7dd7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 174,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "591854c9-846e-444c-b068-be60564dab36",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2dd31543-aae7-411e-b4d3-c5b895c8261d",
                  "b2317c9b-7895-404b-9f14-361bd9cb7dd7",
                  "591854c9-846e-444c-b068-be60564dab36"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 614,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "c9306f78-4808-45e9-bf70-c33ff410415f",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 259,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.type).toBe(purchaseTypes[0].type);\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeFalsy();\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a5d40000-77a4-432e-96ce-912f0ab5e84f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 175,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(purchaseTypes[0].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bad8cd3a-d277-4ff0-8e59-eb86e19b4025",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a5d40000-77a4-432e-96ce-912f0ab5e84f",
                  "bad8cd3a-d277-4ff0-8e59-eb86e19b4025"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 434,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "78773080-d83d-48e3-993a-413d244521d9",
        "title": "TODOS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
        "file": "\\server\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 486,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "7af4895e-fce3-4496-a6b8-14eac2edbf2d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Todo.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var todoOne = new Todo(todos[0]).save();\n      var todoTwo = new Todo(todos[1]).save();\n      var todoThree = new Todo(todos[2]).save();\n      return Promise.all([todoOne, todoTwo, todoThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "12f67c47-48e6-4b3e-bf70-e909be297b5d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "b87e580d-31a6-4b48-a400-72f5a5c28e12",
            "title": "GET /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(2);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8485d10b-4a38-4e80-8546-3b54877ba6f0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7dceca9f-ee8d-4294-80ee-5b7764527885",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8485d10b-4a38-4e80-8546-3b54877ba6f0",
              "7dceca9f-ee8d-4294-80ee-5b7764527885"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 182,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "201218f0-7257-4687-a3ea-3a63d6a9339f",
            "title": "POST /todos",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"The newest todo\");\n          expect(res.body.creator).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e23447e3-e752-4729-bd3e-bdf86eac6953",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "707d54ea-4df5-42d5-94c7-b78a8bb1d29e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "afddb13d-562e-4217-9c8c-d67afb7627af",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e23447e3-e752-4729-bd3e-bdf86eac6953",
              "707d54ea-4df5-42d5-94c7-b78a8bb1d29e",
              "afddb13d-562e-4217-9c8c-d67afb7627af"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 279,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b0518a60-2ff0-4f44-a326-6c9ef107fc0a",
            "title": "GET /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n          expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "17a956ce-46b0-4172-a883-639f72b951d4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "85b6b965-da4b-45fd-9051-009db32daedf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17a956ce-46b0-4172-a883-639f72b951d4",
              "85b6b965-da4b-45fd-9051-009db32daedf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "33ed4bc8-d7af-451a-9a95-422a8d82eca0",
            "title": "PATCH /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"a new description\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b4941e6e-a155-4395-b339-69cc2b1aed66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 186,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "92325077-ff9d-430b-aee5-0349baa2a2fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b018e1b0-1556-4929-b78d-943b58403a5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4941e6e-a155-4395-b339-69cc2b1aed66",
              "92325077-ff9d-430b-aee5-0349baa2a2fe",
              "b018e1b0-1556-4929-b78d-943b58403a5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 455,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6ea4f6c9-b6a9-4d4c-8728-81f0f90501c2",
            "title": "DELETE /todo/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a1a58ff5-6e42-4510-8791-0e2f37ab39f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1aec6ccc-5348-4e24-8f65-c81f9d4d022b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1a58ff5-6e42-4510-8791-0e2f37ab39f4",
              "1aec6ccc-5348-4e24-8f65-c81f9d4d022b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "fb4a9b52-2d4c-494d-971b-ed3fa8bd6276",
        "title": "USERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
        "file": "\\server\\tests\\users.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "USERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 487,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "d111f403-a55f-40cd-9df2-d3bd078eb86a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9a6bcde1-fc83-4ace-8161-e20e9f97a910",
            "title": "GET /users",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(users.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "70e84f98-8c0c-4034-95db-16577b3b3cfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "70e84f98-8c0c-4034-95db-16577b3b3cfb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 174,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3da04e9d-eb32-46bc-8629-ea711c0666b9",
            "title": "POST /users",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 659,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.username).toBe(newUser.username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.firstName).toBe(newUser.firstName);\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d356b766-cbd4-4e15-86b4-6f04901196e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      newUser.validated = \"hello\";\n      request(app)\n        .post(\"/api/users\")\n        .set(\"Authorization\", users[0].token)\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.email).toBe(\"Must enter a valid email\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c5d60376-7a3e-4e0d-9967-5b3c25069d10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d356b766-cbd4-4e15-86b4-6f04901196e0",
              "c5d60376-7a3e-4e0d-9967-5b3c25069d10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 835,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e8b0d7e6-4a6b-49a6-9390-85bbe82fddf2",
            "title": "GET /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3e2ac87f-8347-4ed4-b74b-bc19eb31a4ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.username).not.toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f46acd84-ed74-4e23-a03b-0412172d43fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3e2ac87f-8347-4ed4-b74b-bc19eb31a4ed",
              "f46acd84-ed74-4e23-a03b-0412172d43fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a4218c54-1e65-40ee-badd-de3b48145958",
            "title": "PATCH /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      users[1].validated = true;\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(users[1])\n        .expect(200)\n        .expect(res => {\n          expect(res.body.username).toBe(users[1].username);\n          expect(res.body.validated).toBe(true);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8ec98fae-3172-46e7-a969-086e1f95f6ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/users/${users[1]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .send(users[1])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Invalid ID\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3112ae2d-a58f-4d3e-a56b-7803bc6151ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"Brian\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Sr\",\n        username: \"blpsr\",\n        password: \"thePassword\",\n        email: \"gbr@test.com\",\n        phone: \"5559991224\",\n        title: \"Manager\",\n        type: \"Staff\",\n        validated: \"someWrongValidation\"\n      };\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(userData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              expect(user.firstName).toBe(\"Brian\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "455beba4-95c8-42f7-931a-5c464b82a1c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ec98fae-3172-46e7-a969-086e1f95f6ab",
              "3112ae2d-a58f-4d3e-a56b-7803bc6151ae",
              "455beba4-95c8-42f7-931a-5c464b82a1c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 534,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7757e5fc-1c64-43a8-86d7-c0fa056ad38b",
            "title": "DELETE /users/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(users[0]._id.toHexString());\n          expect(res.body.username).toBe(users[0].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[0]._id.toHexString())\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "741f56e6-5f4f-4940-9766-8728008ce22e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 179,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[1]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.username).not.toBe(users[1].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.username).toBe(users[1].username);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "72ccc7ba-633d-4f69-9ad7-c91d65bd3130",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "741f56e6-5f4f-4940-9766-8728008ce22e",
              "72ccc7ba-633d-4f69-9ad7-c91d65bd3130"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 436,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}