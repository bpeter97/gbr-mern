{
  "stats": {
    "suites": 26,
    "tests": 51,
    "passes": 51,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-08T03:31:59.061Z",
    "end": "2018-05-08T03:32:33.481Z",
    "duration": 34420,
    "testsRegistered": 51,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f7f51d03-95d2-4706-aaf0-b8c63aabae81",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": "\"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 80,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      bcrypt.genSalt(10, (err, salt) => {\n        // Now hash the password with the salt.\n        bcrypt.hash(\"thePassword\", salt, (err, hash) => {\n          if (err) throw err;\n          // Assign the newly hashed password to the new User object\n          users[0].password = hash;\n          users[1].password = hash;\n          users[2].password = hash;\n          var userOne = new User(users[0]).save();\n          var userTwo = new User(users[1]).save();\n          var userThree = new User(users[2]).save();\n          return Promise.all([userOne, userTwo, userThree]);\n        });\n      });\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "4cf5ba0d-82ca-4248-9017-57d952b2868b",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateProductTypes",
        "fullTitle": "\"before each\" hook: populateProductTypes",
        "timedOut": false,
        "duration": 190,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  ProductType.remove({})\n    .then(() => {\n      var modification = new ProductType(productTypes[0]).save();\n      var container = new ProductType(productTypes[1]).save();\n      var rentalModification = new ProductType(productTypes[2]).save();\n      var delivery = new ProductType(productTypes[3]).save();\n      var pickup = new ProductType(productTypes[4]).save();\n      return Promise.all([\n        modification,\n        container,\n        rentalModification,\n        delivery,\n        pickup\n      ]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "c57210a8-ee8c-421b-85d2-02e274481c3a",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9ec3fcfb-1d93-4784-8f68-f257e6ab138b",
        "title": "CONTAINERS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
        "file": "\\server\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 166,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "cc213338-8a54-48dd-8740-d5238df365f7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 164,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "df7ecfbe-3dd8-43ca-a940-8eae20e55d35",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 163,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "6cfc2f4b-42c6-45ae-bb9e-bc027a7e5178",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1597f395-1341-4eac-a304-927330208193",
            "title": "GET /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/sizes\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSizes.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7ef5b2cd-69d6-4f7a-91fe-f211e9047173",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7ef5b2cd-69d6-4f7a-91fe-f211e9047173"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 112,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cc9dcf98-f8ee-4a50-b773-46c5ebc05688",
            "title": "POST /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 269,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .send({ size: \"20C\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"20C\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "93d2a28f-220d-4291-8b7a-9a5477c57388",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "257b5072-fc56-4263-95f4-c14fa4cf73ca",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "93d2a28f-220d-4291-8b7a-9a5477c57388",
              "257b5072-fc56-4263-95f4-c14fa4cf73ca"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c316c370-4ad1-4ab6-856c-7ad61c325d5d",
            "title": "GET /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize._id).toBe(\n            containerSizes[0]._id.toHexString()\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0a46b3a3-ec3a-4d9a-9233-b02d9f2975c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fa3ab08a-62cf-495b-a91e-7dd0267f551b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a46b3a3-ec3a-4d9a-9233-b02d9f2975c0",
              "fa3ab08a-62cf-495b-a91e-7dd0267f551b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 89,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "75b8dcc7-04a6-402e-a361-8ae9ef1f3418",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 251,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"10\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"10\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"10\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "9f286d8d-abc6-430d-9a7a-32637b9823fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"20\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "6bad035a-9362-4e4b-907d-2dc29d220bf3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "76e3d6ce-dfac-4a79-9678-7d7d8a3bd0e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"40\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"That size already exists\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c19503f0-deca-4584-9fec-4a0375673bd7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f286d8d-abc6-430d-9a7a-32637b9823fe",
              "6bad035a-9362-4e4b-907d-2dc29d220bf3",
              "76e3d6ce-dfac-4a79-9678-7d7d8a3bd0e1",
              "c19503f0-deca-4584-9fec-4a0375673bd7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 433,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fc0d93e6-c82f-4310-bd29-ab987b05ad61",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(containerSizes[0].size);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0d98b301-2ba9-47d4-b276-c9bfaf362ff2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "a6f30512-d68e-43df-848d-212ceb35af8d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d98b301-2ba9-47d4-b276-c9bfaf362ff2",
              "a6f30512-d68e-43df-848d-212ceb35af8d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 252,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c5962ed4-0733-4dcc-9c25-c33da4756638",
            "title": "GET /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containers.length).toBe(3);\n          // Check to see if each container has a size and stats.\n          expect(res.body.containers[0].size).not.toBe(null);\n          expect(res.body.containers[1].size).not.toBe(null);\n          expect(res.body.containers[2].size).not.toBe(null);\n          expect(res.body.containers[0].stats).not.toBe(null);\n          expect(res.body.containers[1].stats).not.toBe(null);\n          expect(res.body.containers[2].stats).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4d8e0323-4315-42b8-b872-b8a224792bd4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4d8e0323-4315-42b8-b872-b8a224792bd4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 174,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6c07ca64-30f3-461c-9b83-87d1cba03129",
            "title": "POST /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/\")\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.container.size).not.toBe(null);\n          expect(res.body.container.stats).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeTruthy();\n              expect(container.size).not.toBe(null);\n              expect(container.stats).not.toBe(null);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "b1176b9a-eab8-49e4-98da-cf6cde1e7ca6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newContainer.rentalResale = \"\";\n      newContainer.hasOnBoxNumbers = 123;\n      newContainer.hasShelves = 123;\n      newContainer.hasSigns = 123;\n      newContainer.isPainted = 123;\n      request(app)\n        .post(\"/api/containers/\")\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n          expect(res.body.hasShelves).toBe(\n            \"You must select whether the container has shelves or not\"\n          );\n          expect(res.body.isPainted).toBe(\n            \"You must select whether the container is painted or not\"\n          );\n          expect(res.body.hasOnBoxNumbers).toBe(\n            \"You must select whether the container has GBR numbers or not\"\n          );\n          expect(res.body.hasSigns).toBe(\n            \"You must select whether the container has signs or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "471c03d2-54b2-4976-9a35-f4abc57cd987",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b1176b9a-eab8-49e4-98da-cf6cde1e7ca6",
              "471c03d2-54b2-4976-9a35-f4abc57cd987"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 342,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "23ff1bd3-f1a4-40c2-8af4-2f5367de00a1",
            "title": "GET /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.serialNumber).toBe(\n            containers[0].serialNumber\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "387e8aa9-d4f7-4fb5-9934-3dac2a3b1566",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b03480fd-b654-4739-9fbb-ec32efda301b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "387e8aa9-d4f7-4fb5-9934-3dac2a3b1566",
              "b03480fd-b654-4739-9fbb-ec32efda301b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 169,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a3a64cd1-e398-4f42-8c3a-7aec5446bbe4",
            "title": "PATCH /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 426,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .send(patchData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.hasOnBoxNumbers).toBe(\n            patchData.hasOnBoxNumbers\n          );\n          expect(res.body.container.hasSigns).toBe(patchData.hasSigns);\n          expect(res.body.container.hasShelves).toBe(patchData.hasShelves);\n          expect(res.body.container.isPainted).toBe(patchData.isPainted);\n          expect(res.body.container.isFlagged).toBe(patchData.isFlagged);\n          expect(res.body.container.flagReason).toBe(patchData.flagReason);\n          expect(res.body.container.stats.currentAddress).toBe(\n            patchData.currentAddress\n          );\n          expect(res.body.container.stats.currentRentee).toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8f638dda-b89f-4b6a-b2e2-0b9bb76c180a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: \"\",\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        rentalResale: \"\",\n        currentAddress: \"\",\n        currentlyRented: \"\",\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          expect(res.body.size).toBe(\"Size is required\");\n          expect(res.body.currentlyRented).toBe(\n            \"You must select whether the container is currently rented\"\n          );\n          expect(res.body.currentAddress).toBe(\"Current address is required\");\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7d6b3f20-4ad5-4eed-9a53-14f4596843e5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}ss`)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "785513d1-bb70-47fd-a958-25e8fdf45f3b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8f638dda-b89f-4b6a-b2e2-0b9bb76c180a",
              "7d6b3f20-4ad5-4eed-9a53-14f4596843e5",
              "785513d1-bb70-47fd-a958-25e8fdf45f3b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 434,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "aceceb28-927f-4a07-897a-a35ee4550b15",
            "title": "DELETE /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container._id).toBe(containers[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Container.findById(containers[1]._id)\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7e97e787-9b19-4184-b45b-de76b578605c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0179552f-8ea2-4ec0-8ed3-fbb564537b1c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7e97e787-9b19-4184-b45b-de76b578605c",
              "0179552f-8ea2-4ec0-8ed3-fbb564537b1c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 249,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9b108b69-22c4-4315-89e9-46cca124f0a3",
        "title": "DEFAULTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
        "file": "\\server\\tests\\defaults.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9f62ff9e-9d15-4a76-9bd1-313c7c75e862",
            "title": "POST /register",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 450,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          // Check to see if body contains users information. If so,\n          // then the user's information was passed back meaning it succeeded.\n          expect(res.body.username).toBe(newUser.username);\n          expect(res.body.password).not.toBe(newUser.password);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "72f5a160-523c-4e25-a1d5-57767abde1b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      // Set invalid properties to newUser.\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Must enter a valid email.\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c50713b1-c79f-4ad0-b5a4-473008c6e2c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"jboy@test.com\";\n      newUser.phone = \"5559992222\";\n      newUser.username = users[0].username;\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.username).toBe(\"Username already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ email: newUser.email })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "dc4f8abf-c443-4e4c-ab9b-d730fb497fbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = users[0].email;\n      newUser.phone = \"5559992222\";\n      newUser.username = \"jboy\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Email already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // If no errors during registration, check to see if newUser was\n          // stored in the database properly.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "577fe0c2-9fc6-4e11-a758-094f703528d5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72f5a160-523c-4e25-a1d5-57767abde1b9",
              "c50713b1-c79f-4ad0-b5a4-473008c6e2c0",
              "dc4f8abf-c443-4e4c-ab9b-d730fb497fbd",
              "577fe0c2-9fc6-4e11-a758-094f703528d5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 956,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "23c055cc-73ac-4793-9dd7-590a86b17f75",
            "title": "POST /login",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 193,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"thePassword\"\n        })\n        .expect(200)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBe(true);\n          expect(res.body.token).toBeTruthy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "11cf4ff7-44ce-41d0-88b1-3d23d7debaae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"wrongusername\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c9f71bb8-b800-49b6-9962-452524a03adc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"theWrongPassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "752607c5-0d19-4c8f-a668-1d0061bf575d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpsr\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n          expect(res.body.login).toBe(\"Your account is not validated yet\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0e129fcc-f3a4-4600-bac1-7046e8776145",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11cf4ff7-44ce-41d0-88b1-3d23d7debaae",
              "c9f71bb8-b800-49b6-9962-452524a03adc",
              "752607c5-0d19-4c8f-a668-1d0061bf575d",
              "0e129fcc-f3a4-4600-bac1-7046e8776145"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 654,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b191a29e-7f21-498f-9322-6233a8ee4dfd",
        "title": "PRODUCT TYPES",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8ac8e89e-c50a-4a06-8e95-ddda21c81db3",
            "title": "GET /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products/types\")\n        .expect(200)\n        .expect(res => {\n          // check to see if product types array exists.\n          expect(res.body.productTypes).toBeTruthy();\n          expect(res.body.productTypes.length).toBe(5);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "77231205-70b9-4172-b2d8-4676ad575205",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77231205-70b9-4172-b2d8-4676ad575205"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 94,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e1adabc5-e6c0-46a4-a111-761ca7964982",
            "title": "POST /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 256,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .send(newProductType)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.productType.type).toBe(newProductType.type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result.type).toBe(newProductType.type);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "6903ee2d-a7bf-4853-a7e5-b23f30b221d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .send({ type: \"\" })\n        .expect(400)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0b525a72-0881-49db-bc61-fb9dc87e95a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6903ee2d-a7bf-4853-a7e5-b23f30b221d8",
              "0b525a72-0881-49db-bc61-fb9dc87e95a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 341,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "814bf572-8c6e-40e5-afa5-eff725607bb7",
            "title": "GET /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(\"modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fc1c2399-11b4-4057-aff3-d60318762d59",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b89e0c40-b894-4451-8051-7b349dd3514a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc1c2399-11b4-4057-aff3-d60318762d59",
              "b89e0c40-b894-4451-8051-7b349dd3514a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 88,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "42a0661d-744d-4707-ad32-0b9668467754",
            "title": "PATCH /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .send({\n          type: \"new modification\"\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(\"new modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3d62bf30-80a6-4616-a6f4-439dbb4ddd5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5baf2558-8a0b-485a-a325-a3fdbd161125",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .send({\n          type: \"container\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"That type is already being used\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0a1ba7df-bee2-42bf-972b-7449c007c30e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .send({\n          type: \"some new mod\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"No product found with that ID in the URL\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0f0ccfa4-8392-478e-8acc-865ca405e9bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3d62bf30-80a6-4616-a6f4-439dbb4ddd5d",
              "5baf2558-8a0b-485a-a325-a3fdbd161125",
              "0a1ba7df-bee2-42bf-972b-7449c007c30e",
              "0f0ccfa4-8392-478e-8acc-865ca405e9bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 256,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "04de07b6-765a-4783-8a97-0814303845c1",
            "title": "DELETE /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(productTypes[0].type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ProductType.findById(productTypes[0]._id.toHexString())\n            .then(type => {\n              expect(type).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "439f485f-15f1-4b95-955e-12e55ab0b1a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "36a8173b-efdd-44bb-bada-f79c189e2db6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n        .expect(404)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"Unable to find and remove the product type\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e899058c-e70c-4298-9b70-0e95762d6917",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "439f485f-15f1-4b95-955e-12e55ab0b1a3",
              "36a8173b-efdd-44bb-bada-f79c189e2db6",
              "e899058c-e70c-4298-9b70-0e95762d6917"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 257,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "75139e86-5aa1-47c6-9b35-58a6cbef205f",
        "title": "PRODUCTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 166,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "e57c5ac4-ecbf-47cb-9038-2a4ec343a6c9",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "305af071-05e2-4f90-8831-37d4bcac47af",
            "title": "GET /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.products).toBeTruthy();\n          expect(res.body.products.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b4a0fb37-2a21-4fd5-9e1e-a84733cd25c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b4a0fb37-2a21-4fd5-9e1e-a84733cd25c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 165,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1ba8e505-4e9b-423d-aabb-d17180de2a61",
            "title": "POST /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products\")\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.product.name).toBe(newProduct.name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "eb199815-e292-4d1c-b344-a5cec8523ee4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct.name = \"\";\n      newProduct.shortName = \"\";\n      newProduct.rental = \"\";\n      newProduct.type = \"\";\n      request(app)\n        .post(\"/api/products\")\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "cb393c14-ff7d-45f5-985c-51ba716c8024",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb199815-e292-4d1c-b344-a5cec8523ee4",
              "cb393c14-ff7d-45f5-985c-51ba716c8024"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 330,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6989a152-c7f6-4c3c-a24a-6d6fe9e21a54",
            "title": "GET /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(products[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a7102ea5-e229-496f-b9e2-c9f155352682",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "77391dda-819d-4860-aecc-e5dd69073390",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a7102ea5-e229-496f-b9e2-c9f155352682",
              "77391dda-819d-4860-aecc-e5dd69073390"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 89,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "896bf5b3-cfbe-49be-9137-5d25230e03f7",
            "title": "PATCH /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(\"40' Pickup\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3b233cfe-7e8e-4335-971b-f176c17823ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"No product found.\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0cec5f60-6a6c-4e8b-9a3b-67d628d47617",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"\",\n        shortName: \"\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: \"\",\n        type: \"\"\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "35603a1a-260c-4baf-ae0d-d1b28b7a89d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3b233cfe-7e8e-4335-971b-f176c17823ea",
              "0cec5f60-6a6c-4e8b-9a3b-67d628d47617",
              "35603a1a-260c-4baf-ae0d-d1b28b7a89d0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 172,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "19e14ae7-1b3e-4e75-8c23-bf989538eef9",
            "title": "DELETE /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(products[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Product.findById(products[0]._id.toHexString())\n            .then(product => {\n              expect(product).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e18fa48d-3931-43b9-a625-688d551bddaf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4b356761-3e8e-4959-ad5e-611298ace632",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e18fa48d-3931-43b9-a625-688d551bddaf",
              "4b356761-3e8e-4959-ad5e-611298ace632"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 169,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}