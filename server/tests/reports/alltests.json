{
  "stats": {
    "suites": 45,
    "tests": 81,
    "passes": 74,
    "pending": 7,
    "failures": 0,
    "start": "2018-05-15T00:26:36.612Z",
    "end": "2018-05-15T00:28:07.462Z",
    "duration": 90850,
    "testsRegistered": 81,
    "passPercent": 100,
    "pendingPercent": 8.6,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "0322a273-20b3-4c96-a3cc-ab25d740fa05",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": "\"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 196,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      bcrypt.genSalt(10, (err, salt) => {\n        // Now hash the password with the salt.\n        bcrypt.hash(\"thePassword\", salt, (err, hash) => {\n          if (err) throw err;\n          // Assign the newly hashed password to the new User object\n          users[0].password = hash;\n          users[1].password = hash;\n          users[2].password = hash;\n        });\n      });\n      var userOne = new User(users[0]).save();\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "432c9e2a-0327-415a-87c3-76d3e60e0504",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateEvents",
        "fullTitle": "\"before each\" hook: populateEvents",
        "timedOut": false,
        "duration": 172,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  CalendarEvent.remove({})\n    .then(() => {\n      var eventOne = new CalendarEvent(events[0]).save();\n      var eventTwo = new CalendarEvent(events[1]).save();\n      var eventThree = new CalendarEvent(events[2]).save();\n      return Promise.all([eventOne, eventTwo, eventThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "80f4af59-f9ba-4209-b22d-394c28f061b3",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateProductTypes",
        "fullTitle": "\"before each\" hook: populateProductTypes",
        "timedOut": false,
        "duration": 168,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  ProductType.remove({})\n    .then(() => {\n      var modification = new ProductType(productTypes[0]).save();\n      var container = new ProductType(productTypes[1]).save();\n      var rentalModification = new ProductType(productTypes[2]).save();\n      var delivery = new ProductType(productTypes[3]).save();\n      var pickup = new ProductType(productTypes[4]).save();\n      return Promise.all([\n        modification,\n        container,\n        rentalModification,\n        delivery,\n        pickup\n      ]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "d768ac11-ae3f-49a4-9497-9701004a4767",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populatePurchaseTypes",
        "fullTitle": "\"before each\" hook: populatePurchaseTypes",
        "timedOut": false,
        "duration": 173,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "83888015-4179-4e68-9c6f-d962d56ec143",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": "\"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 202,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      bcrypt.genSalt(10, (err, salt) => {\n        // Now hash the password with the salt.\n        bcrypt.hash(\"thePassword\", salt, (err, hash) => {\n          if (err) throw err;\n          // Assign the newly hashed password to the new User object\n          users[0].password = hash;\n          users[1].password = hash;\n          users[2].password = hash;\n        });\n      });\n      var userOne = new User(users[0]).save();\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "b986f3cb-ee1a-4989-94f2-321b7e6d37c9",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "dcbf8fdf-7b68-4a09-9e10-6686c545cbfd",
        "title": "CONTAINERS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
        "file": "\\server\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "84096779-3851-48a4-b2c7-95b3317b5e94",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "37735102-ea8d-4c22-ae6e-98ec85fb6d7d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 176,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1a313798-6017-4ab0-a10b-140cd0dd881a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "af13ae47-8d91-4fb3-99d7-d12819d2f606",
            "title": "GET /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/sizes\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSizes.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a7aa22c5-d5f6-413b-8e06-99ff4e3d45ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a7aa22c5-d5f6-413b-8e06-99ff4e3d45ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 108,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0135a512-0c20-4c9e-82cf-d58bdf056336",
            "title": "POST /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 275,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .send({ size: \"20C\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"20C\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4944f062-fa76-4c3c-9ef7-ef2d5d0f11dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "579775a4-9ffc-43ba-8f15-0ecd10ee9100",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4944f062-fa76-4c3c-9ef7-ef2d5d0f11dd",
              "579775a4-9ffc-43ba-8f15-0ecd10ee9100"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4b33e0c8-0385-4918-95e1-e8de58c62469",
            "title": "GET /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize._id).toBe(\n            containerSizes[0]._id.toHexString()\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5d0cbcd9-6297-4333-ba4d-5222f727e05a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "3bfb0f34-dd23-4f9a-9703-e36837a151e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d0cbcd9-6297-4333-ba4d-5222f727e05a",
              "3bfb0f34-dd23-4f9a-9703-e36837a151e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 97,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "7fb0e1c8-82ed-4447-8b26-d12d877c947a",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"10\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"10\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"10\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7f1aa445-f167-464b-942d-544ec6318939",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"20\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0b78023c-0a36-4b90-8668-698fb53d3edc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "19fdcc3a-7249-4b36-94cb-4a3d36086db0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .send({ size: \"40\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"That size already exists\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bdbddb20-02f9-4e7f-8664-223b2b396545",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7f1aa445-f167-464b-942d-544ec6318939",
              "0b78023c-0a36-4b90-8668-698fb53d3edc",
              "19fdcc3a-7249-4b36-94cb-4a3d36086db0",
              "bdbddb20-02f9-4e7f-8664-223b2b396545"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 438,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "17abdaa2-41e3-4c1e-8a66-357799df14b4",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(containerSizes[0].size);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "6a9b436b-b98c-4781-a0cd-99e9eb0d7891",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4dfd9b5e-4625-4805-b4b0-cbd93af8b948",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6a9b436b-b98c-4781-a0cd-99e9eb0d7891",
              "4dfd9b5e-4625-4805-b4b0-cbd93af8b948"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 267,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "bd8e7f6d-be34-46b5-902f-2c090cb7b7f0",
            "title": "GET /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containers.length).toBe(3);\n          // Check to see if each container has a size and stats.\n          expect(res.body.containers[0].size).not.toBe(null);\n          expect(res.body.containers[1].size).not.toBe(null);\n          expect(res.body.containers[2].size).not.toBe(null);\n          expect(res.body.containers[0].stats).not.toBe(null);\n          expect(res.body.containers[1].stats).not.toBe(null);\n          expect(res.body.containers[2].stats).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a97c140a-fa92-43d3-b75b-7c34d0152638",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a97c140a-fa92-43d3-b75b-7c34d0152638"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 175,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "084f929c-c789-40ce-b1e2-6065c09a24d8",
            "title": "POST /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/\")\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.container.size).not.toBe(null);\n          expect(res.body.container.stats).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeTruthy();\n              expect(container.size).not.toBe(null);\n              expect(container.stats).not.toBe(null);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "9b43f0fe-12a3-4ac3-a53a-d0d808072f5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newContainer.rentalResale = \"\";\n      newContainer.hasOnBoxNumbers = 123;\n      newContainer.hasShelves = 123;\n      newContainer.hasSigns = 123;\n      newContainer.isPainted = 123;\n      request(app)\n        .post(\"/api/containers/\")\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n          expect(res.body.hasShelves).toBe(\n            \"You must select whether the container has shelves or not\"\n          );\n          expect(res.body.isPainted).toBe(\n            \"You must select whether the container is painted or not\"\n          );\n          expect(res.body.hasOnBoxNumbers).toBe(\n            \"You must select whether the container has GBR numbers or not\"\n          );\n          expect(res.body.hasSigns).toBe(\n            \"You must select whether the container has signs or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "8a5bff09-9790-4cb9-af06-1da3056d7b5b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b43f0fe-12a3-4ac3-a53a-d0d808072f5a",
              "8a5bff09-9790-4cb9-af06-1da3056d7b5b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 339,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e8755fad-61e4-440a-a57f-f5cf6997a7a3",
            "title": "GET /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.serialNumber).toBe(\n            containers[0].serialNumber\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f80622f0-7197-4bc5-b89a-4e23f1898ecc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0f3c7055-abe6-467c-84e3-cbdd89d59796",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f80622f0-7197-4bc5-b89a-4e23f1898ecc",
              "0f3c7055-abe6-467c-84e3-cbdd89d59796"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 175,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b658b5c4-782c-4bc3-9317-8c73928951fd",
            "title": "PATCH /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 455,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .send(patchData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.hasOnBoxNumbers).toBe(\n            patchData.hasOnBoxNumbers\n          );\n          expect(res.body.container.hasSigns).toBe(patchData.hasSigns);\n          expect(res.body.container.hasShelves).toBe(patchData.hasShelves);\n          expect(res.body.container.isPainted).toBe(patchData.isPainted);\n          expect(res.body.container.isFlagged).toBe(patchData.isFlagged);\n          expect(res.body.container.flagReason).toBe(patchData.flagReason);\n          expect(res.body.container.stats.currentAddress).toBe(\n            patchData.currentAddress\n          );\n          expect(res.body.container.stats.currentRentee).toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ba92f214-eea2-4684-aa3c-81719b4cc616",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: \"\",\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        rentalResale: \"\",\n        currentAddress: \"\",\n        currentlyRented: \"\",\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          expect(res.body.size).toBe(\"Size is required\");\n          expect(res.body.currentlyRented).toBe(\n            \"You must select whether the container is currently rented\"\n          );\n          expect(res.body.currentAddress).toBe(\"Current address is required\");\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "64d1fb1a-0035-424c-9dbf-222a646aebe1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}ss`)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a19c4e48-f947-432c-aef7-98e4811cc0bd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba92f214-eea2-4684-aa3c-81719b4cc616",
              "64d1fb1a-0035-424c-9dbf-222a646aebe1",
              "a19c4e48-f947-432c-aef7-98e4811cc0bd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 462,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "906d83d8-e568-4767-a255-3f80e9d88377",
            "title": "DELETE /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 264,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container._id).toBe(containers[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Container.findById(containers[1]._id)\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2fe27ec8-bcd5-46b8-8fe3-7acfd96a8b01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b3108ac8-90b8-4ab9-8b36-a2ceda240814",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2fe27ec8-bcd5-46b8-8fe3-7acfd96a8b01",
              "b3108ac8-90b8-4ab9-8b36-a2ceda240814"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 267,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "e10591ff-3c61-4065-a741-4ea709902ec7",
        "title": "DEFAULTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
        "file": "\\server\\tests\\defaults.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "23c7944c-b3bd-4fae-a93d-88f5ce838c73",
            "title": "POST /register",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should register a new user",
                "fullTitle": "DEFAULTS POST /register should register a new user",
                "timedOut": false,
                "duration": 465,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          // Check to see if body contains users information. If so,\n          // then the user's information was passed back meaning it succeeded.\n          expect(res.body.username).toBe(newUser.username);\n          expect(res.body.password).not.toBe(newUser.password);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "202976e4-6d0b-46d0-a786-a02d218b9f64",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with validation errors",
                "fullTitle": "DEFAULTS POST /register should not register a new user with validation errors",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      // Set invalid properties to newUser.\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Must enter a valid email.\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "382aa266-a106-45e0-a09d-a6af92a7a3a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already taken username",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already taken username",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"jboy@test.com\";\n      newUser.phone = \"5559992222\";\n      newUser.username = users[0].username;\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.username).toBe(\"Username already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check if user was saved in DB.\n          User.findOne({ email: newUser.email })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "07ee62c0-6f66-42f1-a2a2-541383a01414",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not register a new user with an already used email",
                "fullTitle": "DEFAULTS POST /register should not register a new user with an already used email",
                "timedOut": false,
                "duration": 263,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = users[0].email;\n      newUser.phone = \"5559992222\";\n      newUser.username = \"jboy\";\n      request(app)\n        .post(\"/api/register\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          // Check to see if validation errors are there.\n          expect(res.body.email).toBe(\"Email already exists.\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // If no errors during registration, check to see if newUser was\n          // stored in the database properly.\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "de242d8c-f546-40fc-be16-05b1e6f39e59",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "202976e4-6d0b-46d0-a786-a02d218b9f64",
              "382aa266-a106-45e0-a09d-a6af92a7a3a9",
              "07ee62c0-6f66-42f1-a2a2-541383a01414",
              "de242d8c-f546-40fc-be16-05b1e6f39e59"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 985,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "137fd514-4edf-47ae-be84-30a19543793d",
            "title": "POST /login",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\defaults.test.js",
            "file": "\\server\\tests\\defaults.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should log a user in and return a token",
                "fullTitle": "DEFAULTS POST /login should log a user in and return a token",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"thePassword\"\n        })\n        .expect(200)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBe(true);\n          expect(res.body.token).toBeTruthy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0e96d620-d083-42c4-a8fc-867fdbb30c88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect username and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect username and return error",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"wrongusername\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "62c53392-4af0-445d-b490-9edfcc5d7017",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in with incorrect password and return error",
                "fullTitle": "DEFAULTS POST /login should not log user in with incorrect password and return error",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpj\",\n          password: \"theWrongPassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9ca4a2eb-afd6-4c2c-8873-b1ac3428f5d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not log user in without being validated",
                "fullTitle": "DEFAULTS POST /login should not log user in without being validated",
                "timedOut": false,
                "duration": 194,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/login\")\n        .send({\n          username: \"blpsr\",\n          password: \"thePassword\"\n        })\n        .expect(401)\n        .expect(res => {\n          // check to see if success & token has been created.\n          expect(res.body.success).toBeFalsy();\n          expect(res.body.token).toBeFalsy();\n          expect(res.body.login).toBe(\"Your account is not validated yet\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "66b4b374-7597-4b65-824d-0f9783f7e756",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e96d620-d083-42c4-a8fc-867fdbb30c88",
              "62c53392-4af0-445d-b490-9edfcc5d7017",
              "9ca4a2eb-afd6-4c2c-8873-b1ac3428f5d9",
              "66b4b374-7597-4b65-824d-0f9783f7e756"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 661,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "275b1c84-8b96-4974-a19f-8b9f6dd18c09",
        "title": "EVENTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
        "file": "\\server\\tests\\events.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ee7cfd81-0560-4781-8a72-f1cb5257c6d2",
            "title": "GET /events",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a list of events",
                "fullTitle": "EVENTS GET /events should return a list of events",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/events\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.events).toBeTruthy();\n          expect(res.body.events.length).toBe(events.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fcc122e8-448d-4288-a653-340aef5ab6ec",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fcc122e8-448d-4288-a653-340aef5ab6ec"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 85,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "06beba89-95e9-43bc-8ea4-e38931670374",
            "title": "POST /events",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new event",
                "fullTitle": "EVENTS POST /events should create a new event",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .send(newEvent)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.event).toBeTruthy();\n          expect(res.body.event.title).toBe(newEvent.title);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: newEvent.title })\n            .then(event => {\n              expect(event).toBeTruthy();\n              expect(event.title).toBe(newEvent.title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "99cdd94b-1994-4242-b427-114c592e8920",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new event with validation errors",
                "fullTitle": "EVENTS POST /events should not create a new event with validation errors",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/events\")\n        .send(badEvent)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findOne({ title: badEvent.title })\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d2989658-017b-4800-b14a-1b2538ddd2a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "99cdd94b-1994-4242-b427-114c592e8920",
              "d2989658-017b-4800-b14a-1b2538ddd2a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "cd70b23c-af00-4da0-abd7-3397e9072b50",
            "title": "GET /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single event",
                "fullTitle": "EVENTS GET /events/:id should return a single event",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.event).toBeTruthy();\n          expect(res.body.event._id).toBe(events[0]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f9b1e25b-f2c2-4991-b2a8-d4b1b79a6171",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a single event with invalid id",
                "fullTitle": "EVENTS GET /events/:id should not return a single event with invalid id",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBeTruthy();\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "89bc0d6f-a38a-473a-919f-c63ed22f3afb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9b1e25b-f2c2-4991-b2a8-d4b1b79a6171",
              "89bc0d6f-a38a-473a-919f-c63ed22f3afb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "986afdd7-7709-4d29-b35f-35a14f3860ef",
            "title": "PATCH /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a single event with new information",
                "fullTitle": "EVENTS PATCH /events/:id should update a single event with new information",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .send({\n          title: \"New title\",\n          color: events[0].color,\n          start: events[0].start,\n          end: events[0].end,\n          order: events[0].order\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.event.title).toBe(\"New title\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(\"New title\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c8cbfc53-cbbd-4911-93a5-fb4bd23eb007",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with validation errors",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with validation errors",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}`)\n        .send({\n          title: \"\",\n          color: \"\",\n          start: \"\",\n          end: \"\",\n          order: null\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.title).toBe(\"Title must be at least 3 characters\");\n          expect(res.body.color).toBe(\"Color is required\");\n          expect(res.body.start).toBe(\"Start is required\");\n          expect(res.body.end).toBe(\"End is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[0]._id.toHexString())\n            .then(event => {\n              expect(event.title).toBe(events[0].title);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "22daeddf-9d5b-4d54-abb9-9903d353edb7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a single event with invalid ID",
                "fullTitle": "EVENTS PATCH /events/:id should not update a single event with invalid ID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/events/${events[0]._id.toHexString()}sssss`)\n        .send(events[0])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0ef844fd-8764-408d-9902-16c41f506a92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8cbfc53-cbbd-4911-93a5-fb4bd23eb007",
              "22daeddf-9d5b-4d54-abb9-9903d353edb7",
              "0ef844fd-8764-408d-9902-16c41f506a92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 279,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a13bb2e0-bdfb-489f-8f05-4c310fb4ede6",
            "title": "DELETE /events/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\events.test.js",
            "file": "\\server\\tests\\events.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a single event",
                "fullTitle": "EVENTS DELETE /events/:id should delete a single event",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.event).toBeTruthy();\n          expect(res.body.event._id).toBe(events[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          CalendarEvent.findById(events[1]._id.toHexString())\n            .then(event => {\n              expect(event).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "9650c211-3d3d-4bae-91f5-4cc6a1fcc31d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an event with invalid ID",
                "fullTitle": "EVENTS DELETE /events/:id should not delete an event with invalid ID",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/events/${events[1]._id.toHexString()}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.event).toBeTruthy();\n          expect(res.body.event).toBe(\"There was no event found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "894c88cc-5d29-4c2e-8b31-f3d37f787d6c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9650c211-3d3d-4bae-91f5-4cc6a1fcc31d",
              "894c88cc-5d29-4c2e-8b31-f3d37f787d6c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 175,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "d63f8d48-a3fd-4bf0-b8c5-7ad09225884d",
        "title": "PRODUCT TYPES",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6d37b367-8936-4514-9959-b06ec1255859",
            "title": "GET /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products/types\")\n        .expect(200)\n        .expect(res => {\n          // check to see if product types array exists.\n          expect(res.body.productTypes).toBeTruthy();\n          expect(res.body.productTypes.length).toBe(5);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cf57b5ec-9c47-47ba-b365-37e1c10c9a71",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf57b5ec-9c47-47ba-b365-37e1c10c9a71"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 85,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3f5aab65-3542-4b2f-a984-f476eff89eb3",
            "title": "POST /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .send(newProductType)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.productType.type).toBe(newProductType.type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result.type).toBe(newProductType.type);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bc3922d4-45a5-4cd5-914f-56ef5461181f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .send({ type: \"\" })\n        .expect(400)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bd13b14f-4571-4cfe-9f1a-d88ad3eb313e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bc3922d4-45a5-4cd5-914f-56ef5461181f",
              "bd13b14f-4571-4cfe-9f1a-d88ad3eb313e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 342,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b836336d-7747-4ea3-b804-9be4d810c748",
            "title": "GET /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(\"modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "df728341-a79c-4d2b-acb3-8cb0468c1393",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ae5521fd-4555-4ab1-b470-90020405f76d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "df728341-a79c-4d2b-acb3-8cb0468c1393",
              "ae5521fd-4555-4ab1-b470-90020405f76d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b46806e1-8c60-455b-9399-09268fb8d08b",
            "title": "PATCH /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .send({\n          type: \"new modification\"\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(\"new modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d205cd2f-16c3-49a2-aaa3-8aad5160e8a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "48474fb9-918c-40c6-9693-7283b775ac80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .send({\n          type: \"container\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"That type is already being used\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7963ae75-c04c-4a15-9cda-0f8af6680c3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .send({\n          type: \"some new mod\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"No product found with that ID in the URL\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5e1a65b7-08c3-4fa4-ac85-513c4d4c3e92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d205cd2f-16c3-49a2-aaa3-8aad5160e8a4",
              "48474fb9-918c-40c6-9693-7283b775ac80",
              "7963ae75-c04c-4a15-9cda-0f8af6680c3d",
              "5e1a65b7-08c3-4fa4-ac85-513c4d4c3e92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 278,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "25076785-32d0-41e2-bf28-aaf21113e858",
            "title": "DELETE /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 177,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type.type).toBe(productTypes[0].type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ProductType.findById(productTypes[0]._id.toHexString())\n            .then(type => {\n              expect(type).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0f5f9e9d-03fb-4a4f-826a-c14a62b5cc36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d66099fe-4803-4c0b-b95e-557e5bf8033a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n        .expect(404)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"Unable to find and remove the product type\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "eb6204bc-9a01-483f-96a2-55edbdea161a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0f5f9e9d-03fb-4a4f-826a-c14a62b5cc36",
              "d66099fe-4803-4c0b-b95e-557e5bf8033a",
              "eb6204bc-9a01-483f-96a2-55edbdea161a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 269,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "b104f941-671c-465d-927b-1f6643fe195b",
        "title": "PRODUCTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "13ec5f60-c508-467a-92ed-6e0f1d96166e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "bf0eb12f-0d3f-43f3-9acf-ed4b198129fb",
            "title": "GET /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.products).toBeTruthy();\n          expect(res.body.products.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b5f49672-d2a7-4c96-8061-896b101ef1a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b5f49672-d2a7-4c96-8061-896b101ef1a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 170,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b6c29449-c5a7-4208-8eea-cfc59eefd06c",
            "title": "POST /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products\")\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.product.name).toBe(newProduct.name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f7f094da-d664-4032-a3ee-e0d0f2911988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct.name = \"\";\n      newProduct.shortName = \"\";\n      newProduct.rental = \"\";\n      newProduct.type = \"\";\n      request(app)\n        .post(\"/api/products\")\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "83411296-4e02-419c-a25e-b9553b2ea68b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f7f094da-d664-4032-a3ee-e0d0f2911988",
              "83411296-4e02-419c-a25e-b9553b2ea68b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 345,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a62a1ece-b155-426f-a13e-182d608ab9d9",
            "title": "GET /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(products[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "658c8271-6ed0-4445-9113-479c229f2d88",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6b3b9112-f6cd-4cf7-9c59-49a7d304583f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "658c8271-6ed0-4445-9113-479c229f2d88",
              "6b3b9112-f6cd-4cf7-9c59-49a7d304583f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "67b3c9b9-dc70-424f-b402-23b12ae8dd9f",
            "title": "PATCH /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(\"40' Pickup\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "97677c80-8fca-4086-a9c4-a46d814e2f87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"No product found.\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8bc85126-07ae-4e55-9acd-b80ead6cede7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"\",\n        shortName: \"\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: \"\",\n        type: \"\"\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "3079286f-2956-4c01-b238-bf3c11edd173",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "97677c80-8fca-4086-a9c4-a46d814e2f87",
              "8bc85126-07ae-4e55-9acd-b80ead6cede7",
              "3079286f-2956-4c01-b238-bf3c11edd173"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 184,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "fd24464c-b7d2-41cd-93d9-c1f899d99099",
            "title": "DELETE /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.product).toBeTruthy();\n          expect(res.body.product.name).toBe(products[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Product.findById(products[0]._id.toHexString())\n            .then(product => {\n              expect(product).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e8263115-457f-4c5e-bfcf-e59add3a771e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b96953e4-cb42-47cc-a3fd-98c34940140d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e8263115-457f-4c5e-bfcf-e59add3a771e",
              "b96953e4-cb42-47cc-a3fd-98c34940140d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 169,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "48482d88-e319-483e-951e-09fcb5db0e34",
        "title": "SETTINGS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
        "file": "\\server\\tests\\settings.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1d710985-b946-4efb-892e-e6a45c07cc93",
            "title": "Purchase Types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
            "file": "\\server\\tests\\settings.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "1817f527-e355-49c1-a010-fc9db12b5829",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 83,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\"/api/settings/purchasetypes\")\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseTypes).toBeTruthy();\n            expect(res.body.purchaseTypes.length).toBe(2);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6806ea4c-1f48-4b58-b4bb-bb91df2899b9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6806ea4c-1f48-4b58-b4bb-bb91df2899b9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 83,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "530d9a9a-26b8-4a68-b666-bcbed9c270a6",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "56c314b6-10f9-41a9-a561-d749683565f2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "205d127d-a5a4-4091-af68-107671e9667c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [],
                "pending": [
                  "56c314b6-10f9-41a9-a561-d749683565f2",
                  "205d127d-a5a4-4091-af68-107671e9667c"
                ],
                "skipped": [],
                "duration": null,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "d45ec8af-f7d4-4b52-90da-c77e7e6b021a",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 86,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n          )\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(purchaseTypes[0].type);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9bb4efee-524a-499b-8b91-56887113d3d4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n          )\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\n              \"There was no purchase type found\"\n            );\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "abb0462f-ba7d-405b-b6c4-c34e92902aab",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "9bb4efee-524a-499b-8b91-56887113d3d4",
                  "abb0462f-ba7d-405b-b6c4-c34e92902aab"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 93,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "8c707d6d-dd70-4e19-95f0-f89fe09da8eb",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d4390adc-4a6a-46f1-848d-a7850d2e71d1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4895ebfe-ff96-4021-848e-bc49bd765a98",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "83e22204-3b8d-41d9-80d1-19eb7e5dcb06",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [],
                "pending": [
                  "d4390adc-4a6a-46f1-848d-a7850d2e71d1",
                  "4895ebfe-ff96-4021-848e-bc49bd765a98",
                  "83e22204-3b8d-41d9-80d1-19eb7e5dcb06"
                ],
                "skipped": [],
                "duration": null,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "061a0570-cf1a-4f16-ad79-0828983781bc",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f2a11916-a792-4162-b667-02ffb76a2294",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": true,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa24e062-c11c-4b80-aaac-344e817fa840",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [],
                "failures": [],
                "pending": [
                  "f2a11916-a792-4162-b667-02ffb76a2294",
                  "fa24e062-c11c-4b80-aaac-344e817fa840"
                ],
                "skipped": [],
                "duration": null,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "9ce10e91-b840-4f75-8a45-019f33449ee5",
        "title": "USERS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
        "file": "\\server\\tests\\users.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "699435ce-12ef-47fd-b386-eeb20452754d",
            "title": "GET /users",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of users",
                "fullTitle": "USERS GET /users should return an array of users",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/users\")\n        .expect(200)\n        .expect(res => {\n          expect(res.body.users).toBeTruthy();\n          expect(res.body.users.length).toBe(users.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1bed1109-31d0-43d8-bfa6-9a89a92762ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1bed1109-31d0-43d8-bfa6-9a89a92762ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a27f9611-290c-427f-a280-801befc591da",
            "title": "POST /users",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new user",
                "fullTitle": "USERS POST /users should create a new user",
                "timedOut": false,
                "duration": 442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/users\")\n        .send(newUser)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.user).toBeTruthy();\n          expect(res.body.user.username).toBe(newUser.username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.firstName).toBe(newUser.firstName);\n              expect(user.password).not.toBe(newUser.password);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "d5cbf55f-48d8-4d26-9aee-306c591901c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new user with validation errors",
                "fullTitle": "USERS POST /users should not create a new user with validation errors",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newUser.email = \"amessedupemail\";\n      newUser.phone = \"(559) 999-1111\";\n      newUser.validated = \"hello\";\n      request(app)\n        .post(\"/api/users\")\n        .send(newUser)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.email).toBe(\"Must enter a valid email\");\n          expect(res.body.phone).toBe(\n            \"Must contain 10 digits, no dashes or parenthesis. ex: 5591234567\"\n          );\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findOne({ username: newUser.username })\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "f4886ca3-39e8-4758-990c-e514f7071a55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d5cbf55f-48d8-4d26-9aee-306c591901c6",
              "f4886ca3-39e8-4758-990c-e514f7071a55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 534,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6fe8172f-b29b-4c4a-ae06-869a7c393dd3",
            "title": "GET /users/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a single user",
                "fullTitle": "USERS GET /users/:id should return a single user",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.user._id).toBe(users[0]._id.toHexString());\n          expect(res.body.user.username).toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f040449f-5a08-4a83-ad61-dfce05e7ccc4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a user with invalid ID",
                "fullTitle": "USERS GET /users/:id should not return a user with invalid ID",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/users/${users[0]._id}ssss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.user.username).not.toBe(users[0].username);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a72a4d6e-615d-4a2c-b56f-7bc146ebaab1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f040449f-5a08-4a83-ad61-dfce05e7ccc4",
              "a72a4d6e-615d-4a2c-b56f-7bc146ebaab1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 89,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0128f551-0fd3-4304-93e9-36adacf99949",
            "title": "PATCH /users/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return a single user",
                "fullTitle": "USERS PATCH /users/:id should update and return a single user",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      users[1].validated = true;\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .send(users[1])\n        .expect(200)\n        .expect(res => {\n          expect(res.body.user.username).toBe(users[1].username);\n          expect(res.body.user.validated).toBe(true);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "e10611d2-01e0-402d-a006-76463f251968",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with invalid ID",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with invalid ID",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/users/${users[1]._id}ssss`)\n        .send(users[1])\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fe838682-c612-4e89-b51a-eaae7630ed95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update and return a user with validation errors",
                "fullTitle": "USERS PATCH /users/:id should not update and return a user with validation errors",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      userData = {\n        firstName: \"Brian\",\n        lastName: \"Peter\",\n        middleInitial: \"L\",\n        suffix: \"Sr\",\n        username: \"blpsr\",\n        password: \"thePassword\",\n        email: \"gbr@test.com\",\n        phone: \"5559991224\",\n        title: \"Manager\",\n        type: \"Staff\",\n        validated: \"someWrongValidation\"\n      };\n      request(app)\n        .patch(`/api/users/${users[1]._id}`)\n        .send(userData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.validated).toBe(\n            \"You must select whether the user is validated\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user.validated).toBe(true);\n              expect(user.firstName).toBe(\"Brian\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "62d9ff1f-27a3-4b07-993e-082fc6e26b79",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e10611d2-01e0-402d-a006-76463f251968",
              "fe838682-c612-4e89-b51a-eaae7630ed95",
              "62d9ff1f-27a3-4b07-993e-082fc6e26b79"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 256,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "1374e7b0-e98e-490b-9c40-2728135df122",
            "title": "DELETE /users/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\users.test.js",
            "file": "\\server\\tests\\users.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete and return a single user",
                "fullTitle": "USERS DELETE /users/:id should delete and return a single user",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[0]._id}`)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.user._id).toBe(users[0]._id.toHexString());\n          expect(res.body.user.username).toBe(users[0].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[0]._id.toHexString())\n            .then(user => {\n              expect(user).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "da0f58c9-8529-4271-812c-6f0d26921f8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete and return a user with invalid ID",
                "fullTitle": "USERS DELETE /users/:id should not delete and return a user with invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/users/${users[1]._id}sss`)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n          expect(res.body.user.username).not.toBe(users[1].username);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          User.findById(users[1]._id.toHexString())\n            .then(user => {\n              expect(user).toBeTruthy();\n              expect(user.username).toBe(users[1].username);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "dbed9a9c-4140-4f53-b9dd-6505fa409281",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da0f58c9-8529-4271-812c-6f0d26921f8d",
              "dbed9a9c-4140-4f53-b9dd-6505fa409281"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 265,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}