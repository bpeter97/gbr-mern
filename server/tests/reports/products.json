{
  "stats": {
    "suites": 12,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-24T00:48:39.156Z",
    "end": "2018-05-24T00:48:49.101Z",
    "duration": 9945,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "87ce882a-de0f-4d0c-80d7-85c5ef635bf6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "26ef08ff-73bf-4d2f-80a5-6a7492d487ca",
        "title": "PRODUCT TYPES",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: populateUsers",
            "fullTitle": "PRODUCT TYPES \"before all\" hook: populateUsers",
            "timedOut": false,
            "duration": 1345,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "aca47127-fd1a-44e7-9fcc-bdbb7e2a9789",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProductTypes",
            "fullTitle": "PRODUCT TYPES \"before each\" hook: populateProductTypes",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ProductType.remove({})\n    .then(() => {\n      var modification = new ProductType(productTypes[0]).save();\n      var container = new ProductType(productTypes[1]).save();\n      var rentalModification = new ProductType(productTypes[2]).save();\n      var delivery = new ProductType(productTypes[3]).save();\n      var pickup = new ProductType(productTypes[4]).save();\n      return Promise.all([\n        modification,\n        container,\n        rentalModification,\n        delivery,\n        pickup\n      ]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "aa4ddfdd-f3d2-42de-b6b2-1b933e6ea8ec",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6d0ff437-a2be-46b1-b767-dd69bac5c06c",
            "title": "GET /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of product types",
                "fullTitle": "PRODUCT TYPES GET /products/types should retrieve a array of product types",
                "timedOut": false,
                "duration": 200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          // check to see if product types array exists.\n          expect(res.body.length).toBe(5);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "05588ebc-3642-4bab-83e7-bda7b21db5a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05588ebc-3642-4bab-83e7-bda7b21db5a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 200,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "67c97fd0-ff08-49fb-a464-c90c2fa8e7b2",
            "title": "POST /products/types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new product type",
                "fullTitle": "PRODUCT TYPES POST /products/types should create a new product type",
                "timedOut": false,
                "duration": 351,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProductType)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(newProductType.type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result.type).toBe(newProductType.type);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "000ac907-5e51-4f67-8741-7faf5f618454",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new product type with empty values",
                "fullTitle": "PRODUCT TYPES POST /products/types should not create a new product type with empty values",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products/types\")\n        .set(\"Authorization\", users[0].token)\n        .send({ type: \"\" })\n        .expect(400)\n        .expect(res => {\n          // check to see if new product type exists.\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          ProductType.findOne({ type: newProductType.type })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2cbe2dfc-0624-4732-9d1c-b77b7d2baff5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "000ac907-5e51-4f67-8741-7faf5f618454",
              "2cbe2dfc-0624-4732-9d1c-b77b7d2baff5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 516,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3d347c89-1f24-4596-a349-597e9768eedd",
            "title": "GET /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific type",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should retrieve a specific type",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "148bb41b-1f49-42c1-892c-c5f6f8149d80",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if type not found and error message",
                "fullTitle": "PRODUCT TYPES GET /products/types/:id should return a 400 error if type not found and error message",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ac0b6ccf-d12c-44e9-86b1-51d278c3ad2d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "148bb41b-1f49-42c1-892c-c5f6f8149d80",
              "ac0b6ccf-d12c-44e9-86b1-51d278c3ad2d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 249,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "2c9f711c-02b1-4185-a50a-4c9fcf131d67",
            "title": "PATCH /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific type",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should update a specific type",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"new modification\"\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(\"new modification\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "81e2a7d9-fee3-4e20-8eea-ae605521f1c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return a 400 error if no type is entered",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should return a 400 error if no type is entered",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"Type is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b99d3642-f144-4afe-81e4-eeee15cce8cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a type that is in use",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a type that is in use",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"container\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"That type is already being used\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "14692d04-da5f-41c1-ad54-e11afd1c4d08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a type with a messed up ID",
                "fullTitle": "PRODUCT TYPES PATCH /products/types/:id should not update a type with a messed up ID",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/products/types/${productTypes[0]._id.toHexString()}sss`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          type: \"some new mod\"\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"No product found with that ID in the URL\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0fd701eb-e3d5-4cdd-a870-ec25dd103a0a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81e2a7d9-fee3-4e20-8eea-ae605521f1c7",
              "b99d3642-f144-4afe-81e4-eeee15cce8cc",
              "14692d04-da5f-41c1-ad54-e11afd1c4d08",
              "0fd701eb-e3d5-4cdd-a870-ec25dd103a0a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 586,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "20f6578d-2d10-4998-9975-9392da34733f",
            "title": "DELETE /products/types/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove a specific type",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should remove a specific type",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.type).toBe(productTypes[0].type);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ProductType.findById(productTypes[0]._id.toHexString())\n            .then(type => {\n              expect(type).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "0a74e0b1-5db1-4a28-86a6-4174abab54dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 400 and an error message if id is invalid",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 400 and an error message if id is invalid",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${productTypes[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.type).toBe(\"There was no product type found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f9e1e107-1962-441b-838f-dc46b7700e2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return 404 and an error message if id is not found",
                "fullTitle": "PRODUCT TYPES DELETE /products/types/:id should return 404 and an error message if id is not found",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/types/${new ObjectID().toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(404)\n        .expect(res => {\n          expect(res.body.type).toBe(\n            \"Unable to find and remove the product type\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "62da9b1d-bdb7-4cd0-9b45-129d488112e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a74e0b1-5db1-4a28-86a6-4174abab54dd",
              "f9e1e107-1962-441b-838f-dc46b7700e2a",
              "62da9b1d-bdb7-4cd0-9b45-129d488112e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 509,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      },
      {
        "uuid": "83ae1d3b-4881-4867-a01d-b9dae4bdae3f",
        "title": "PRODUCTS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
        "file": "\\server\\tests\\products.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "PRODUCTS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "51ea89b6-e789-49f9-a501-b8f5aa9f9d08",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "c7173e7c-57c3-45f4-94eb-dbce21c475f8",
            "title": "GET /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a array of products",
                "fullTitle": "PRODUCTS GET /products should retrieve a array of products",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8d96d265-d645-4fb0-a7ef-92982c8535ef",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8d96d265-d645-4fb0-a7ef-92982c8535ef"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 261,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a46ba132-5e2a-4e8d-9fa2-3a049ab9ac37",
            "title": "POST /products",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a product",
                "fullTitle": "PRODUCTS POST /products should create a product",
                "timedOut": false,
                "duration": 329,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(newProduct.name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "be844c20-7ab0-4c2d-9f6f-51747bd1de2b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a product with validation errors",
                "fullTitle": "PRODUCTS POST /products should not create a product with validation errors",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct.name = \"\";\n      newProduct.shortName = \"\";\n      newProduct.rental = \"\";\n      newProduct.type = \"\";\n      request(app)\n        .post(\"/api/products\")\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "34dbf186-0635-4913-8584-0231ab696b66",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "be844c20-7ab0-4c2d-9f6f-51747bd1de2b",
              "34dbf186-0635-4913-8584-0231ab696b66"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 494,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "60c2828d-c3b8-4ff8-b70e-9b0d28859bcb",
            "title": "GET /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should retrieve a specific product",
                "fullTitle": "PRODUCTS GET /products/:id should retrieve a specific product",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "eb5f4708-84cd-44d7-b3a6-f09583ebc427",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS GET /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "313626a7-de97-4b8a-8216-e0fd1c2e06f0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb5f4708-84cd-44d7-b3a6-f09583ebc427",
              "313626a7-de97-4b8a-8216-e0fd1c2e06f0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 289,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "99353769-35f9-451c-bd18-010dc77b3dfb",
            "title": "PATCH /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a specific product",
                "fullTitle": "PRODUCTS PATCH /products/:id should update a specific product",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(\"40' Pickup\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0a2644b0-213c-4be9-a58d-aedf7acd1972",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS PATCH /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"40' Pickup\",\n        shortName: \"40PU\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: false,\n        type: `${productTypes[0]._id.toHexString()}`\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"No product found.\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1f51667e-1106-4587-a214-15f5faa004a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update a product with validation errors",
                "fullTitle": "PRODUCTS PATCH /products/:id should not update a product with validation errors",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newProduct = {\n        name: \"\",\n        shortName: \"\",\n        price: 110.0,\n        monthlyPrice: 0.0,\n        rental: \"\",\n        type: \"\"\n      };\n      request(app)\n        .patch(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .send(newProduct)\n        .expect(400)\n        .expect(res => {\n          // check to see if new product exists.\n          expect(res.body.name).toBe(\"Name is required\");\n          expect(res.body.shortName).toBe(\"Short name is required\");\n          expect(res.body.rental).toBe(\"Must select a rental type\");\n          expect(res.body.type).toBe(\"Must select a product type\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          // Check to see if it was inserted into db properly.\n          Product.findOne({ name: newProduct.name })\n            .then(result => {\n              expect(result).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "bd0759f8-20e9-4ee3-8510-c2b46b133921",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0a2644b0-213c-4be9-a58d-aedf7acd1972",
              "1f51667e-1106-4587-a214-15f5faa004a4",
              "bd0759f8-20e9-4ee3-8510-c2b46b133921"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 424,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "923d070c-a6e5-40c3-b70a-09c424903562",
            "title": "DELETE /products/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\products.test.js",
            "file": "\\server\\tests\\products.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a specific product",
                "fullTitle": "PRODUCTS DELETE /products/:id should delete a specific product",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.name).toBe(products[0].name);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Product.findById(products[0]._id.toHexString())\n            .then(product => {\n              expect(product).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2cbfd4a0-d6c5-44c5-9cf0-6a070e7cb909",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should have 400 status and error message if id doesn't exist",
                "fullTitle": "PRODUCTS DELETE /products/:id should have 400 status and error message if id doesn't exist",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/products/${products[0]._id.toHexString()}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.product).toBe(\"There was no product found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cc21c507-f74e-4d4b-8bcd-0f59ba1695bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2cbfd4a0-d6c5-44c5-9cf0-6a070e7cb909",
              "cc21c507-f74e-4d4b-8bcd-0f59ba1695bb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 338,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}