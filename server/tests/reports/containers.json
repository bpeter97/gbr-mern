{
  "stats": {
    "suites": 11,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-23T02:17:38.851Z",
    "end": "2018-05-23T02:18:07.865Z",
    "duration": 29014,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5ea4fb13-cdf8-41b5-bacf-f6d7bf2b05ef",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "829673dd-2a82-4cbd-a040-2a634bba1557",
        "title": "CONTAINERS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
        "file": "\\server\\tests\\containers.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 597,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      bcrypt.genSalt(10, (err, salt) => {\n        // Now hash the password with the salt.\n        bcrypt.hash(\"thePassword\", salt, (err, hash) => {\n          if (err) throw err;\n          // Assign the newly hashed password to the new User object\n          users[0].password = hash;\n          users[1].password = hash;\n          users[2].password = hash;\n        });\n      });\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a0c22302-cf42-450c-8538-b3a3c40b7fd8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 166,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "08724a84-f736-42de-b36c-c022bd3ad553",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "216eb403-ae91-4c43-9707-5356b5f5599e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "CONTAINERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "25302564-c4e3-446e-84e4-1477f108504b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "13fef973-4d7b-4b9e-b910-4651082ef141",
            "title": "GET /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of container sizes",
                "fullTitle": "CONTAINERS GET /containers/sizes should return an array of container sizes",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSizes.length).toBe(3);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fc4fc7cd-e3f1-4258-976a-2fc72bcb7546",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc4fc7cd-e3f1-4258-976a-2fc72bcb7546"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 197,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b68b1867-2aa2-41a4-bd34-3d375c47419b",
            "title": "POST /containers/sizes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container size",
                "fullTitle": "CONTAINERS POST /containers/sizes should create a new container size",
                "timedOut": false,
                "duration": 354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"20C\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"20C\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "83c8d9dc-aca8-459e-9b6f-fc21be527455",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container size with invalid input",
                "fullTitle": "CONTAINERS POST /containers/sizes should not create a new container size with invalid input",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/sizes\")\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findOne({ size: \"20C\" })\n            .then(size => {\n              expect(size).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "3c93f3e1-ca84-4a6b-8d29-84bb8b6325aa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "83c8d9dc-aca8-459e-9b6f-fc21be527455",
              "3c93f3e1-ca84-4a6b-8d29-84bb8b6325aa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 522,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "99e9626a-e0de-46ff-96be-8226b9d9cb54",
            "title": "GET /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a specific container size",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should return a specific container size",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize._id).toBe(\n            containerSizes[0]._id.toHexString()\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b0fbf2d0-6e92-4bf1-85a7-ef9b4614cccc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a specific container size with invalid :id",
                "fullTitle": "CONTAINERS GET /containers/sizes/:id should not return a specific container size with invalid :id",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/sizes/${containerSizes[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9ee10fbd-42ab-47a8-b877-e70fce95ba85",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b0fbf2d0-6e92-4bf1-85a7-ef9b4614cccc",
              "9ee10fbd-42ab-47a8-b877-e70fce95ba85"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 268,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "e2728cdf-3572-49bb-89e6-16c658c837c6",
            "title": "PATCH /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should patch a container size successfully",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should patch a container size successfully",
                "timedOut": false,
                "duration": 337,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"10\" })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(\"10\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"10\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "27c92b43-40b5-47cd-beac-881cc4a62110",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with errors",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with errors",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"Size is required\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              expect(containerSize.size).toBe(\"20\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "3a093aab-848a-4e0d-b769-f142a22f45c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with invalid ID",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "10aa7ecb-09aa-415b-89a5-b14cd8e91378",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container size with size that exists",
                "fullTitle": "CONTAINERS PATCH /containers/sizes/:id should not patch a container size with size that exists",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({ size: \"40\" })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"That size already exists\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1cce3d5b-0a57-4bc0-b669-9a636715554e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "27c92b43-40b5-47cd-beac-881cc4a62110",
              "3a093aab-848a-4e0d-b769-f142a22f45c9",
              "10aa7ecb-09aa-415b-89a5-b14cd8e91378",
              "1cce3d5b-0a57-4bc0-b669-9a636715554e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 761,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "59846814-49a3-4457-9fbd-06bc41958619",
            "title": "DELETE /containers/sizes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the container size",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should delete the container size",
                "timedOut": false,
                "duration": 256,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containerSize).toBeTruthy();\n          expect(res.body.containerSize.size).toBe(containerSizes[0].size);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "2cd564d1-9567-46ee-9b10-f1b3e9582621",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete the container size with invalid id",
                "fullTitle": "CONTAINERS DELETE /containers/sizes/:id should not delete the container size with invalid id",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/sizes/${containerSizes[0]._id}ssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.size).toBeTruthy();\n          expect(res.body.size).toBe(\"There was no size found\");\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          ContainerSize.findById(containerSizes[0]._id)\n            .then(containerSize => {\n              expect(containerSize).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "4c93b92d-bd57-48a4-b486-1b5debc1929f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2cd564d1-9567-46ee-9b10-f1b3e9582621",
              "4c93b92d-bd57-48a4-b486-1b5debc1929f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 425,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "a2ab4515-ae05-4c5d-9058-2fe89cc24824",
            "title": "GET /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an array of containers",
                "fullTitle": "CONTAINERS GET /containers/ should return an array of containers",
                "timedOut": false,
                "duration": 256,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.containers.length).toBe(3);\n          // Check to see if each container has a size and stats.\n          expect(res.body.containers[0].size).not.toBe(null);\n          expect(res.body.containers[1].size).not.toBe(null);\n          expect(res.body.containers[2].size).not.toBe(null);\n          expect(res.body.containers[0].stats).not.toBe(null);\n          expect(res.body.containers[1].stats).not.toBe(null);\n          expect(res.body.containers[2].stats).not.toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f9ffc74b-da87-4d2d-8664-fdb861d09647",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9ffc74b-da87-4d2d-8664-fdb861d09647"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 256,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "3b9934e0-b487-4c58-938a-af7be51507d9",
            "title": "POST /containers/",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new container",
                "fullTitle": "CONTAINERS POST /containers/ should create a new container",
                "timedOut": false,
                "duration": 340,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.container.size).not.toBe(null);\n          expect(res.body.container.stats).not.toBe(null);\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeTruthy();\n              expect(container.size).not.toBe(null);\n              expect(container.stats).not.toBe(null);\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "11d11aff-b389-44b3-a153-73533f4f5893",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new container with validation errors",
                "fullTitle": "CONTAINERS POST /containers/ should not create a new container with validation errors",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newContainer.rentalResale = \"\";\n      newContainer.hasOnBoxNumbers = 123;\n      newContainer.hasShelves = 123;\n      newContainer.hasSigns = 123;\n      newContainer.isPainted = 123;\n      request(app)\n        .post(\"/api/containers/\")\n        .set(\"Authorization\", users[0].token)\n        .send(newContainer)\n        // .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          // Check to see if each container has a size and stats.\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n          expect(res.body.hasShelves).toBe(\n            \"You must select whether the container has shelves or not\"\n          );\n          expect(res.body.isPainted).toBe(\n            \"You must select whether the container is painted or not\"\n          );\n          expect(res.body.hasOnBoxNumbers).toBe(\n            \"You must select whether the container has GBR numbers or not\"\n          );\n          expect(res.body.hasSigns).toBe(\n            \"You must select whether the container has signs or not\"\n          );\n        })\n        .end(err => {\n          if (err) {\n            done(err);\n          }\n          Container.findOne({ serialNumber: \"123456727\" })\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "7b36f13a-7731-4d64-b5df-544e276a8f06",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11d11aff-b389-44b3-a153-73533f4f5893",
              "7b36f13a-7731-4d64-b5df-544e276a8f06"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 508,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "13ab726b-6197-493d-9c59-8a673409da3e",
            "title": "GET /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS GET /containers/:id should return a container",
                "timedOut": false,
                "duration": 247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.serialNumber).toBe(\n            containers[0].serialNumber\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bf91ca93-7ddf-4606-b993-c184d55f7d5f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a container with invalid id",
                "fullTitle": "CONTAINERS GET /containers/:id should not return a container with invalid id",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/containers/${containers[0]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "743f4cbd-77c4-4943-8533-cacf07fe9073",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bf91ca93-7ddf-4606-b993-c184d55f7d5f",
              "743f4cbd-77c4-4943-8533-cacf07fe9073"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 345,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "63723818-35b7-4f00-a3ff-aa0d46403828",
            "title": "PATCH /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a container",
                "fullTitle": "CONTAINERS PATCH /containers/:id should return a container",
                "timedOut": false,
                "duration": 518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container).toBeTruthy();\n          expect(res.body.container.hasOnBoxNumbers).toBe(\n            patchData.hasOnBoxNumbers\n          );\n          expect(res.body.container.hasSigns).toBe(patchData.hasSigns);\n          expect(res.body.container.hasShelves).toBe(patchData.hasShelves);\n          expect(res.body.container.isPainted).toBe(patchData.isPainted);\n          expect(res.body.container.isFlagged).toBe(patchData.isFlagged);\n          expect(res.body.container.flagReason).toBe(patchData.flagReason);\n          expect(res.body.container.stats.currentAddress).toBe(\n            patchData.currentAddress\n          );\n          expect(res.body.container.stats.currentRentee).toBe(null);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ba7d16aa-1272-4d56-a812-e3d11c65fca0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: \"\",\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        rentalResale: \"\",\n        currentAddress: \"\",\n        currentlyRented: \"\",\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\"\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBeFalsy();\n          expect(res.body.size).toBe(\"Size is required\");\n          expect(res.body.currentlyRented).toBe(\n            \"You must select whether the container is currently rented\"\n          );\n          expect(res.body.currentAddress).toBe(\"Current address is required\");\n          expect(res.body.rentalResale).toBe(\"Select rental or resale\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2f62ce4c-d54c-4ef2-aa2f-853fc88ce04d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not patch a container with invalid fields",
                "fullTitle": "CONTAINERS PATCH /containers/:id should not patch a container with invalid fields",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      patchData = {\n        gbrNumber: containers[1].gbrNumber,\n        releaseNumber: containers[1].releaseNumber,\n        size: containers[1].size.toHexString(),\n        serialNumber: containers[1].serialNumber,\n        hasShelves: true,\n        isPainted: true,\n        hasOnBoxNumbers: true,\n        hasSigns: true,\n        rentalResale: \"Rental\",\n        isFlagged: true,\n        flagReason: \"Container is super damaged\",\n        stats: containers[1].stats.toHexString(),\n        currentRentee: null,\n        previousRentees:\n          \"5aefceb5fd938b204046c428,5aefceb5fd938b204046c429,5aefceb5fd938b204046c42a,5aefceb5fd938b204046c42b,5aefceb5fd938b204046c427\",\n        currentAddress: \"1733 S. Casablanca St., Visalia, CA 93292\",\n        currentlyRented: false\n      };\n      request(app)\n        .patch(`/api/containers/${containers[1]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .send(patchData)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a6edcf33-05ed-419f-ae7f-a51b46fca3e8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba7d16aa-1272-4d56-a812-e3d11c65fca0",
              "2f62ce4c-d54c-4ef2-aa2f-853fc88ce04d",
              "a6edcf33-05ed-419f-ae7f-a51b46fca3e8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 694,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f554e5c7-daf0-4bef-b796-4c1dfb13604c",
            "title": "DELETE /containers/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\containers.test.js",
            "file": "\\server\\tests\\containers.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a container",
                "fullTitle": "CONTAINERS DELETE /containers/:id should delete a container",
                "timedOut": false,
                "duration": 335,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.container._id).toBe(containers[1]._id.toHexString());\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Container.findById(containers[1]._id)\n            .then(container => {\n              expect(container).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "fd30694e-63fa-411e-8e10-d0e74bef2bd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete a container with invalid ID",
                "fullTitle": "CONTAINERS DELETE /containers/:id should not delete a container with invalid ID",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/containers/${containers[1]._id}sss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.container).toBe(\"There was no container found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fe267274-146e-4cc1-b39c-968f844ed0a9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fd30694e-63fa-411e-8e10-d0e74bef2bd2",
              "fe267274-146e-4cc1-b39c-968f844ed0a9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 420,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}