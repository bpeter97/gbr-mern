{
  "stats": {
    "suites": 8,
    "tests": 20,
    "passes": 17,
    "pending": 0,
    "failures": 3,
    "start": "2018-09-14T04:08:59.410Z",
    "end": "2018-09-14T04:10:15.192Z",
    "duration": 75782,
    "testsRegistered": 20,
    "passPercent": 85,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "25b6afeb-78f6-42c1-84f2-68a2d8ae28d7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a5500210-a21e-4108-b32d-488e8520a095",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
        "file": "\\server\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 647,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "9aa3bb3c-5ed2-41ef-bb67-ac95153ff48e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ee76b599-4dbe-4e92-8a4d-04d2767435a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 461,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "841efa0a-bd8e-4fb3-a2ee-abdcf882958b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 261,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "01137105-fa0b-4565-9dfc-bb706ba43239",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 169,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "107de0d6-cf1f-49d4-8f5e-3e3ff0e46278",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 168,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "64333134-5fea-4e0a-bf9e-111459002df8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 174,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "4b37c594-5974-4529-bcd5-a4d49a25795f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0e43a686-9bab-47ca-bb3e-7c8e55c77760",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "76bba7ac-2ee5-45ae-a494-b3cad8c835ef",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Order.remove({})\n    .then(() => {\n      var orderOne = new Order(orders[0]).save();\n      return Promise.all([orderOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2e7858ba-7b83-4955-87be-ce85626f6806",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "91b00cd2-65d7-49dc-8ef6-0c4a9bae73d4",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": false,
                "duration": 490,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders.length).toBe(orders.length);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "82e50c84-8fb5-4a81-bed4-dae7a30e8b10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b5d2b5f2-cff9-4a0b-847d-ecb3c489e1bc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "82e50c84-8fb5-4a81-bed4-dae7a30e8b10",
              "b5d2b5f2-cff9-4a0b-847d-ecb3c489e1bc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 497,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b3e47fb3-cb75-4312-a8f4-026195b05da3",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders[0].customer._id).toBe(orders[0].customer);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bb548b86-c736-4c0f-b8b6-19752e9380e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dc65412d-4979-420a-bf4f-70108cd6168a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/customer/${customers[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.customer).toBe(\"There was no customer found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e23dc302-b2a0-4adb-9d11-d736ded3abe4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb548b86-c736-4c0f-b8b6-19752e9380e0",
              "dc65412d-4979-420a-bf4f-70108cd6168a",
              "e23dc302-b2a0-4adb-9d11-d736ded3abe4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 355,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "f4e700c1-fa49-41e9-8d61-5217af571fe3",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.orders[0].createdBy._id).toBe(orders[0].createdBy);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "67757f4d-58b2-46a6-b29a-e1adce8747a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2d999efe-972a-40d3-bcee-e9bd2138b8c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/user/${users[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.user).toBe(\"There was no user found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "42c561a2-9a34-4318-afd4-c428e4eef620",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "67757f4d-58b2-46a6-b29a-e1adce8747a8",
              "2d999efe-972a-40d3-bcee-e9bd2138b8c0",
              "42c561a2-9a34-4318-afd4-c428e4eef620"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "645524a4-3bdc-499a-9c52-91ce01bfb2e8",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 931,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/orders\")\n        .send(newOrder)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.job.name).toBe(\"Walmart Construction\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Order.findOne({\n            job: {\n              name: \"Walmart Construction\",\n              address: \"1733 S. Casablanca St\",\n              city: \"Visalia\",\n              zipcode: \"93292\"\n            }\n          })\n            .then(order => {\n              expect(order).toBeTruthy();\n              expect(order.job.name).toBe(\"Walmart Construction\");\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {},
                "isRoot": false,
                "uuid": "c5436a94-04bc-4217-bf88-4b5387e3fa91",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/orders\")\n        .send(newOrder)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "50cdd706-ed47-4b18-be1f-2b5724f11bf1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c5436a94-04bc-4217-bf88-4b5387e3fa91",
              "50cdd706-ed47-4b18-be1f-2b5724f11bf1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 938,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "369c3fcd-3be7-4392-bf1c-faa0c6dcb685",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9dde7334-19f4-495e-9d90-d61315cfb5b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "682764e9-ae93-48af-a058-ee9cb77ff985",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/orders/${orders[0]._id}ssssssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d84cc92d-1004-456c-b9a3-c1d6672266ac",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9dde7334-19f4-495e-9d90-d61315cfb5b6",
              "682764e9-ae93-48af-a058-ee9cb77ff985",
              "d84cc92d-1004-456c-b9a3-c1d6672266ac"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 352,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "79aec80e-bffa-44f7-ba98-fc26c55ec6f8",
            "title": "PATCH /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return an order",
                "fullTitle": "ORDERS PATCH /orders/:id should update and return an order",
                "timedOut": true,
                "duration": 5001,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/orders/${orders[0]._id}`)\n        .send(updatedOrder)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Order.findOne({\n            job: {\n              name: \"Not a personal job\",\n              address: \"1733 S. Casablanca St\",\n              city: \"Visalia\",\n              zipcode: \"93292\"\n            }\n          })\n            .then(order => {\n              expect(order).toBeTruthy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {
                  "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)",
                  "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)"
                },
                "isRoot": false,
                "uuid": "f971facd-3cb9-4e7c-b1c7-7156ef307ea1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order if not logged in",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/orders/${orders[0]._id}`)\n        .send(updatedOrder)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7d486f81-9585-4188-878d-62ca4aada1be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order with improper ID",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order with improper ID",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/orders/${orders[0]._id}ssssssss`)\n        .send(updatedOrder)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 401 \"Unauthorized\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:266:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:281:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:171:18)\n    at Server.assert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1659:8)\n    at _combinedTickCallback (internal/process/next_tick.js:135:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)"
                },
                "isRoot": false,
                "uuid": "040de403-2490-4b03-81c6-cac0fb16ea27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order with validation errors",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order with validation errors",
                "timedOut": true,
                "duration": 5001,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      // updatedOrder.startDate = \"Not a real date\";\n      request(app)\n        .patch(`/api/orders/${orders[0]._id}`)\n        .send(updatedOrder)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.startDate).toBe(\"Not a valid date\");\n        })\n        .end(err => {\n          if (err) {\n            return done(err);\n          }\n          Order.findOne({\n            // Fix this to not be a date\n            startDate: updatedOrder.startDate\n          })\n            .then(order => {\n              expect(order).toBeFalsy();\n              done();\n            })\n            .catch(e => done(e));\n        });",
                "err": {
                  "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)",
                  "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)"
                },
                "isRoot": false,
                "uuid": "e96ec22c-7269-4489-aef8-d209da2522b3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d486f81-9585-4188-878d-62ca4aada1be"
            ],
            "failures": [
              "f971facd-3cb9-4e7c-b1c7-7156ef307ea1",
              "040de403-2490-4b03-81c6-cac0fb16ea27",
              "e96ec22c-7269-4489-aef8-d209da2522b3"
            ],
            "pending": [],
            "skipped": [],
            "duration": 10007,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "4b754b67-df65-416f-abb0-c090252078ad",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 270,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "046ca57b-4d31-4aad-8dc8-9c7e085492e6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "6656b8b8-8133-451b-bafb-b9f00086db87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b49398ca-19c0-4722-8abc-abaf5ad480d8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "046ca57b-4d31-4aad-8dc8-9c7e085492e6",
              "6656b8b8-8133-451b-bafb-b9f00086db87",
              "b49398ca-19c0-4722-8abc-abaf5ad480d8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}