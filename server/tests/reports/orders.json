{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 2,
    "pending": 16,
    "failures": 3,
    "start": "2018-08-12T12:13:25.053Z",
    "end": "2018-08-12T12:13:43.780Z",
    "duration": 18727,
    "testsRegistered": 21,
    "passPercent": 40,
    "pendingPercent": 76.2,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "warning"
  },
  "suites": {
    "uuid": "2ea785c4-b8b8-4ad6-9a0e-a6b67f2bfc96",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f41056bb-d94d-4b90-815b-1caee2b4e0f0",
        "title": "ORDERS",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
        "file": "\\server\\tests\\orders.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "ORDERS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 595,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      var userFour = new User(users[3]).save();\n      return Promise.all([userOne, userTwo, userThree, userFour]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "aefab466-3cb9-470d-88cb-5799232d5995",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 168,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ae6b4f4d-9213-41f9-984d-16b0cbe025da",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 172,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "1a842640-59fe-42ce-8166-c8daa2663527",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "ORDERS \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "47cca4eb-f8d1-4e50-8631-e033120255d0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "ORDERS \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2c101d02-b145-4e4d-b7c1-26efd4a1eba5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "ORDERS \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f76f2eaa-1eb4-4aa4-bb93-133d13c4b6ba",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerSizes",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerSizes",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerSize.remove({})\n    .then(() => {\n      var twenty = new ContainerSize(containerSizes[0]).save();\n      var fourty = new ContainerSize(containerSizes[1]).save();\n      var twentydoubledoors = new ContainerSize(containerSizes[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b5275e92-eb5f-4b5e-94bc-037e61150307",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerStats",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerStats",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerStats.remove({})\n    .then(() => {\n      var twenty = new ContainerStats(containerStats[0]).save();\n      var fourty = new ContainerStats(containerStats[1]).save();\n      var twentydoubledoors = new ContainerStats(containerStats[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c0c44fc3-5a9e-4beb-9af8-e5eec3049ae1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainers",
            "fullTitle": "ORDERS \"before each\" hook: populateContainers",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Container.remove({})\n    .then(() => {\n      var twenty = new Container(containers[0]).save();\n      var fourty = new Container(containers[1]).save();\n      var twentydoubledoors = new Container(containers[2]).save();\n      return Promise.all([twenty, fourty, twentydoubledoors]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3c268005-14e0-4262-8fcc-bd307c4e78d8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateContainerDeliveries",
            "fullTitle": "ORDERS \"before each\" hook: populateContainerDeliveries",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  ContainerDelivery.remove({})\n    .then(() => {\n      var cdOne = new ContainerDelivery(containerDeliveries[0]).save();\n      return Promise.all([cdOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "27ce30b4-5a92-460a-8945-a7ae22eaeb97",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateOrders",
            "fullTitle": "ORDERS \"before each\" hook: populateOrders",
            "timedOut": false,
            "duration": 169,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Order.remove({})\n    .then(() => {\n      var orderOne = new Order(orders[0]).save();\n      return Promise.all([orderOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "ccd583ff-ae38-4a02-9cd2-231ac610e09f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6beaa07b-7a77-4a89-9b61-a436e1b1447c",
            "title": "GET /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all orders that are not hidden",
                "fullTitle": "ORDERS GET /orders should return all orders that are not hidden",
                "timedOut": true,
                "duration": 5001,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(orders.length);\n        })\n        .end(done);",
                "err": {
                  "message": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)",
                  "estack": "Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js)"
                },
                "isRoot": false,
                "uuid": "e64c7bc8-c08a-48f8-abb2-1539986248b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if the user is not logged in",
                "fullTitle": "ORDERS GET /orders should not return orders if the user is not logged in",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/orders\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7f7a119a-6502-4668-a9cf-81545bf77ad4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7f7a119a-6502-4668-a9cf-81545bf77ad4"
            ],
            "failures": [
              "e64c7bc8-c08a-48f8-abb2-1539986248b7"
            ],
            "pending": [],
            "skipped": [],
            "duration": 5029,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "d21774de-b927-4fc2-9e43-60273b0854bf",
            "title": "POST /orders",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create an order and return it",
                "fullTitle": "ORDERS POST /orders should create an order and return it",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "d5e74119-36d7-4b7d-b3e1-6be1dc4727ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order with validation errors",
                "fullTitle": "ORDERS POST /orders should not create an order with validation errors",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "e3dc67aa-f96d-415f-97ee-81b0c34846a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create an order if user is not logged in",
                "fullTitle": "ORDERS POST /orders should not create an order if user is not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "0fcbee42-9696-4743-88db-2c14deba23f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "d5e74119-36d7-4b7d-b3e1-6be1dc4727ce",
              "e3dc67aa-f96d-415f-97ee-81b0c34846a4",
              "0fcbee42-9696-4743-88db-2c14deba23f6"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "983e9833-2514-46f7-8a75-b4cb7b03c1a8",
            "title": "GET /orders/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's orders that are not hidden",
                "fullTitle": "ORDERS GET /orders/customer/:id should return all of a customer's orders that are not hidden",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "27d7bf17-9041-4986-a781-e88132bfffef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "a85d1855-ba3c-4611-8c89-391ad3fb636f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/customer/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "3864ebea-bed1-4aa2-bfc1-8a359bb2406b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "27d7bf17-9041-4986-a781-e88132bfffef",
              "a85d1855-ba3c-4611-8c89-391ad3fb636f",
              "3864ebea-bed1-4aa2-bfc1-8a359bb2406b"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6bd9b102-b5f8-4fed-9a09-26234c81bb52",
            "title": "GET /orders/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created orders that are not hidden",
                "fullTitle": "ORDERS GET /orders/user/:id should return all of a user's created orders that are not hidden",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "875957c8-2cfe-4a8c-a90b-6b0e2198784e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if user is not logged in",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if user is not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "55d444fe-22ec-4276-857c-fed98c2cafbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return orders if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/user/:id should not return orders if supplied an invalid ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "28f06b7d-520c-4713-b91d-f7d52834adab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "875957c8-2cfe-4a8c-a90b-6b0e2198784e",
              "55d444fe-22ec-4276-857c-fed98c2cafbe",
              "28f06b7d-520c-4713-b91d-f7d52834adab"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "203f9422-1f52-45fc-b451-0309a0b03fb3",
            "title": "GET /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return an order with the ID matching the provided ID",
                "fullTitle": "ORDERS GET /orders/:id should return an order with the ID matching the provided ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "af1b18d5-5f87-41f2-9785-17e7876743a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if not logged in",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "96adfa93-3fc8-47ef-a525-b2b232bdd7e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return an order if supplied an invalid ID",
                "fullTitle": "ORDERS GET /orders/:id should not return an order if supplied an invalid ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "9a9034b9-445a-493c-98fb-721c186a7b8c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "af1b18d5-5f87-41f2-9785-17e7876743a0",
              "96adfa93-3fc8-47ef-a525-b2b232bdd7e1",
              "9a9034b9-445a-493c-98fb-721c186a7b8c"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9553e6a2-a5f5-4d55-becd-e88f1bf83d06",
            "title": "PATCH /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update and return an order",
                "fullTitle": "ORDERS PATCH /orders/:id should update and return an order",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "0b7d6f34-70c1-4ade-9dc2-ea53433c9d2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order if not logged in",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order if not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "45cb5f7d-1636-4c95-ad18-db2cc34c939d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order with improper ID",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order with improper ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "fba43bb8-17be-4b68-bfb5-0aef8a2cff5a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update an order with validation errors",
                "fullTitle": "ORDERS PATCH /orders/:id should not update an order with validation errors",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "5b67f7cd-f734-4728-90ae-dca48c4eee53",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "0b7d6f34-70c1-4ade-9dc2-ea53433c9d2a",
              "45cb5f7d-1636-4c95-ad18-db2cc34c939d",
              "fba43bb8-17be-4b68-bfb5-0aef8a2cff5a",
              "5b67f7cd-f734-4728-90ae-dca48c4eee53"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "033fd558-fcda-496f-9405-99debd8e13c0",
            "title": "DELETE /orders/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\orders.test.js",
            "file": "\\server\\tests\\orders.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete an order",
                "fullTitle": "ORDERS DELETE /orders/:id should delete an order",
                "timedOut": false,
                "duration": 106,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      console.log(orders);\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(orders[0]._id);\n        })\n        .end(done);",
                "err": {
                  "message": "Error: expected 200 \"OK\", got 404 \"Not Found\"",
                  "estack": "Error: expected 200 \"OK\", got 404 \"Not Found\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:266:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:281:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:171:18)\n    at Server.assert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1659:8)\n    at _combinedTickCallback (internal/process/next_tick.js:135:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)"
                },
                "isRoot": false,
                "uuid": "3d064a11-549e-47ce-87f7-10766e6d35d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order if not logged in",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "61915851-d62d-47f5-877d-c0c513efedd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete an order with an invalid ID",
                "fullTitle": "ORDERS DELETE /orders/:id should not delete an order with an invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "done => {\n      request(app)\n        .del(`/api/orders/${orders[0]._id}sssssss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.order).toBe(\"There was no order found\");\n        })\n        .end(done);",
                "err": {
                  "message": "Error: expected 400 \"Bad Request\", got 404 \"Not Found\"",
                  "estack": "Error: expected 400 \"Bad Request\", got 404 \"Not Found\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:266:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:281:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:171:18)\n    at Server.assert (node_modules\\supertest\\lib\\test.js:131:12)\n    at emitCloseNT (net.js:1659:8)\n    at _combinedTickCallback (internal/process/next_tick.js:135:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)"
                },
                "isRoot": false,
                "uuid": "24d002be-bafe-4134-991d-185e67e3a403",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61915851-d62d-47f5-877d-c0c513efedd5"
            ],
            "failures": [
              "3d064a11-549e-47ce-87f7-10766e6d35d2",
              "24d002be-bafe-4134-991d-185e67e3a403"
            ],
            "pending": [],
            "skipped": [],
            "duration": 196,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}