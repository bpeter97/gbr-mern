{
  "stats": {
    "suites": 6,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-24T05:59:24.073Z",
    "end": "2018-05-24T05:59:35.374Z",
    "duration": 11301,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2a7f7d41-e65d-42d6-b754-de4f93e602d7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c3b1b20c-a795-480b-b1db-70e242dc1595",
        "title": "TODOS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
        "file": "\\server\\tests\\todos.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "TODOS \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 482,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b8e43987-ca1a-493d-988c-3a25084be77d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateTodos",
            "fullTitle": "TODOS \"before each\" hook: populateTodos",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Todo.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var todoOne = new Todo(todos[0]).save();\n      var todoTwo = new Todo(todos[1]).save();\n      var todoThree = new Todo(todos[2]).save();\n      return Promise.all([todoOne, todoTwo, todoThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a07fe3c8-25f1-482c-b6c1-874c0afb3423",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "5475f16a-8fca-4ad2-8677-1d6a92bfea7f",
            "title": "GET /todos",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a users todos",
                "fullTitle": "TODOS GET /todos should return a users todos",
                "timedOut": false,
                "duration": 196,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(2);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "88709af2-6ac5-4d98-a046-327229eccc20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return a users todos if not logged in",
                "fullTitle": "TODOS GET /todos should not return a users todos if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/todos\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4a141e2b-3013-460d-ace8-b66d7a981058",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "88709af2-6ac5-4d98-a046-327229eccc20",
              "4a141e2b-3013-460d-ace8-b66d7a981058"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 202,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ddd9e21f-ac77-4420-8403-15e3cb221ced",
            "title": "POST /todos",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a new todo for the logged in user",
                "fullTitle": "TODOS POST /todos should create a new todo for the logged in user",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"The newest todo\");\n          expect(res.body.creator).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "fbabdca1-fbf6-4c99-9934-3b0c1e5b5893",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo for a user who is not logged in",
                "fullTitle": "TODOS POST /todos should not create a new todo for a user who is not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .send({\n          desc: \"The newest todo\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0453119a-3a69-4359-bc21-6a633bd1372a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a new todo with missing description",
                "fullTitle": "TODOS POST /todos should not create a new todo with missing description",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/todos\")\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e25e3ba8-4894-460a-b9a4-375aa8488062",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fbabdca1-fbf6-4c99-9934-3b0c1e5b5893",
              "0453119a-3a69-4359-bc21-6a633bd1372a",
              "e25e3ba8-4894-460a-b9a4-375aa8488062"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 281,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "75b516a6-b99b-4d91-a76d-978adf5bd944",
            "title": "GET /todo/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return the users todo",
                "fullTitle": "TODOS GET /todo/:id should return the users todo",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n          expect(res.body.creator._id).toBe(users[1]._id.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a64465d6-edd5-4b89-ad7c-c68505c1ba7d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return another users todo",
                "fullTitle": "TODOS GET /todo/:id should not return another users todo",
                "timedOut": false,
                "duration": 249,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "1787e820-17a5-4b65-9d89-18a1685ffc11",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a64465d6-edd5-4b89-ad7c-c68505c1ba7d",
              "1787e820-17a5-4b65-9d89-18a1685ffc11"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 503,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "417db474-0943-4263-aee2-9dfff1c2f216",
            "title": "PATCH /todo/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update the users todo",
                "fullTitle": "TODOS PATCH /todo/:id should update the users todo",
                "timedOut": false,
                "duration": 172,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"a new description\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "46fff10a-a410-4cad-b726-6b5efd1a1353",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update another users todo",
                "fullTitle": "TODOS PATCH /todo/:id should not update another users todo",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .send({\n          desc: \"a new description\",\n          creator: users[1]._id\n        })\n        .expect(401)\n        .expect(res => {\n          expect(res.body.desc).toBeFalsy();\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "edc7a67a-0df4-4c9b-9dc8-e874c1ee4fba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update user's todo with validation errors",
                "fullTitle": "TODOS PATCH /todo/:id should not update user's todo with validation errors",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .send({\n          desc: \"\",\n          creator: users[1]._id\n        })\n        .expect(400)\n        .expect(res => {\n          expect(res.body.desc).toBe(\"Todo description is required\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "e2314341-524c-402c-bce4-6b6358d2bdd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "46fff10a-a410-4cad-b726-6b5efd1a1353",
              "edc7a67a-0df4-4c9b-9dc8-e874c1ee4fba",
              "e2314341-524c-402c-bce4-6b6358d2bdd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 432,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "64a99269-98c4-49df-8a4f-cd9a715b7976",
            "title": "DELETE /todo/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\todos.test.js",
            "file": "\\server\\tests\\todos.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete the users todo",
                "fullTitle": "TODOS DELETE /todo/:id should delete the users todo",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[1].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.desc).toBe(todos[0].desc);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "4fe46648-eb2b-4497-8e74-455d715fe1c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete another users todo",
                "fullTitle": "TODOS DELETE /todo/:id should not delete another users todo",
                "timedOut": false,
                "duration": 173,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/todos/${todos[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.todo).toBe(\"You cannot access this todo\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "495b4d4b-9615-4103-8189-899601cd33a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4fe46648-eb2b-4497-8e74-455d715fe1c9",
              "495b4d4b-9615-4103-8189-899601cd33a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 342,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}