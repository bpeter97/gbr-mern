{
  "stats": {
    "suites": 7,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-15T01:13:12.242Z",
    "end": "2018-05-15T01:13:15.879Z",
    "duration": 3637,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ed6fe0a4-afa8-44ca-8bb1-196c331fc878",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populatePurchaseTypes",
        "fullTitle": "\"before each\" hook: populatePurchaseTypes",
        "timedOut": false,
        "duration": 173,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "33a3160e-b77b-4e4c-982e-6f0e4829c6d5",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "53ca22e7-403a-49a1-b4b6-1421c2ed2376",
        "title": "SETTINGS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
        "file": "\\server\\tests\\settings.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "ca6a7d5c-b9e5-4289-a009-037345a56110",
            "title": "Purchase Types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
            "file": "\\server\\tests\\settings.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f7cdf911-498a-4f83-b68b-ca0fc58d9d76",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 117,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\"/api/settings/purchasetypes\")\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseTypes).toBeTruthy();\n            expect(res.body.purchaseTypes.length).toBe(2);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a247c11-d807-4159-941b-24c5e75b546d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7a247c11-d807-4159-941b-24c5e75b546d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 117,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "b2b02e14-6c1a-41a6-9e46-57042174799c",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 193,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findOne({ type: \"Resale\" })\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "59167dde-7c7b-4ea4-84ad-f89796ce5ead",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0b376cf-6421-45fa-b6cb-af607b352668",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "59167dde-7c7b-4ea4-84ad-f89796ce5ead",
                  "c0b376cf-6421-45fa-b6cb-af607b352668"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 198,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "4347de0b-b78c-4cb7-bc4b-064b6d30e929",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 93,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n          )\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(purchaseTypes[0].type);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e182ae0-1b94-4306-9665-b7743a9579e9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n          )\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\n              \"There was no purchase type found\"\n            );\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f32fa9bf-deb8-4522-bb7e-1588bf9130d0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3e182ae0-1b94-4306-9665-b7743a9579e9",
                  "f32fa9bf-deb8-4522-bb7e-1588bf9130d0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 96,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "fae505df-364f-4db8-9c61-a9160a06e1d8",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 170,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6e501da8-1afb-4640-b8a0-cfd5e55517e4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 90,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n          .send({ type: \"Resale\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "95f4575c-ef72-4d33-9ead-2056e4e919c0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 89,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5b885d12-7ab4-469c-abdf-712975acae14",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "6e501da8-1afb-4640-b8a0-cfd5e55517e4",
                  "95f4575c-ef72-4d33-9ead-2056e4e919c0",
                  "5b885d12-7ab4-469c-abdf-712975acae14"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 349,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "e8e9dbd7-b4f5-4296-8fd5-17106050c846",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 175,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(purchaseTypes[0].type);\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeFalsy();\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "20744e6f-7460-40c3-af14-37620ac135a0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(purchaseTypes[0].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2c830896-e6bf-43d7-b31d-039ab863f8d4",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "20744e6f-7460-40c3-af14-37620ac135a0",
                  "2c830896-e6bf-43d7-b31d-039ab863f8d4"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 260,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}