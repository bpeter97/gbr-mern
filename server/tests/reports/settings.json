{
  "stats": {
    "suites": 7,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-23T02:22:48.207Z",
    "end": "2018-05-23T02:22:59.195Z",
    "duration": 10988,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "502b957f-0d87-4efc-8e56-19f55bf7eebc",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [
      {
        "title": "\"before each\" hook: populateUsers",
        "fullTitle": "\"before each\" hook: populateUsers",
        "timedOut": false,
        "duration": 584,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      bcrypt.genSalt(10, (err, salt) => {\n        // Now hash the password with the salt.\n        bcrypt.hash(\"thePassword\", salt, (err, hash) => {\n          if (err) throw err;\n          // Assign the newly hashed password to the new User object\n          users[0].password = hash;\n          users[1].password = hash;\n          users[2].password = hash;\n        });\n      });\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save();\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "20aa6f06-729b-4e7e-8ed9-3d5093b9a356",
        "isHook": true,
        "skipped": false
      },
      {
        "title": "\"before each\" hook: populatePurchaseTypes",
        "fullTitle": "\"before each\" hook: populatePurchaseTypes",
        "timedOut": false,
        "duration": 165,
        "pass": false,
        "fail": false,
        "pending": false,
        "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
        "err": {},
        "isRoot": true,
        "uuid": "767ca1bb-ebc4-481f-8d2e-c31f38bbc386",
        "isHook": true,
        "skipped": false
      }
    ],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "89634a0f-072d-4b2c-8c7d-3a5d2fe19589",
        "title": "SETTINGS",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
        "file": "\\server\\tests\\settings.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "33aaf6d0-ebe5-4bde-9d79-53d9cb7ebd83",
            "title": "Purchase Types",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
            "file": "\\server\\tests\\settings.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c21616b7-c03f-48ad-8c6c-c0940e1991f5",
                "title": "GET /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return an array of purchase types",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/ should return an array of purchase types",
                    "timedOut": false,
                    "duration": 200,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseTypes).toBeTruthy();\n            expect(res.body.purchaseTypes.length).toBe(2);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "362ef894-cd20-40a1-8b6e-c04785886c2f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "362ef894-cd20-40a1-8b6e-c04785886c2f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 200,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "619faaa4-4c60-40cc-8041-32041161db03",
                "title": "POST /settings/purchasetypes/",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should create a purchase type",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should create a purchase type",
                    "timedOut": false,
                    "duration": 269,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findOne({ type: \"Resale\" })\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9cae4b9-25f4-4487-9f98-79bd73ac2c48",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not create a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types POST /settings/purchasetypes/ should not create a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 85,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .post(\"/api/settings/purchasetypes\")\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b83a652-54a7-4a34-ab87-62f65513c762",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e9cae4b9-25f4-4487-9f98-79bd73ac2c48",
                  "6b83a652-54a7-4a34-ab87-62f65513c762"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 354,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "a068cde7-27ad-4030-b5ae-202953c4ab28",
                "title": "GET /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should return a purchase type",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should return a purchase type",
                    "timedOut": false,
                    "duration": 167,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(purchaseTypes[0].type);\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "be46137a-748e-4aa9-90f8-35a89a41bffd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not return a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types GET /settings/purchasetypes/:id should not return a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 86,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .get(\n            `/api/settings/purchasetypes/${purchaseTypes[0]._id.toHexString()}sss`\n          )\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\n              \"There was no purchase type found\"\n            );\n          })\n          .end(done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f98b1f58-942f-4ec8-a936-34f7d309ebb2",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "be46137a-748e-4aa9-90f8-35a89a41bffd",
                  "f98b1f58-942f-4ec8-a936-34f7d309ebb2"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 253,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "7924041b-8442-4edc-8152-b8cd0d7c54cc",
                "title": "PATCH /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should update a purchase type",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should update a purchase type",
                    "timedOut": false,
                    "duration": 254,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(\"Resale\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(\"Resale\");\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3eac56d-03b8-4c40-af5d-5ebe61ae27b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 172,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}ssss`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"Resale\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b1790dcf-cdde-4dcc-838b-647f956b9837",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not update a purchase type with validation errors",
                    "fullTitle": "SETTINGS Purchase Types PATCH /settings/purchasetypes/:id should not update a purchase type with validation errors",
                    "timedOut": false,
                    "duration": 170,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .patch(`/api/settings/purchasetypes/${purchaseTypes[1]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .send({ type: \"\" })\n          .expect(400)\n          .expect(res => {\n            expect(res.body.type).toBe(\"Purchase type is required\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[1]._id)\n              .then(purchaseType => {\n                expect(purchaseType.type).toBe(purchaseTypes[1].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "70d1ccdb-95a3-479e-a690-0fad74500c3a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e3eac56d-03b8-4c40-af5d-5ebe61ae27b3",
                  "b1790dcf-cdde-4dcc-838b-647f956b9837",
                  "70d1ccdb-95a3-479e-a690-0fad74500c3a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 596,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              },
              {
                "uuid": "91aec52f-aa96-4bd0-97e4-273bd54b26c0",
                "title": "DELETE /settings/purchasetypes/:id",
                "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\settings.test.js",
                "file": "\\server\\tests\\settings.test.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "should delete a purchase type",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should delete a purchase type",
                    "timedOut": false,
                    "duration": 259,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}`)\n          .set(\"Authorization\", users[0].token)\n          .expect(200)\n          .expect(res => {\n            expect(res.body.purchaseType.type).toBe(purchaseTypes[0].type);\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeFalsy();\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e74cfaa7-1b32-45e7-b3ec-ccc570e0494d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "should not delete a purchase type with invalid ID",
                    "fullTitle": "SETTINGS Purchase Types DELETE /settings/purchasetypes/:id should not delete a purchase type with invalid ID",
                    "timedOut": false,
                    "duration": 176,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "done => {\n        request(app)\n          .delete(`/api/settings/purchasetypes/${purchaseTypes[0]._id}sss`)\n          .set(\"Authorization\", users[0].token)\n          .expect(400)\n          .expect(res => {\n            expect(res.body.purchaseType).toBe(\"No purchase type found\");\n          })\n          .end(err => {\n            if (err) {\n              return done(err);\n            }\n            PurchaseType.findById(purchaseTypes[0]._id)\n              .then(purchaseType => {\n                expect(purchaseType).toBeTruthy();\n                expect(purchaseType.type).toBe(purchaseTypes[0].type);\n                done();\n              })\n              .catch(e => done(e));\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c6a0f5b6-592d-4f21-b0b5-d2c08273f6b6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e74cfaa7-1b32-45e7-b3ec-ccc570e0494d",
                  "c6a0f5b6-592d-4f21-b0b5-d2c08273f6b6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 435,
                "root": false,
                "rootEmpty": false,
                "_timeout": 5000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}