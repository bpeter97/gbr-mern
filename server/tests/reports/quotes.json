{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-20T06:12:18.971Z",
    "end": "2018-06-20T06:12:55.899Z",
    "duration": 36928,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "2159d59b-9202-43e7-b426-f85c1446335d",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "e57f590c-7ad0-4172-9d4e-a36d9e87e26c",
        "title": "QUOTES",
        "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
        "file": "\\server\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 469,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "f582b0c1-cc82-454e-8ed4-51e201f0d6db",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 168,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c59a64d8-15fd-4c50-86e4-2ab737f1e73c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 167,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "c90c25fa-7ae9-4179-9be4-13f27dbded5d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 177,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "93030395-7483-4d87-9701-cc72190b9c3e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 165,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2670462b-4e72-4683-bf19-ff41386e4b0f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "2d0347fe-fa4f-45f1-a021-7ed086b5ca7c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 164,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Quote.remove({})\n    .then(() => {\n      var quoteOne = new Quote(quotes[0]).save();\n      return Promise.all([quoteOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "add07b65-6f38-4c53-b757-e7dead706ca2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "fa425692-8efc-4864-a840-6d8745aa6139",
            "title": "GET /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 654,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "d19089af-1dc6-49e5-8618-20067e661332",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9f192365-828e-43a6-b495-df14c5efdf0d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d19089af-1dc6-49e5-8618-20067e661332",
              "9f192365-828e-43a6-b495-df14c5efdf0d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 664,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "ea337dfb-433b-49fe-9e3e-d3b9c532f15f",
            "title": "POST /quotes",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 575,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer).toBe(newQuote.customer);\n          expect(res.body.attention).toBe(newQuote.attention);\n          expect(res.body.isHidden).toBe(false);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "abd10afc-9ad0-47e9-ad26-fb7d0024fb36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c957934c-2874-489c-bed5-17cede424b66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      newQuote.purchaseType = \"not a number\";\n      request(app)\n        .post(\"/api/quotes\")\n        .send(newQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchaseType).toBe(\n            \"Purchase type selected does not exist\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "ef9fb5f8-be4b-43ba-b893-c0f15205814c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "abd10afc-9ad0-47e9-ad26-fb7d0024fb36",
              "c957934c-2874-489c-bed5-17cede424b66",
              "ef9fb5f8-be4b-43ba-b893-c0f15205814c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 843,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b7f16983-edc6-4e6e-b1fa-1e0b5501b7e8",
            "title": "GET /quotes/customer/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 605,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "f5495206-8455-467c-af87-675e4bdab7f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "41e088f5-748e-4aef-aee0-529bcf00ce10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this customer\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "a55347c3-6806-4331-be0b-11f165fad0c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5495206-8455-467c-af87-675e4bdab7f3",
              "41e088f5-748e-4aef-aee0-529bcf00ce10",
              "a55347c3-6806-4331-be0b-11f165fad0c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 700,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8dc84895-5399-4897-96aa-33deebea9bfb",
            "title": "GET /quotes/user/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "54956723-c2dc-4588-aa63-210c60d20700",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8c14ed2b-b502-4dca-b54e-0b2e69822318",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this user\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5d57b974-53b9-4bcd-bf03-905c9fd7ee2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "54956723-c2dc-4588-aa63-210c60d20700",
              "8c14ed2b-b502-4dca-b54e-0b2e69822318",
              "5d57b974-53b9-4bcd-bf03-905c9fd7ee2a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 360,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "0b81f654-8615-40aa-b1ea-b500b5e218e4",
            "title": "GET /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 268,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "7606b9e7-3629-4780-b1bb-13c32737251b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "bbbba127-bd9d-43fb-8370-a4e0d9f78158",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "23fa6435-48e7-4c8e-a9ab-1091bdfe0640",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7606b9e7-3629-4780-b1bb-13c32737251b",
              "bbbba127-bd9d-43fb-8370-a4e0d9f78158",
              "23fa6435-48e7-4c8e-a9ab-1091bdfe0640"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 359,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "c6d0f12d-8f90-447c-bdc1-fe4366bf2b5d",
            "title": "PATCH /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 603,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body._id).toBe(updateQuote._id);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "25e04da7-2e1d-4803-abcb-651d591f2bbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b83be894-1969-4f66-81ae-874ffdd97231",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}sss`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"No quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "5358cba4-daa5-42e1-b48e-4f00c5a17d44",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      updateQuote.purchasePrices = \"sd235523\";\n      request(app)\n        .patch(`/api/quotes/${updateQuote._id}`)\n        .send(updateQuote)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.purchasePrices).toBe(\n            \"There is an issue with the quote's purchase prices\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "cdb6a6d1-a778-4542-9b3d-0ab67a6f89a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25e04da7-2e1d-4803-abcb-651d591f2bbd",
              "b83be894-1969-4f66-81ae-874ffdd97231",
              "5358cba4-daa5-42e1-b48e-4f00c5a17d44",
              "cdb6a6d1-a778-4542-9b3d-0ab67a6f89a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 955,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "623838a8-98a2-4f66-a20a-e09dff7b7281",
            "title": "DELETE /quotes/:id",
            "fullFile": "C:\\Programming\\gbr-mern\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "2c6982af-5715-4cab-bef1-45491738a3cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "19ec380e-1f97-4db5-9242-8e77f1bcaeef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "234f21be-ea77-4fb5-899e-1435d6ffea75",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2c6982af-5715-4cab-bef1-45491738a3cd",
              "19ec380e-1f97-4db5-9242-8e77f1bcaeef",
              "234f21be-ea77-4fb5-899e-1435d6ffea75"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 358,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}