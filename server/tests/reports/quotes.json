{
  "stats": {
    "suites": 8,
    "tests": 21,
    "passes": 14,
    "pending": 7,
    "failures": 0,
    "start": "2018-06-06T06:30:27.734Z",
    "end": "2018-06-06T06:30:52.771Z",
    "duration": 25037,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 33.3,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6bf81d35-4880-47d2-8607-2a313b9e1890",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3e85a62e-f119-41c4-bef7-3107560c62a4",
        "title": "QUOTES",
        "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
        "file": "\\server\\tests\\quotes.test.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook: populateUsers",
            "fullTitle": "QUOTES \"before each\" hook: populateUsers",
            "timedOut": false,
            "duration": 496,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  User.remove({})\n    .then(() => {\n      // generate the hash/salted password for the users.\n      var userOne = new User(users[0]).save().then(user => {\n        users[0].token = user.generateAuthToken();\n      });\n      var userTwo = new User(users[1]).save().then(user => {\n        users[1].token = user.generateAuthToken();\n      });\n      var userThree = new User(users[2]).save();\n      return Promise.all([userOne, userTwo, userThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "a2b4195e-587d-45b4-9b94-077cf1cbde56",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateProducts",
            "timedOut": false,
            "duration": 170,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Product.remove({})\n    .then(() => {\n      var lockbox = new Product(products[0]).save();\n      var delivery = new Product(products[1]).save();\n      var container = new Product(products[2]).save();\n      return Promise.all([lockbox, delivery, container]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b9085c4a-7b16-43b2-96c1-0154ee16ee59",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchaseTypes",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchaseTypes",
            "timedOut": false,
            "duration": 191,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchaseType.remove({})\n    .then(() => {\n      var purchaseTypeOne = new PurchaseType(purchaseTypes[0]).save();\n      var purchaseTypeTwo = new PurchaseType(purchaseTypes[1]).save();\n      return Promise.all([purchaseTypeOne, purchaseTypeTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "5c2ad1d3-de51-4e80-97b5-af2a1d29a543",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateCustomers",
            "fullTitle": "QUOTES \"before each\" hook: populateCustomers",
            "timedOut": false,
            "duration": 168,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Customer.remove({})\n    .then(() => {\n      var customerOne = new Customer(customers[0]).save();\n      var customerTwo = new Customer(customers[1]).save();\n      var customerThree = new Customer(customers[2]).save();\n      return Promise.all([customerOne, customerTwo, customerThree]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "b165a987-a23e-45e0-ab86-1cf0a2002ef4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateRequestedProducts",
            "fullTitle": "QUOTES \"before each\" hook: populateRequestedProducts",
            "timedOut": false,
            "duration": 162,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  RequestedProduct.remove({})\n    .then(() => {\n      var requestedProductOne = new RequestedProduct(\n        requestedProducts[0]\n      ).save();\n      var requestedProductTwo = new RequestedProduct(\n        requestedProducts[1]\n      ).save();\n      return Promise.all([requestedProductOne, requestedProductTwo]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "3f5223a3-5559-40d6-9080-e8ef4848c6d3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populatePurchasePrices",
            "fullTitle": "QUOTES \"before each\" hook: populatePurchasePrices",
            "timedOut": false,
            "duration": 171,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  PurchasePrices.remove({})\n    .then(() => {\n      var ppOne = new PurchasePrices(purchasePrices[0]).save();\n      return Promise.all([ppOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "0235c555-08d4-4de1-9d58-13fd64154e88",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: populateQuotes",
            "fullTitle": "QUOTES \"before each\" hook: populateQuotes",
            "timedOut": false,
            "duration": 163,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "done => {\n  Quote.remove({})\n    .then(() => {\n      var quoteOne = new Quote(quotes[0]).save();\n      return Promise.all([quoteOne]);\n    })\n    .then(() => done())\n    .catch(e => console.log(e));",
            "err": {},
            "isRoot": false,
            "uuid": "13cbd984-71b9-4f3c-9c23-393897934462",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2bd2709d-238f-4c32-9394-a7a86099a7ae",
            "title": "GET /quotes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes should return all quotes that are not hidden",
                "timedOut": false,
                "duration": 638,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "c7b2d2ea-ce4f-4d1d-849d-ae026535c46c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes should not return quotes if not logged in",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(\"/api/quotes\")\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b54d8f9b-ef94-4b4b-a31d-25a897374b68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c7b2d2ea-ce4f-4d1d-849d-ae026535c46c",
              "b54d8f9b-ef94-4b4b-a31d-25a897374b68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 645,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9d723ae3-ccc6-431f-96b9-4257e7ec4fe8",
            "title": "POST /quotes",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should create a quote and return it",
                "fullTitle": "QUOTES POST /quotes should create a quote and return it",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "325a4b6f-1cd1-49f9-94f8-1b1ad07fbed1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote if not logged in",
                "fullTitle": "QUOTES POST /quotes should not create a quote if not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "67ba1643-5d23-47cf-8b90-942cfce24cab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not create a quote with validation errors",
                "fullTitle": "QUOTES POST /quotes should not create a quote with validation errors",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "1160cd0d-fa46-4979-8a65-838959ca6c7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "325a4b6f-1cd1-49f9-94f8-1b1ad07fbed1",
              "67ba1643-5d23-47cf-8b90-942cfce24cab",
              "1160cd0d-fa46-4979-8a65-838959ca6c7b"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "9ef02673-ed58-41d9-a869-9bf8c53e8059",
            "title": "GET /quotes/customer/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a customer's quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/customer/:id should return all of a customer's quotes that are not hidden",
                "timedOut": false,
                "duration": 663,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "9194a6da-637a-4434-ba0a-b4c028fd6826",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b4775280-7f62-4601-9a9a-7eb8a4fd9a0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid ID",
                "fullTitle": "QUOTES GET /quotes/customer/:id should not return quotes with invalid ID",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/customer/${customers[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this customer\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "47c30c6f-deb3-40ed-b74c-92725438c867",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9194a6da-637a-4434-ba0a-b4c028fd6826",
              "b4775280-7f62-4601-9a9a-7eb8a4fd9a0a",
              "47c30c6f-deb3-40ed-b74c-92725438c867"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 759,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "b91abc9a-055a-4faa-94b6-16adc1580201",
            "title": "GET /quotes/user/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return all of a user's created quotes that are not hidden",
                "fullTitle": "QUOTES GET /quotes/user/:id should return all of a user's created quotes that are not hidden",
                "timedOut": false,
                "duration": 271,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].createdBy.firstName).toBe(users[0].firstName);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "0e1ad703-3df1-4c57-b4bc-09c8d5a81ef9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes if not logged in",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes if not logged in",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "dc26659c-464a-4a70-978a-39d5e8d5092f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quotes with invalid user ID",
                "fullTitle": "QUOTES GET /quotes/user/:id should not return quotes with invalid user ID",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/user/${users[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\n            \"There were no quotes found for this user\"\n          );\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "8968c8f7-2e29-45f6-9340-665033f772e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0e1ad703-3df1-4c57-b4bc-09c8d5a81ef9",
              "dc26659c-464a-4a70-978a-39d5e8d5092f",
              "8968c8f7-2e29-45f6-9340-665033f772e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "89144a6e-1f54-46dd-8a6c-a1b521aa7268",
            "title": "GET /quotes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return a quote",
                "fullTitle": "QUOTES GET /quotes/:id should return a quote",
                "timedOut": false,
                "duration": 257,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer._id).toBe(quotes[0].customer.toHexString());\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "29e27eaf-5525-40fd-83bf-0b4af4b21797",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote if not logged in",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "16f0471b-3e22-4505-886e-4cb981c1292c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not return quote with invalid ID",
                "fullTitle": "QUOTES GET /quotes/:id should not return quote with invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .get(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "288cac27-3d21-43d6-a704-1c15cc6fcc5c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29e27eaf-5525-40fd-83bf-0b4af4b21797",
              "16f0471b-3e22-4505-886e-4cb981c1292c",
              "288cac27-3d21-43d6-a704-1c15cc6fcc5c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 347,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "8a682700-c7d1-4c97-803b-dff80e5d7ada",
            "title": "PATCH /quotes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should update a quote",
                "fullTitle": "QUOTES PATCH /quotes/:id should update a quote",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "c1c1dd32-fe23-4b28-b68c-4c247d60c708",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with validation errors",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with validation errors",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "458cc928-d716-4a32-bda4-443ff39acd90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote if not logged in",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote if not logged in",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "76a12919-b1aa-4a0b-a146-c306043ab19e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not update quote with invalid ID",
                "fullTitle": "QUOTES PATCH /quotes/:id should not update quote with invalid ID",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "3888a802-3d2d-4a43-9303-3bd23e5c9da3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [],
            "pending": [
              "c1c1dd32-fe23-4b28-b68c-4c247d60c708",
              "458cc928-d716-4a32-bda4-443ff39acd90",
              "76a12919-b1aa-4a0b-a146-c306043ab19e",
              "3888a802-3d2d-4a43-9303-3bd23e5c9da3"
            ],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          },
          {
            "uuid": "6bc2f2db-6ee9-42c7-a28b-38d4407c0a58",
            "title": "DELETE /quotes/:id",
            "fullFile": "E:\\ProgrammingProjects\\gbr-mern-master\\server\\tests\\quotes.test.js",
            "file": "\\server\\tests\\quotes.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should delete a quote",
                "fullTitle": "QUOTES DELETE /quotes/:id should delete a quote",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .set(\"Authorization\", users[0].token)\n        .expect(200)\n        .expect(res => {\n          expect(res.body.customer.name).toBe(customers[0].name);\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "b567dbcd-f45c-4253-8b53-e979ee86199e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote if not logged in",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote if not logged in",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}`)\n        .expect(401)\n        .expect(res => {\n          expect(res.body.auth).toBe(\"Authorization failed\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "97c81569-cc40-4af7-bf8f-48c872567b38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not delete quote with invalid ID",
                "fullTitle": "QUOTES DELETE /quotes/:id should not delete quote with invalid ID",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      request(app)\n        .delete(`/api/quotes/${quotes[0]._id}ss`)\n        .set(\"Authorization\", users[0].token)\n        .expect(400)\n        .expect(res => {\n          expect(res.body.quote).toBe(\"There was no quote found\");\n        })\n        .end(done);",
                "err": {},
                "isRoot": false,
                "uuid": "edcafdad-0756-48da-8bfd-17bd247ec7b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b567dbcd-f45c-4253-8b53-e979ee86199e",
              "97c81569-cc40-4af7-bf8f-48c872567b38",
              "edcafdad-0756-48da-8bfd-17bd247ec7b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 356,
            "root": false,
            "rootEmpty": false,
            "_timeout": 5000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 5000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 5000
  },
  "copyrightYear": 2018
}